
HEPA_UV_DVT_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c004  0800c004  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c00c  0800c00c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c00c  0800c00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c010  0800c010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ef0  20000070  0800c084  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f60  0800c084  00022f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002611c  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a01  00000000  00000000  000461ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002220  00000000  00000000  0004ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a8c  00000000  00000000  0004ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257c0  00000000  00000000  0004e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026b9e  00000000  00000000  0007406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9af1  00000000  00000000  0009ac0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009d74  00000000  00000000  001946fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  0019e470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be08 	.word	0x0800be08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800be08 	.word	0x0800be08

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <bytestowrite>:

uint8_t line[] = "\r\n";

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	4613      	mov	r3, r2
 80005da:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;	//if size of data to be sent can fit on the page, transmit all data at once
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	88bb      	ldrh	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2b3f      	cmp	r3, #63	; 0x3f
 80005e4:	dc01      	bgt.n	80005ea <bytestowrite+0x1e>
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	e003      	b.n	80005f2 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;				//if size of data can't fit on a single page, transmit enough data to fill one page
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80005f0:	b29b      	uxth	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <EEPROM_Write>:

/* Write EEPROM */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af04      	add	r7, sp, #16
 8000606:	60ba      	str	r2, [r7, #8]
 8000608:	461a      	mov	r2, r3
 800060a:	4603      	mov	r3, r0
 800060c:	81fb      	strh	r3, [r7, #14]
 800060e:	460b      	mov	r3, r1
 8000610:	81bb      	strh	r3, [r7, #12]
 8000612:	4613      	mov	r3, r2
 8000614:	80fb      	strh	r3, [r7, #6]
// Find out the number of bit, where the page addressing starts
// Page size = 64
// log(64)/log(2) = 6 => 6 last bits of the two address bytes are reserved for byte address (0-63 range, 63 = 111111)
// The page addressing starts at bit A6
// We use 8 next bits (A6 to A13) for page bytes (0-249 range, 249 = 1111 1001)
int paddrposition = log(PAGE_SIZE)/log(2);
 8000616:	2306      	movs	r3, #6
 8000618:	61fb      	str	r3, [r7, #28]

// calculate the start page and the end page
uint16_t startPage = page;
 800061a:	89fb      	ldrh	r3, [r7, #14]
 800061c:	84fb      	strh	r3, [r7, #38]	; 0x26
uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	da00      	bge.n	800062a <EEPROM_Write+0x2a>
 8000628:	333f      	adds	r3, #63	; 0x3f
 800062a:	119b      	asrs	r3, r3, #6
 800062c:	b29a      	uxth	r2, r3
 800062e:	89fb      	ldrh	r3, [r7, #14]
 8000630:	4413      	add	r3, r2
 8000632:	837b      	strh	r3, [r7, #26]

// number of pages to be written
uint16_t numofpages = (endPage-startPage) + 1;
 8000634:	8b7a      	ldrh	r2, [r7, #26]
 8000636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	b29b      	uxth	r3, r3
 800063c:	3301      	adds	r3, #1
 800063e:	833b      	strh	r3, [r7, #24]
uint16_t pos=0;
 8000640:	2300      	movs	r3, #0
 8000642:	84bb      	strh	r3, [r7, #36]	; 0x24

// write the data
for (int i=0; i<numofpages; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
 8000648:	e039      	b.n	80006be <EEPROM_Write+0xbe>
		 * MemAddress contains the start page
		 * It needs to be shifted by 6, so that the start page info is correctly starting at bit A6 in the two address bytes that
		 * will be sent to EEPROM
		 * offset relates to the offset inside the start page
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800064a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	b21a      	sxth	r2, r3
 8000654:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000658:	4313      	orrs	r3, r2
 800065a:	b21b      	sxth	r3, r3
 800065c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 800065e:	89ba      	ldrh	r2, [r7, #12]
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffb1 	bl	80005cc <bytestowrite>
 800066a:	4603      	mov	r3, r0
 800066c:	82bb      	strh	r3, [r7, #20]

		if(HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000) != HAL_OK)
 800066e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	4413      	add	r3, r2
 8000674:	8af9      	ldrh	r1, [r7, #22]
 8000676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067a:	9202      	str	r2, [sp, #8]
 800067c:	8aba      	ldrh	r2, [r7, #20]
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2302      	movs	r3, #2
 8000684:	460a      	mov	r2, r1
 8000686:	21a0      	movs	r1, #160	; 0xa0
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <EEPROM_Write+0xd0>)
 800068a:	f004 f9ed 	bl	8004a68 <HAL_I2C_Mem_Write>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <EEPROM_Write+0x98>
				{
					Error_Handler();
 8000694:	f001 fbc6 	bl	8001e24 <Error_Handler>
				}// write the data to the EEPROM

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800069a:	3301      	adds	r3, #1
 800069c:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   	// since we will be writing to a new page, so offset will be 0
 800069e:	2300      	movs	r3, #0
 80006a0:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 80006a2:	88fa      	ldrh	r2, [r7, #6]
 80006a4:	8abb      	ldrh	r3, [r7, #20]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80006aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006ac:	8abb      	ldrh	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 80006b2:	2005      	movs	r0, #5
 80006b4:	f002 f9fe 	bl	8002ab4 <HAL_Delay>
for (int i=0; i<numofpages; i++)
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	3301      	adds	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
 80006be:	8b3b      	ldrh	r3, [r7, #24]
 80006c0:	6a3a      	ldr	r2, [r7, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbc1      	blt.n	800064a <EEPROM_Write+0x4a>
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000160 	.word	0x20000160

080006d4 <EEPROM_Read>:

/* Read EEPROM */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	; 0x38
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60ba      	str	r2, [r7, #8]
 80006dc:	461a      	mov	r2, r3
 80006de:	4603      	mov	r3, r0
 80006e0:	81fb      	strh	r3, [r7, #14]
 80006e2:	460b      	mov	r3, r1
 80006e4:	81bb      	strh	r3, [r7, #12]
 80006e6:	4613      	mov	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80006ea:	2306      	movs	r3, #6
 80006ec:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	89bb      	ldrh	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da00      	bge.n	80006fe <EEPROM_Read+0x2a>
 80006fc:	333f      	adds	r3, #63	; 0x3f
 80006fe:	119b      	asrs	r3, r3, #6
 8000700:	b29a      	uxth	r2, r3
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	4413      	add	r3, r2
 8000706:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000708:	8b7a      	ldrh	r2, [r7, #26]
 800070a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	3301      	adds	r3, #1
 8000712:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000714:	2300      	movs	r3, #0
 8000716:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
 800071c:	e031      	b.n	8000782 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 800071e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	b21a      	sxth	r2, r3
 8000728:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800072c:	4313      	orrs	r3, r2
 800072e:	b21b      	sxth	r3, r3
 8000730:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000732:	89ba      	ldrh	r2, [r7, #12]
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff47 	bl	80005cc <bytestowrite>
 800073e:	4603      	mov	r3, r0
 8000740:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	4413      	add	r3, r2
 8000748:	8af9      	ldrh	r1, [r7, #22]
 800074a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074e:	9202      	str	r2, [sp, #8]
 8000750:	8aba      	ldrh	r2, [r7, #20]
 8000752:	9201      	str	r2, [sp, #4]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2302      	movs	r3, #2
 8000758:	460a      	mov	r2, r1
 800075a:	21a0      	movs	r1, #160	; 0xa0
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <EEPROM_Read+0xe4>)
 800075e:	f004 fa97 	bl	8004c90 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000764:	3301      	adds	r3, #1
 8000766:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8000768:	2300      	movs	r3, #0
 800076a:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 800076c:	88fa      	ldrh	r2, [r7, #6]
 800076e:	8abb      	ldrh	r3, [r7, #20]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000776:	8abb      	ldrh	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	8b3b      	ldrh	r3, [r7, #24]
 8000784:	6a3a      	ldr	r2, [r7, #32]
 8000786:	429a      	cmp	r2, r3
 8000788:	dbc9      	blt.n	800071e <EEPROM_Read+0x4a>

	}
	HAL_UART_Transmit(&hlpuart1, data, strlen((const char*)(data)), HAL_MAX_DELAY);
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f7ff fd48 	bl	8000220 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <EEPROM_Read+0xe8>)
 800079c:	f008 f811 	bl	80087c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, line, sizeof(line), HAL_MAX_DELAY);
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	2203      	movs	r2, #3
 80007a6:	4906      	ldr	r1, [pc, #24]	; (80007c0 <EEPROM_Read+0xec>)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <EEPROM_Read+0xe8>)
 80007aa:	f008 f80a 	bl	80087c2 <HAL_UART_Transmit>
	//HAL_Delay(1000);
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	; 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000160 	.word	0x20000160
 80007bc:	200001f8 	.word	0x200001f8
 80007c0:	20000000 	.word	0x20000000

080007c4 <EEPROM_PageErase>:

/* Erase Page */
void EEPROM_PageErase (uint16_t page)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b098      	sub	sp, #96	; 0x60
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80007ce:	2306      	movs	r3, #6
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80007d2:	88fa      	ldrh	r2, [r7, #6]
 80007d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2240      	movs	r2, #64	; 0x40
 80007e4:	21ff      	movs	r1, #255	; 0xff
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00a fb15 	bl	800ae16 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80007ec:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2302      	movs	r3, #2
 8000802:	21a0      	movs	r1, #160	; 0xa0
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <EEPROM_PageErase+0x54>)
 8000806:	f004 f92f 	bl	8004a68 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 800080a:	2005      	movs	r0, #5
 800080c:	f002 f952 	bl	8002ab4 <HAL_Delay>
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000160 	.word	0x20000160

0800081c <test_can_bus>:

//char msg[100];

/* Can bus test */
void test_can_bus()
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af06      	add	r7, sp, #24
/* Receive data */
if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0))
 8000822:	2140      	movs	r1, #64	; 0x40
 8000824:	483a      	ldr	r0, [pc, #232]	; (8000910 <test_can_bus+0xf4>)
 8000826:	f003 fdaf 	bl	8004388 <HAL_FDCAN_GetRxFifoFillLevel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d06b      	beq.n	8000908 <test_can_bus+0xec>
{
	//HAL_UART_Transmit(&hlpuart1, "Received:", 9, HAL_MAX_DELAY);
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <test_can_bus+0xf8>)
 8000832:	4a39      	ldr	r2, [pc, #228]	; (8000918 <test_can_bus+0xfc>)
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4836      	ldr	r0, [pc, #216]	; (8000910 <test_can_bus+0xf4>)
 8000838:	f003 fccc 	bl	80041d4 <HAL_FDCAN_GetRxMessage>
	HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000840:	f002 f938 	bl	8002ab4 <HAL_Delay>
	//sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);

	/* Prepare received data to be sent back */
	counter = 0;
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <test_can_bus+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e019      	b.n	8000884 <test_can_bus+0x68>
	{
		/* AUX 1 increase by 1 */
		if (RxData[i] == 0)
 8000850:	4a30      	ldr	r2, [pc, #192]	; (8000914 <test_can_bus+0xf8>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d105      	bne.n	8000868 <test_can_bus+0x4c>
		{
			counter++;
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <test_can_bus+0x100>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <test_can_bus+0x100>)
 8000866:	701a      	strb	r2, [r3, #0]
		}
		TxData[i]= RxData[i]+1;
 8000868:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <test_can_bus+0xf8>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b2d9      	uxtb	r1, r3
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <test_can_bus+0x104>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	460a      	mov	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<8; i++)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b07      	cmp	r3, #7
 8000888:	dde2      	ble.n	8000850 <test_can_bus+0x34>
		/* AUX 2 increase by 2 */
		//TxData[i]= RxData[i] + 2;
	}
		//HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)(debug_str)), HAL_MAX_DELAY);
		//HAL_UART_Transmit(&hlpuart1, "Sent:    ", 9, HAL_MAX_DELAY);
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <test_can_bus+0x104>)
 800088c:	4925      	ldr	r1, [pc, #148]	; (8000924 <test_can_bus+0x108>)
 800088e:	4820      	ldr	r0, [pc, #128]	; (8000910 <test_can_bus+0xf4>)
 8000890:	f003 fc5c 	bl	800414c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <test_can_bus+0x82>
		{
			// Transmission request Error
			  Error_Handler();
 800089a:	f001 fac3 	bl	8001e24 <Error_Handler>
		}
		HAL_Delay(500);
 800089e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a2:	f002 f907 	bl	8002ab4 <HAL_Delay>
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <test_can_bus+0x104>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461e      	mov	r6, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <test_can_bus+0x104>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008b0:	469c      	mov	ip, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <test_can_bus+0x104>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008b6:	461a      	mov	r2, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <test_can_bus+0x104>)
 80008ba:	78db      	ldrb	r3, [r3, #3]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008bc:	4619      	mov	r1, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <test_can_bus+0x104>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008c2:	4618      	mov	r0, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <test_can_bus+0x104>)
 80008c6:	795b      	ldrb	r3, [r3, #5]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008c8:	461c      	mov	r4, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <test_can_bus+0x104>)
 80008cc:	799b      	ldrb	r3, [r3, #6]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008ce:	461d      	mov	r5, r3
					  TxData[1], TxData[2], TxData[3], TxData[4], TxData[5], TxData[6], TxData[7]);
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <test_can_bus+0x104>)
 80008d2:	79db      	ldrb	r3, [r3, #7]
		sprintf((char*) debug_str, "%02x %02x %02x %02x %02x %02x %02x %02x\r\n", TxData[0],
 80008d4:	9305      	str	r3, [sp, #20]
 80008d6:	9504      	str	r5, [sp, #16]
 80008d8:	9403      	str	r4, [sp, #12]
 80008da:	9002      	str	r0, [sp, #8]
 80008dc:	9101      	str	r1, [sp, #4]
 80008de:	9200      	str	r2, [sp, #0]
 80008e0:	4663      	mov	r3, ip
 80008e2:	4632      	mov	r2, r6
 80008e4:	4910      	ldr	r1, [pc, #64]	; (8000928 <test_can_bus+0x10c>)
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <test_can_bus+0x110>)
 80008e8:	f00a fa32 	bl	800ad50 <siprintf>
		//HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_str, strlen((const char*)debug_str), HAL_MAX_DELAY);
		//HAL_UART_Transmit(&hlpuart1, NL, sizeof(NL), HAL_MAX_DELAY);

		if (counter == 8)
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <test_can_bus+0x100>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d103      	bne.n	80008fc <test_can_bus+0xe0>
		{
			EEPROM_CAN_Msg = EEPROM_TEST;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <test_can_bus+0x114>)
 80008f6:	2206      	movs	r2, #6
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e002      	b.n	8000902 <test_can_bus+0xe6>
		}
		else EEPROM_CAN_Msg = NO_EEPROM_TEST;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <test_can_bus+0x114>)
 80008fe:	2207      	movs	r2, #7
 8000900:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <test_can_bus+0x100>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
	}
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000910:	200000fc 	.word	0x200000fc
 8000914:	200004e4 	.word	0x200004e4
 8000918:	200004f4 	.word	0x200004f4
 800091c:	2000008c 	.word	0x2000008c
 8000920:	200004ec 	.word	0x200004ec
 8000924:	2000051c 	.word	0x2000051c
 8000928:	0800be20 	.word	0x0800be20
 800092c:	200004c4 	.word	0x200004c4
 8000930:	20000540 	.word	0x20000540

08000934 <send_msg>:

void send_msg(uint8_t* msg, int len)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<len; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e00b      	b.n	800095c <send_msg+0x28>
		{
			TxData[i] = msg[i];
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	7819      	ldrb	r1, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <send_msg+0x54>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	460a      	mov	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<len; i++)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbef      	blt.n	8000944 <send_msg+0x10>
		}
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <send_msg+0x54>)
 8000966:	4909      	ldr	r1, [pc, #36]	; (800098c <send_msg+0x58>)
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <send_msg+0x5c>)
 800096a:	f003 fbef 	bl	800414c <HAL_FDCAN_AddMessageToTxFifoQ>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <send_msg+0x44>
			{
				// Transmission request Error
				  Error_Handler();
 8000974:	f001 fa56 	bl	8001e24 <Error_Handler>
			}
	HAL_Delay(500);
 8000978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097c:	f002 f89a 	bl	8002ab4 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200004ec 	.word	0x200004ec
 800098c:	2000051c 	.word	0x2000051c
 8000990:	200000fc 	.word	0x200000fc

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b5b0      	push	{r4, r5, r7, lr}
 8000996:	b094      	sub	sp, #80	; 0x50
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f002 f854 	bl	8002a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f86f 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 fe05 	bl	80015b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009a6:	f000 f8b5 	bl	8000b14 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80009aa:	f000 f92d 	bl	8000c08 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 80009ae:	f000 f9b3 	bl	8000d18 <MX_I2C2_Init>
  MX_I2C3_Init();
 80009b2:	f000 f9f1 	bl	8000d98 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80009b6:	f000 fa2f 	bl	8000e18 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80009ba:	f000 fa77 	bl	8000eac <MX_SPI2_Init>
  MX_TIM2_Init();
 80009be:	f000 fb5d 	bl	800107c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009c2:	f000 fbcb 	bl	800115c <MX_TIM3_Init>
  MX_TIM1_Init();
 80009c6:	f000 faaf 	bl	8000f28 <MX_TIM1_Init>
  MX_TIM8_Init();
 80009ca:	f000 fc3d 	bl	8001248 <MX_TIM8_Init>
  MX_TIM16_Init();
 80009ce:	f000 fce5 	bl	800139c <MX_TIM16_Init>
  MX_TIM20_Init();
 80009d2:	f000 fd5b 	bl	800148c <MX_TIM20_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Blink01 */
  osThreadDef(Blink01, StartDefaultTask, osPriorityNormal, 0, 128);
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <main+0xcc>)
 80009d8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80009dc:	461d      	mov	r5, r3
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	6023      	str	r3, [r4, #0]
  Blink01Handle = osThreadCreate(osThread(Blink01), NULL);
 80009e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f008 fd52 	bl	8009496 <osThreadCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <main+0xd0>)
 80009f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Blink02 */
  osThreadDef(CAN, StartCANTask, osPriorityNormal, 0, 128);
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <main+0xd4>)
 80009fa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80009fe:	461d      	mov	r5, r3
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	6023      	str	r3, [r4, #0]
  CANHandle = osThreadCreate(osThread(CAN), NULL);
 8000a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 fd41 	bl	8009496 <osThreadCreate>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <main+0xd8>)
 8000a18:	6013      	str	r3, [r2, #0]

  /* definition and creation of UVInterval */
  osThreadDef(UVInterval, StartUVIntervalTask, osPriorityNormal, 0, 128);
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <main+0xdc>)
 8000a1c:	f107 0414 	add.w	r4, r7, #20
 8000a20:	461d      	mov	r5, r3
 8000a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	6023      	str	r3, [r4, #0]
  UVIntervalHandle = osThreadCreate(osThread(UVInterval), NULL);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fd30 	bl	8009496 <osThreadCreate>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <main+0xe0>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of HEPAfan */
  osThreadDef(HEPAfan, StartHEPAfanTask, osPriorityNormal, 0, 128);
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <main+0xe4>)
 8000a3e:	463c      	mov	r4, r7
 8000a40:	461d      	mov	r5, r3
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	6023      	str	r3, [r4, #0]
  HEPAfanHandle = osThreadCreate(osThread(HEPAfan), NULL);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 fd21 	bl	8009496 <osThreadCreate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <main+0xe8>)
 8000a58:	6013      	str	r3, [r2, #0]
  /* definition and creation of Blink01 */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a5a:	f008 fd15 	bl	8009488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <main+0xca>
 8000a60:	0800be60 	.word	0x0800be60
 8000a64:	200004b4 	.word	0x200004b4
 8000a68:	0800be78 	.word	0x0800be78
 8000a6c:	200004b8 	.word	0x200004b8
 8000a70:	0800be98 	.word	0x0800be98
 8000a74:	200004bc 	.word	0x200004bc
 8000a78:	0800beb4 	.word	0x0800beb4
 8000a7c:	200004c0 	.word	0x200004c0

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	2238      	movs	r2, #56	; 0x38
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00a f9c1 	bl	800ae16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aa6:	f004 fd4b 	bl	8005540 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0318 	add.w	r3, r7, #24
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 fde7 	bl	80056a8 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ae0:	f001 f9a0 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2102      	movs	r1, #2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 f8eb 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b08:	f001 f98c 	bl	8001e24 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	; 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2220      	movs	r2, #32
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00a f972 	bl	800ae16 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000b9e:	f002 f985 	bl	8002eac <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ba8:	f001 f93c 	bl	8001e24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000bb8:	f002 ff7e 	bl	8003ab8 <HAL_ADCEx_MultiModeConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bc2:	f001 f92f 	bl	8001e24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_ADC1_Init+0xec>)
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_ADC1_Init+0xf0>)
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0xe8>)
 8000be4:	f002 fb16 	bl	8003214 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000bee:	f001 f919 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3730      	adds	r7, #48	; 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	19200040 	.word	0x19200040
 8000c04:	407f0000 	.word	0x407f0000

08000c08 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FDCAN1_Init 0 */
  /* AUX1 ID */
  TxHeader.Identifier = 0x23;
 8000c0c:	4b3e      	ldr	r3, [pc, #248]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c0e:	2223      	movs	r2, #35	; 0x23
 8000c10:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000c1a:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c26:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8000c34:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c3a:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c42:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <MX_FDCAN1_Init+0x100>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]

  /* AUX1 ID */
  RxHeader.Identifier = 0x23;
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c4a:	2223      	movs	r2, #35	; 0x23
 8000c4c:	601a      	str	r2, [r3, #0]
  RxHeader.IdType = FDCAN_EXTENDED_ID;
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	605a      	str	r2, [r3, #4]
  RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c62:	60da      	str	r2, [r3, #12]
  RxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  RxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  RxHeader.FDFormat = FDCAN_FD_CAN; // FDCAN_CLASSIC_CAN;
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_FDCAN1_Init+0x104>)
 8000c72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c76:	619a      	str	r2, [r3, #24]
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <MX_FDCAN1_Init+0x10c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 110;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cb0:	226e      	movs	r2, #110	; 0x6e
 8000cb2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 17;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cb6:	2211      	movs	r2, #17
 8000cb8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 32;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cc8:	2220      	movs	r2, #32
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000ce6:	f003 f8af 	bl	8003e48 <HAL_FDCAN_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_FDCAN1_Init+0xec>
  {
    Error_Handler();
 8000cf0:	f001 f898 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_FDCAN1_Init+0x108>)
 8000cf6:	f003 fa01 	bl	80040fc <HAL_FDCAN_Start>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_FDCAN1_Init+0xfc>
  	{
  		Error_Handler();
 8000d00:	f001 f890 	bl	8001e24 <Error_Handler>
  	}

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000051c 	.word	0x2000051c
 8000d0c:	200004f4 	.word	0x200004f4
 8000d10:	200000fc 	.word	0x200000fc
 8000d14:	40006400 	.word	0x40006400

08000d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_I2C2_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <MX_I2C2_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d54:	f003 fdf8 	bl	8004948 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f001 f861 	bl	8001e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d66:	f004 fb53 	bl	8005410 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f001 f858 	bl	8001e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_I2C2_Init+0x74>)
 8000d78:	f004 fb95 	bl	80054a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f001 f84f 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	40005800 	.word	0x40005800
 8000d94:	00602173 	.word	0x00602173

08000d98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <MX_I2C3_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <MX_I2C3_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000dd4:	f003 fdb8 	bl	8004948 <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f001 f821 	bl	8001e24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000de6:	f004 fb13 	bl	8005410 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f001 f818 	bl	8001e24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_I2C3_Init+0x74>)
 8000df8:	f004 fb55 	bl	80054a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f001 f80f 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001ac 	.word	0x200001ac
 8000e10:	40007800 	.word	0x40007800
 8000e14:	10707dbc 	.word	0x10707dbc

08000e18 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <MX_LPUART1_UART_Init+0x90>)
 8000e26:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e5a:	f007 fc62 	bl	8008722 <HAL_UART_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000e64:	f000 ffde 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e6c:	f008 fa2a 	bl	80092c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000e76:	f000 ffd5 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e7e:	f008 fa5f 	bl	8009340 <HAL_UARTEx_SetRxFifoThreshold>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000e88:	f000 ffcc 	bl	8001e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_LPUART1_UART_Init+0x88>)
 8000e8e:	f008 f9e0 	bl	8009252 <HAL_UARTEx_DisableFifoMode>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000e98:	f000 ffc4 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001f8 	.word	0x200001f8
 8000ea4:	40008000 	.word	0x40008000
 8000ea8:	00033324 	.word	0x00033324

08000eac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <MX_SPI2_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ec6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000eda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ede:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000efa:	2207      	movs	r2, #7
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_SPI2_Init+0x74>)
 8000f0c:	f005 fb6a 	bl	80065e4 <HAL_SPI_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f000 ff85 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000288 	.word	0x20000288
 8000f24:	40003800 	.word	0x40003800

08000f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b098      	sub	sp, #96	; 0x60
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2234      	movs	r2, #52	; 0x34
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f009 ff5e 	bl	800ae16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5a:	4b46      	ldr	r3, [pc, #280]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f5c:	4a46      	ldr	r2, [pc, #280]	; (8001078 <MX_TIM1_Init+0x150>)
 8000f5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000f60:	4b44      	ldr	r3, [pc, #272]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f62:	223f      	movs	r2, #63	; 0x3f
 8000f64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 8000f6c:	4b41      	ldr	r3, [pc, #260]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f6e:	2227      	movs	r2, #39	; 0x27
 8000f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b40      	ldr	r3, [pc, #256]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f84:	483b      	ldr	r0, [pc, #236]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000f86:	f005 fc9f 	bl	80068c8 <HAL_TIM_PWM_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f90:	f000 ff48 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4833      	ldr	r0, [pc, #204]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000fa8:	f007 fa10 	bl	80083cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 ff37 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb6:	2360      	movs	r3, #96	; 0x60
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4826      	ldr	r0, [pc, #152]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000fdc:	f006 f8f0 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000fe6:	f000 ff1d 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fee:	2208      	movs	r2, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4820      	ldr	r0, [pc, #128]	; (8001074 <MX_TIM1_Init+0x14c>)
 8000ff4:	f006 f8e4 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000ffe:	f000 ff11 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001002:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001006:	220c      	movs	r2, #12
 8001008:	4619      	mov	r1, r3
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <MX_TIM1_Init+0x14c>)
 800100c:	f006 f8d8 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001016:	f000 ff05 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001040:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <MX_TIM1_Init+0x14c>)
 8001058:	f007 fa46 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001062:	f000 fedf 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <MX_TIM1_Init+0x14c>)
 8001068:	f001 f9bc 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 800106c:	bf00      	nop
 800106e:	3760      	adds	r7, #96	; 0x60
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200002ec 	.word	0x200002ec
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010be:	f04f 32ff 	mov.w	r2, #4294967295
 80010c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010d2:	f005 fb32 	bl	800673a <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80010dc:	f000 fea2 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	4619      	mov	r1, r3
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010ee:	f006 f97b 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010f8:	f000 fe94 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <MX_TIM2_Init+0xdc>)
 80010fe:	f005 fde3 	bl	8006cc8 <HAL_TIM_IC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 fe8c 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <MX_TIM2_Init+0xdc>)
 800111c:	f007 f956 	bl	80083cc <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001126:	f000 fe7d 	bl	8001e24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800112e:	2301      	movs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_TIM2_Init+0xdc>)
 8001142:	f005 ffa1 	bl	8007088 <HAL_TIM_IC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800114c:	f000 fe6a 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	; 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000338 	.word	0x20000338

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001190:	4a2c      	ldr	r2, [pc, #176]	; (8001244 <MX_TIM3_Init+0xe8>)
 8001192:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001196:	223f      	movs	r2, #63	; 0x3f
 8001198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_TIM3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011a2:	2227      	movs	r2, #39	; 0x27
 80011a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b2:	4823      	ldr	r0, [pc, #140]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011b4:	f005 fac1 	bl	800673a <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011be:	f000 fe31 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011cc:	4619      	mov	r1, r3
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011d0:	f006 f90a 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011da:	f000 fe23 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011de:	4818      	ldr	r0, [pc, #96]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011e0:	f005 fb72 	bl	80068c8 <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011ea:	f000 fe1b 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <MX_TIM3_Init+0xe4>)
 80011fe:	f007 f8e5 	bl	80083cc <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001208:	f000 fe0c 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	; 0x60
 800120e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001210:	231e      	movs	r3, #30
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001224:	f005 ffcc 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800122e:	f000 fdf9 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM3_Init+0xe4>)
 8001234:	f001 f8d6 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	; 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000384 	.word	0x20000384
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b098      	sub	sp, #96	; 0x60
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2234      	movs	r2, #52	; 0x34
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f009 fdce 	bl	800ae16 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <MX_TIM8_Init+0x14c>)
 800127c:	4a46      	ldr	r2, [pc, #280]	; (8001398 <MX_TIM8_Init+0x150>)
 800127e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 64-1;
 8001280:	4b44      	ldr	r3, [pc, #272]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001282:	223f      	movs	r2, #63	; 0x3f
 8001284:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 39;
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_TIM8_Init+0x14c>)
 800128e:	2227      	movs	r2, #39	; 0x27
 8001290:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_TIM8_Init+0x14c>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <MX_TIM8_Init+0x14c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012a4:	483b      	ldr	r0, [pc, #236]	; (8001394 <MX_TIM8_Init+0x14c>)
 80012a6:	f005 fb0f 	bl	80068c8 <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80012b0:	f000 fdb8 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c4:	4619      	mov	r1, r3
 80012c6:	4833      	ldr	r0, [pc, #204]	; (8001394 <MX_TIM8_Init+0x14c>)
 80012c8:	f007 f880 	bl	80083cc <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80012d2:	f000 fda7 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e2:	2300      	movs	r3, #0
 80012e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	4826      	ldr	r0, [pc, #152]	; (8001394 <MX_TIM8_Init+0x14c>)
 80012fc:	f005 ff60 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001306:	f000 fd8d 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130e:	2204      	movs	r2, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4820      	ldr	r0, [pc, #128]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001314:	f005 ff54 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800131e:	f000 fd81 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001326:	2208      	movs	r2, #8
 8001328:	4619      	mov	r1, r3
 800132a:	481a      	ldr	r0, [pc, #104]	; (8001394 <MX_TIM8_Init+0x14c>)
 800132c:	f005 ff48 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8001336:	f000 fd75 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001352:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001378:	f007 f8b6 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001382:	f000 fd4f 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM8_Init+0x14c>)
 8001388:	f001 f82c 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3760      	adds	r7, #96	; 0x60
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200003d0 	.word	0x200003d0
 8001398:	40013400 	.word	0x40013400

0800139c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2234      	movs	r2, #52	; 0x34
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f009 fd2a 	bl	800ae16 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013c4:	4a30      	ldr	r2, [pc, #192]	; (8001488 <MX_TIM16_Init+0xec>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013ca:	223f      	movs	r2, #63	; 0x3f
 80013cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013d6:	2227      	movs	r2, #39	; 0x27
 80013d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013ec:	4825      	ldr	r0, [pc, #148]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013ee:	f005 f9a4 	bl	800673a <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 fd14 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80013fc:	4821      	ldr	r0, [pc, #132]	; (8001484 <MX_TIM16_Init+0xe8>)
 80013fe:	f005 fa63 	bl	80068c8 <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001408:	f000 fd0c 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140c:	2360      	movs	r3, #96	; 0x60
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <MX_TIM16_Init+0xe8>)
 8001432:	f005 fec5 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800143c:	f000 fcf2 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM16_Init+0xe8>)
 8001468:	f007 f83e 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8001472:	f000 fcd7 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM16_Init+0xe8>)
 8001478:	f000 ffb4 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	; 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000041c 	.word	0x2000041c
 8001488:	40014400 	.word	0x40014400

0800148c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b098      	sub	sp, #96	; 0x60
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2234      	movs	r2, #52	; 0x34
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f009 fcac 	bl	800ae16 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014c0:	4a3a      	ldr	r2, [pc, #232]	; (80015ac <MX_TIM20_Init+0x120>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 64-1;
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014c6:	223f      	movs	r2, #63	; 0x3f
 80014c8:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 39;
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014d2:	2227      	movs	r2, #39	; 0x27
 80014d4:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80014e8:	482f      	ldr	r0, [pc, #188]	; (80015a8 <MX_TIM20_Init+0x11c>)
 80014ea:	f005 f9ed 	bl	80068c8 <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM20_Init+0x6c>
  {
    Error_Handler();
 80014f4:	f000 fc96 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001508:	4619      	mov	r1, r3
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_TIM20_Init+0x11c>)
 800150c:	f006 ff5e 	bl	80083cc <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM20_Init+0x8e>
  {
    Error_Handler();
 8001516:	f000 fc85 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151a:	2360      	movs	r3, #96	; 0x60
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001526:	2300      	movs	r3, #0
 8001528:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800153a:	2200      	movs	r2, #0
 800153c:	4619      	mov	r1, r3
 800153e:	481a      	ldr	r0, [pc, #104]	; (80015a8 <MX_TIM20_Init+0x11c>)
 8001540:	f005 fe3e 	bl	80071c0 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM20_Init+0xc2>
  {
    Error_Handler();
 800154a:	f000 fc6b 	bl	8001e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM20_Init+0x11c>)
 800158c:	f006 ffac 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM20_Init+0x10e>
  {
    Error_Handler();
 8001596:	f000 fc45 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM20_Init+0x11c>)
 800159c:	f000 ff22 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3760      	adds	r7, #96	; 0x60
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000468 	.word	0x20000468
 80015ac:	40015000 	.word	0x40015000

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c6:	4b5a      	ldr	r3, [pc, #360]	; (8001730 <MX_GPIO_Init+0x180>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a59      	ldr	r2, [pc, #356]	; (8001730 <MX_GPIO_Init+0x180>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b57      	ldr	r3, [pc, #348]	; (8001730 <MX_GPIO_Init+0x180>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <MX_GPIO_Init+0x180>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a53      	ldr	r2, [pc, #332]	; (8001730 <MX_GPIO_Init+0x180>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b51      	ldr	r3, [pc, #324]	; (8001730 <MX_GPIO_Init+0x180>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <MX_GPIO_Init+0x180>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <MX_GPIO_Init+0x180>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <MX_GPIO_Init+0x180>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <MX_GPIO_Init+0x180>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a47      	ldr	r2, [pc, #284]	; (8001730 <MX_GPIO_Init+0x180>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b45      	ldr	r3, [pc, #276]	; (8001730 <MX_GPIO_Init+0x180>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DRIVE_Pin|UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2192      	movs	r1, #146	; 0x92
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f003 f941 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEPA_B_CTRL_GPIO_Port, HEPA_B_CTRL_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	483e      	ldr	r0, [pc, #248]	; (8001734 <MX_GPIO_Init+0x184>)
 800163a:	f003 f93b 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nEEPROM_WP_GPIO_Port, nEEPROM_WP_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001644:	483c      	ldr	r0, [pc, #240]	; (8001738 <MX_GPIO_Init+0x188>)
 8001646:	f003 f935 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOOR_OPEN_MCU_Pin POS_SW_MCU_Pin */
  GPIO_InitStruct.Pin = DOOR_OPEN_MCU_Pin|POS_SW_MCU_Pin;
 800164a:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001650:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4835      	ldr	r0, [pc, #212]	; (8001738 <MX_GPIO_Init+0x188>)
 8001662:	f002 ff8d 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : UV_NO_MCU_Pin  */
  GPIO_InitStruct.Pin = UV_NO_MCU_Pin;
 8001666:	2304      	movs	r3, #4
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800166e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	482f      	ldr	r0, [pc, #188]	; (8001738 <MX_GPIO_Init+0x188>)
 800167c:	f002 ff80 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DRIVE_Pin UV_ON_OFF_MCU_Pin HEPA_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LED_DRIVE_Pin|UV_ON_OFF_MCU_Pin|HEPA_ON_OFF_Pin;
 8001680:	2392      	movs	r3, #146	; 0x92
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f002 ff71 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_NO_MCU_Pin */
  GPIO_InitStruct.Pin = HEPA_NO_MCU_Pin;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HEPA_NO_MCU_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <MX_GPIO_Init+0x184>)
 80016b6:	f002 ff63 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEPA_B_CTRL_Pin */
  GPIO_InitStruct.Pin = HEPA_B_CTRL_Pin;
 80016ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HEPA_B_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_GPIO_Init+0x184>)
 80016d4:	f002 ff54 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : nEEPROM_WP_Pin */
  GPIO_InitStruct.Pin = nEEPROM_WP_Pin;
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nEEPROM_WP_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <MX_GPIO_Init+0x188>)
 80016f2:	f002 ff45 	bl	8004580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	2008      	movs	r0, #8
 80016fc:	f002 fb7c 	bl	8003df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001700:	2008      	movs	r0, #8
 8001702:	f002 fb93 	bl	8003e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	2017      	movs	r0, #23
 800170c:	f002 fb74 	bl	8003df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001710:	2017      	movs	r0, #23
 8001712:	f002 fb8b 	bl	8003e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	2028      	movs	r0, #40	; 0x28
 800171c:	f002 fb6c 	bl	8003df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001720:	2028      	movs	r0, #40	; 0x28
 8001722:	f002 fb83 	bl	8003e2c <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800

0800173c <UV_OFF>:
uint16_t interrupt_type;
volatile uint16_t UV_IT_flag;
uint8_t EEPROM_CAN_Msg;

void UV_OFF()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2110      	movs	r1, #16
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f003 f8b4 	bl	80048b4 <HAL_GPIO_WritePin>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <UV_ON>:

void UV_ON()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	/* Set UV interval duration */
	uint16_t UV_duration;
	UV_duration = 9000; //Number of 100ms intervals, e.g. 600 * 100ms = 900 000ms = 15min
 8001756:	f242 3328 	movw	r3, #9000	; 0x2328
 800175a:	807b      	strh	r3, [r7, #2]

	/* Check if door is open */
	if (HAL_GPIO_ReadPin(DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	4825      	ldr	r0, [pc, #148]	; (80017f4 <UV_ON+0xa4>)
 8001760:	f003 f890 	bl	8004884 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <UV_ON+0x20>
	{
		door_open();
 800176a:	f000 f863 	bl	8001834 <door_open>
		UV_OFF();
		UV_confirmation_LED();
		}
	}

}
 800176e:	e03c      	b.n	80017ea <UV_ON+0x9a>
	else if (HAL_GPIO_ReadPin(POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 8001770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <UV_ON+0xa4>)
 8001776:	f003 f885 	bl	8004884 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <UV_ON+0x36>
		reed_sw_open();
 8001780:	f000 f83e 	bl	8001800 <reed_sw_open>
}
 8001784:	e031      	b.n	80017ea <UV_ON+0x9a>
		HAL_GPIO_WritePin(UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2110      	movs	r1, #16
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f003 f891 	bl	80048b4 <HAL_GPIO_WritePin>
		UV_running_LED();
 8001792:	f000 f895 	bl	80018c0 <UV_running_LED>
		for(int i=0; i<=UV_duration; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e019      	b.n	80017d0 <UV_ON+0x80>
			if (UV_IT_flag == UV_READY)
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <UV_ON+0xa8>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d103      	bne.n	80017ae <UV_ON+0x5e>
				osDelay(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f007 fe9c 	bl	80094e4 <osDelay>
 80017ac:	e00d      	b.n	80017ca <UV_ON+0x7a>
				if (interrupt_type == DOOR_SW_INTERRUPT)
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <UV_ON+0xac>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <UV_ON+0x6c>
					door_open();
 80017b6:	f000 f83d 	bl	8001834 <door_open>
					break;
 80017ba:	e00d      	b.n	80017d8 <UV_ON+0x88>
				else if (interrupt_type == POS_SW_INTERRUPT)
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <UV_ON+0xac>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d102      	bne.n	80017ca <UV_ON+0x7a>
					reed_sw_open();
 80017c4:	f000 f81c 	bl	8001800 <reed_sw_open>
					break;
 80017c8:	e006      	b.n	80017d8 <UV_ON+0x88>
		for(int i=0; i<=UV_duration; i++)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dde1      	ble.n	800179c <UV_ON+0x4c>
		if (UV_IT_flag == UV_READY)
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <UV_ON+0xa8>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d103      	bne.n	80017ea <UV_ON+0x9a>
		UV_OFF();
 80017e2:	f7ff ffab 	bl	800173c <UV_OFF>
		UV_confirmation_LED();
 80017e6:	f000 f8af 	bl	8001948 <UV_confirmation_LED>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	48000800 	.word	0x48000800
 80017f8:	20000544 	.word	0x20000544
 80017fc:	20000542 	.word	0x20000542

08001800 <reed_sw_open>:

void reed_sw_open()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	UV_OFF();
 8001804:	f7ff ff9a 	bl	800173c <UV_OFF>
	UV_error_LED();
 8001808:	f000 f844 	bl	8001894 <UV_error_LED>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <UV_idle_state_LED>:

void UV_idle_state_LED()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

	UV_all_LEDs_off();
 8001814:	f000 f8dc 	bl	80019d0 <UV_all_LEDs_off>
	/* Set solid white LED color */
	TIM20->CCR1 = 40;
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <UV_idle_state_LED+0x1c>)
 800181a:	2228      	movs	r2, #40	; 0x28
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
	/* Enable PWM output */
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 800181e:	2100      	movs	r1, #0
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <UV_idle_state_LED+0x20>)
 8001822:	f005 f8a9 	bl	8006978 <HAL_TIM_PWM_Start>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40015000 	.word	0x40015000
 8001830:	20000468 	.word	0x20000468

08001834 <door_open>:

void door_open()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	UV_OFF();
 800183a:	f7ff ff7f 	bl	800173c <UV_OFF>

	/* LED blue pulse */
	UV_all_LEDs_off();
 800183e:	f000 f8c7 	bl	80019d0 <UV_all_LEDs_off>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001842:	210c      	movs	r1, #12
 8001844:	4811      	ldr	r0, [pc, #68]	; (800188c <door_open+0x58>)
 8001846:	f005 f897 	bl	8006978 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 800184a:	210c      	movs	r1, #12
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <door_open+0x58>)
 800184e:	f006 fca5 	bl	800819c <HAL_TIMEx_PWMN_Start>

	for (int i = 0; i<5; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e010      	b.n	800187a <door_open+0x46>
	{
		TIM1->CCR4 = 40;
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <door_open+0x5c>)
 800185a:	2228      	movs	r2, #40	; 0x28
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(500);
 800185e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001862:	f007 fe3f 	bl	80094e4 <osDelay>
		TIM1->CCR4 = 0;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <door_open+0x5c>)
 8001868:	2200      	movs	r2, #0
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(500);
 800186c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001870:	f007 fe38 	bl	80094e4 <osDelay>
	for (int i = 0; i<5; i++)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3301      	adds	r3, #1
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b04      	cmp	r3, #4
 800187e:	ddeb      	ble.n	8001858 <door_open+0x24>
	}
	UV_idle_state_LED();
 8001880:	f7ff ffc6 	bl	8001810 <UV_idle_state_LED>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200002ec 	.word	0x200002ec
 8001890:	40012c00 	.word	0x40012c00

08001894 <UV_error_LED>:

void UV_error_LED()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	UV_all_LEDs_off();
 8001898:	f000 f89a 	bl	80019d0 <UV_all_LEDs_off>

	/* Set solid red LED color */
	TIM8->CCR3 = 20;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <UV_error_LED+0x24>)
 800189e:	2214      	movs	r2, #20
 80018a0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80018a2:	2108      	movs	r1, #8
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <UV_error_LED+0x28>)
 80018a6:	f005 f867 	bl	8006978 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80018aa:	2108      	movs	r1, #8
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <UV_error_LED+0x28>)
 80018ae:	f006 fc75 	bl	800819c <HAL_TIMEx_PWMN_Start>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013400 	.word	0x40013400
 80018bc:	200003d0 	.word	0x200003d0

080018c0 <UV_running_LED>:

void UV_running_LED()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	UV_all_LEDs_off();
 80018c4:	f000 f884 	bl	80019d0 <UV_all_LEDs_off>

	/* Set solid green LED color */
	TIM8->CCR2 = 0;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <UV_running_LED+0x24>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
	// Enable PWM output
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80018ce:	2104      	movs	r1, #4
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <UV_running_LED+0x28>)
 80018d2:	f005 f851 	bl	8006978 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80018d6:	2104      	movs	r1, #4
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <UV_running_LED+0x28>)
 80018da:	f006 fc5f 	bl	800819c <HAL_TIMEx_PWMN_Start>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40013400 	.word	0x40013400
 80018e8:	200003d0 	.word	0x200003d0

080018ec <UV_pulse>:

void UV_pulse()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	UV_all_LEDs_off();
 80018f2:	f000 f86d 	bl	80019d0 <UV_all_LEDs_off>

	/* Set pulsing green LED color */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80018f6:	2104      	movs	r1, #4
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <UV_pulse+0x54>)
 80018fa:	f005 f83d 	bl	8006978 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80018fe:	2104      	movs	r1, #4
 8001900:	480f      	ldr	r0, [pc, #60]	; (8001940 <UV_pulse+0x54>)
 8001902:	f006 fc4b 	bl	800819c <HAL_TIMEx_PWMN_Start>

	for (int i = 0; i<5; i++)
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e010      	b.n	800192e <UV_pulse+0x42>
	{
		TIM8->CCR2 = 40;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <UV_pulse+0x58>)
 800190e:	2228      	movs	r2, #40	; 0x28
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(500);
 8001912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001916:	f007 fde5 	bl	80094e4 <osDelay>
		TIM8->CCR2 = 0;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <UV_pulse+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(500);
 8001920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001924:	f007 fdde 	bl	80094e4 <osDelay>
	for (int i = 0; i<5; i++)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b04      	cmp	r3, #4
 8001932:	ddeb      	ble.n	800190c <UV_pulse+0x20>
	}
	UV_idle_state_LED();
 8001934:	f7ff ff6c 	bl	8001810 <UV_idle_state_LED>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200003d0 	.word	0x200003d0
 8001944:	40013400 	.word	0x40013400

08001948 <UV_confirmation_LED>:

void UV_confirmation_LED()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	UV_all_LEDs_off();
 800194e:	f000 f83f 	bl	80019d0 <UV_all_LEDs_off>

	/* Set slow pulsing green LED color */
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001952:	2104      	movs	r1, #4
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <UV_confirmation_LED+0x80>)
 8001956:	f005 f80f 	bl	8006978 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800195a:	2104      	movs	r1, #4
 800195c:	481a      	ldr	r0, [pc, #104]	; (80019c8 <UV_confirmation_LED+0x80>)
 800195e:	f006 fc1d 	bl	800819c <HAL_TIMEx_PWMN_Start>
	int count = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]

	while (count < 5)
 8001966:	e026      	b.n	80019b6 <UV_confirmation_LED+0x6e>
	{

		for (int i = 40; i >= 5; i--)
 8001968:	2328      	movs	r3, #40	; 0x28
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	e008      	b.n	8001980 <UV_confirmation_LED+0x38>
		{
		  TIM8->CCR2 = i;
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <UV_confirmation_LED+0x84>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	6393      	str	r3, [r2, #56]	; 0x38
		  HAL_Delay(50);
 8001974:	2032      	movs	r0, #50	; 0x32
 8001976:	f001 f89d 	bl	8002ab4 <HAL_Delay>
		for (int i = 40; i >= 5; i--)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3b01      	subs	r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b04      	cmp	r3, #4
 8001984:	dcf3      	bgt.n	800196e <UV_confirmation_LED+0x26>
		}
		HAL_Delay(50);
 8001986:	2032      	movs	r0, #50	; 0x32
 8001988:	f001 f894 	bl	8002ab4 <HAL_Delay>

		for (int i = 5; i <= 40; i++)
 800198c:	2305      	movs	r3, #5
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	e008      	b.n	80019a4 <UV_confirmation_LED+0x5c>
		{
		  TIM8->CCR2 = i;
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <UV_confirmation_LED+0x84>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	; 0x38
		  HAL_Delay(50);
 8001998:	2032      	movs	r0, #50	; 0x32
 800199a:	f001 f88b 	bl	8002ab4 <HAL_Delay>
		for (int i = 5; i <= 40; i++)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3301      	adds	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b28      	cmp	r3, #40	; 0x28
 80019a8:	ddf3      	ble.n	8001992 <UV_confirmation_LED+0x4a>
		}
		HAL_Delay(50);
 80019aa:	2032      	movs	r0, #50	; 0x32
 80019ac:	f001 f882 	bl	8002ab4 <HAL_Delay>
		count++;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
	while (count < 5)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	ddd5      	ble.n	8001968 <UV_confirmation_LED+0x20>
	}
	UV_idle_state_LED();
 80019bc:	f7ff ff28 	bl	8001810 <UV_idle_state_LED>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003d0 	.word	0x200003d0
 80019cc:	40013400 	.word	0x40013400

080019d0 <UV_all_LEDs_off>:

void UV_all_LEDs_off()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <UV_all_LEDs_off+0x40>)
 80019d8:	f005 f8da 	bl	8006b90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 80019dc:	2104      	movs	r1, #4
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <UV_all_LEDs_off+0x40>)
 80019e0:	f006 fc96 	bl	8008310 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80019e4:	2108      	movs	r1, #8
 80019e6:	480a      	ldr	r0, [pc, #40]	; (8001a10 <UV_all_LEDs_off+0x40>)
 80019e8:	f005 f8d2 	bl	8006b90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 80019ec:	2108      	movs	r1, #8
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <UV_all_LEDs_off+0x40>)
 80019f0:	f006 fc8e 	bl	8008310 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim20, TIM_CHANNEL_1);
 80019f4:	2100      	movs	r1, #0
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <UV_all_LEDs_off+0x44>)
 80019f8:	f005 f8ca 	bl	8006b90 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80019fc:	210c      	movs	r1, #12
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <UV_all_LEDs_off+0x48>)
 8001a00:	f005 f8c6 	bl	8006b90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_4);
 8001a04:	210c      	movs	r1, #12
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <UV_all_LEDs_off+0x48>)
 8001a08:	f006 fc82 	bl	8008310 <HAL_TIMEx_PWMN_Stop>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200003d0 	.word	0x200003d0
 8001a14:	20000468 	.word	0x20000468
 8001a18:	200002ec 	.word	0x200002ec

08001a1c <HEPA_ON>:

void HEPA_ON()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	/* Set fan duty cycle */
	uint16_t fan_DC = 30; //DC% = CCR1/Period; Period=40 as configure under MX_TIM3_Init()
 8001a22:	231e      	movs	r3, #30
 8001a24:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = fan_DC;
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <HEPA_ON+0x30>)
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	6353      	str	r3, [r2, #52]	; 0x34
	/*Start PWM */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <HEPA_ON+0x34>)
 8001a30:	f004 ffa2 	bl	8006978 <HAL_TIM_PWM_Start>
	/*Enable Power*/
	HAL_GPIO_WritePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f002 ff3a 	bl	80048b4 <HAL_GPIO_WritePin>
	/*Set LED indicator*/
	HEPA_run_LED();
 8001a40:	f000 f81a 	bl	8001a78 <HEPA_run_LED>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	20000384 	.word	0x20000384

08001a54 <HEPA_OFF>:

void HEPA_OFF()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <HEPA_OFF+0x20>)
 8001a5c:	f005 f898 	bl	8006b90 <HAL_TIM_PWM_Stop>
	HAL_GPIO_WritePin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f002 ff24 	bl	80048b4 <HAL_GPIO_WritePin>
	HEPA_idle_LED();
 8001a6c:	f000 f816 	bl	8001a9c <HEPA_idle_LED>
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000384 	.word	0x20000384

08001a78 <HEPA_run_LED>:

void HEPA_run_LED()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	HEPA_all_LEDs_off();
 8001a7c:	f000 f820 	bl	8001ac0 <HEPA_all_LEDs_off>

	TIM8->CCR1 = 20;
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HEPA_run_LED+0x1c>)
 8001a82:	2214      	movs	r2, #20
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a86:	2100      	movs	r1, #0
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <HEPA_run_LED+0x20>)
 8001a8a:	f004 ff75 	bl	8006978 <HAL_TIM_PWM_Start>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40013400 	.word	0x40013400
 8001a98:	200003d0 	.word	0x200003d0

08001a9c <HEPA_idle_LED>:

void HEPA_idle_LED()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HEPA_all_LEDs_off();
 8001aa0:	f000 f80e 	bl	8001ac0 <HEPA_all_LEDs_off>

	TIM1->CCR3 = 20;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HEPA_idle_LED+0x1c>)
 8001aa6:	2214      	movs	r2, #20
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001aaa:	2108      	movs	r1, #8
 8001aac:	4803      	ldr	r0, [pc, #12]	; (8001abc <HEPA_idle_LED+0x20>)
 8001aae:	f004 ff63 	bl	8006978 <HAL_TIM_PWM_Start>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	200002ec 	.word	0x200002ec

08001ac0 <HEPA_all_LEDs_off>:

void HEPA_all_LEDs_off()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <HEPA_all_LEDs_off+0x18>)
 8001ac8:	f005 f862 	bl	8006b90 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001acc:	2108      	movs	r1, #8
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <HEPA_all_LEDs_off+0x1c>)
 8001ad0:	f005 f85e 	bl	8006b90 <HAL_TIM_PWM_Stop>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200003d0 	.word	0x200003d0
 8001adc:	200002ec 	.word	0x200002ec

08001ae0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE */
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]

	/* Detect the source of interrupt and pass it to the correct RTOS thread */
	 if(GPIO_Pin == UV_NO_MCU_Pin)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d122      	bne.n	8001b3a <HAL_GPIO_EXTI_Callback+0x5a>
	 {
		 interrupt_type = UV_PUSHBUTTON_INTERRUPT;
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_GPIO_EXTI_Callback+0x10c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]
		 if (UV_IT_flag == UV_NOT_READY)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d103      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x2c>
		 {
			 UV_IT_flag = UV_READY;
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001b06:	2204      	movs	r2, #4
 8001b08:	801a      	strh	r2, [r3, #0]
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x32>
		 }
		 else UV_IT_flag = UV_NOT_READY;
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001b0e:	2205      	movs	r2, #5
 8001b10:	801a      	strh	r2, [r3, #0]
		 /* Send the notification directly to the UVInterval thread */
		 vTaskNotifyGiveFromISR(UVIntervalHandle, &xHigherPriorityTaskWoken);
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f107 020c 	add.w	r2, r7, #12
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fa43 	bl	8009fa8 <vTaskNotifyGiveFromISR>
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05d      	beq.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	f3bf 8f6f 	isb	sy
		 interrupt_type = HEPA_FAN_INTERRUPT;
		 /* Send the notification directly to the HEPA thread */
		 vTaskNotifyGiveFromISR(HEPAfanHandle, &xHigherPriorityTaskWoken);
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	 }
}
 8001b38:	e054      	b.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
	 else if (GPIO_Pin == DOOR_OPEN_MCU_Pin)
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d119      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0x94>
		 interrupt_type = DOOR_SW_INTERRUPT;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_GPIO_EXTI_Callback+0x10c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	801a      	strh	r2, [r3, #0]
		 UV_IT_flag = UV_NOT_READY;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001b48:	2205      	movs	r2, #5
 8001b4a:	801a      	strh	r2, [r3, #0]
		 vTaskNotifyGiveFromISR(UVIntervalHandle, &xHigherPriorityTaskWoken);
 8001b4c:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f107 020c 	add.w	r2, r7, #12
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f008 fa26 	bl	8009fa8 <vTaskNotifyGiveFromISR>
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d040      	beq.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	f3bf 8f6f 	isb	sy
}
 8001b72:	e037      	b.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
	 else if (GPIO_Pin == POS_SW_MCU_Pin)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b7a:	d119      	bne.n	8001bb0 <HAL_GPIO_EXTI_Callback+0xd0>
		 interrupt_type = POS_SW_INTERRUPT;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_GPIO_EXTI_Callback+0x10c>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	801a      	strh	r2, [r3, #0]
		 UV_IT_flag = UV_NOT_READY;
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x110>)
 8001b84:	2205      	movs	r2, #5
 8001b86:	801a      	strh	r2, [r3, #0]
		 vTaskNotifyGiveFromISR(UVIntervalHandle, &xHigherPriorityTaskWoken);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x114>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f008 fa08 	bl	8009fa8 <vTaskNotifyGiveFromISR>
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d022      	beq.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	f3bf 8f6f 	isb	sy
}
 8001bae:	e019      	b.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
	 else if (GPIO_Pin == HEPA_NO_MCU_Pin)
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d115      	bne.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
		 interrupt_type = HEPA_FAN_INTERRUPT;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_GPIO_EXTI_Callback+0x10c>)
 8001bba:	2203      	movs	r2, #3
 8001bbc:	801a      	strh	r2, [r3, #0]
		 vTaskNotifyGiveFromISR(HEPAfanHandle, &xHigherPriorityTaskWoken);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_GPIO_EXTI_Callback+0x11c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f008 f9ed 	bl	8009fa8 <vTaskNotifyGiveFromISR>
		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_EXTI_Callback+0x104>
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_GPIO_EXTI_Callback+0x118>)
 8001bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	f3bf 8f6f 	isb	sy
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000542 	.word	0x20000542
 8001bf0:	20000544 	.word	0x20000544
 8001bf4:	200004bc 	.word	0x200004bc
 8001bf8:	e000ed04 	.word	0xe000ed04
 8001bfc:	200004c0 	.word	0x200004c0

08001c00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001c08:	2102      	movs	r1, #2
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0e:	f002 fe69 	bl	80048e4 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c16:	f007 fc65 	bl	80094e4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001c1a:	e7f5      	b.n	8001c08 <StartDefaultTask+0x8>

08001c1c <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartCANTask(void const * argument)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0a2      	sub	sp, #136	; 0x88
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  uint8_t EEPROM_CAN_Msg = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint8_t dataWrite[8];
  uint8_t datar1[100];
  uint8_t line1[] = "\r\n";
 8001c2a:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <StartCANTask+0xd4>)
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	4611      	mov	r1, r2
 8001c34:	8019      	strh	r1, [r3, #0]
 8001c36:	3302      	adds	r3, #2
 8001c38:	0c12      	lsrs	r2, r2, #16
 8001c3a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  /* Code block used for hardware testing purposes:
	   * When CAN message 0x00 is received, the write/read EEPROM test sequence is activated */
	  if (EEPROM_CAN_Msg == EEPROM_TEST)
 8001c3c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d152      	bne.n	8001cea <StartCANTask+0xce>
	  	 	  {
	  	 		  for (int i = 0; i < 8; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c4a:	e01a      	b.n	8001c82 <StartCANTask+0x66>
	  	 		  {
	  	 			  dataWrite[i] = (uint8_t)(rand() % 20);
 8001c4c:	f008 ff92 	bl	800ab74 <rand>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <StartCANTask+0xd8>)
 8001c54:	fb83 1302 	smull	r1, r3, r3, r2
 8001c58:	10d9      	asrs	r1, r3, #3
 8001c5a:	17d3      	asrs	r3, r2, #31
 8001c5c:	1ac9      	subs	r1, r1, r3
 8001c5e:	460b      	mov	r3, r1
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	1ad1      	subs	r1, r2, r3
 8001c68:	b2c9      	uxtb	r1, r1
 8001c6a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c72:	4413      	add	r3, r2
 8001c74:	460a      	mov	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
	  	 		  for (int i = 0; i < 8; i++)
 8001c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c86:	2b07      	cmp	r3, #7
 8001c88:	dde0      	ble.n	8001c4c <StartCANTask+0x30>
	  	 		  }
	  	 		  //HAL_UART_Transmit(&hlpuart1, dataWrite, strlen((const char*)(dataWrite)), HAL_MAX_DELAY);
	  	 		  //HAL_UART_Transmit(&hlpuart1, line1, sizeof(line1), HAL_MAX_DELAY);
	  	 		  /* Write EEPROM */
	  	 		  send_msg(dataWrite, 8);
 8001c8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c8e:	2108      	movs	r1, #8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fe4f 	bl	8000934 <send_msg>
	  	 		  EEPROM_Write(0, 0, dataWrite, sizeof(dataWrite));
 8001c96:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7fe fcae 	bl	8000600 <EEPROM_Write>

	  	 		  /* Read EEPROM */
	  	 		  EEPROM_Read(0, 0, datar1, 8);
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	2308      	movs	r3, #8
 8001caa:	2100      	movs	r1, #0
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7fe fd11 	bl	80006d4 <EEPROM_Read>
	  	 		  send_msg(datar1, 8);
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fe3b 	bl	8000934 <send_msg>

	  	 		  EEPROM_CAN_Msg = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	  	 		  /* Erase EEPROM */
	  	 		  for (uint8_t i=0; i<251; i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001cca:	e00a      	b.n	8001ce2 <StartCANTask+0xc6>
	  	 		  {
	  	 			  EEPROM_PageErase (i);
 8001ccc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fd76 	bl	80007c4 <EEPROM_PageErase>
	  	 		  for (uint8_t i=0; i<251; i++)
 8001cd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ce6:	2bfa      	cmp	r3, #250	; 0xfa
 8001ce8:	d9f0      	bls.n	8001ccc <StartCANTask+0xb0>
	  	 		  }
	  	 	  }

	  //Run CAN test;
	  test_can_bus();
 8001cea:	f7fe fd97 	bl	800081c <test_can_bus>
	  if (EEPROM_CAN_Msg == EEPROM_TEST)
 8001cee:	e7a5      	b.n	8001c3c <StartCANTask+0x20>
 8001cf0:	0800bec8 	.word	0x0800bec8
 8001cf4:	66666667 	.word	0x66666667

08001cf8 <StartUVIntervalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUVIntervalTask */
void StartUVIntervalTask(void const * argument)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUVIntervalTask */
  uint32_t ulNotifyValue;
  UV_OFF();
 8001d00:	f7ff fd1c 	bl	800173c <UV_OFF>
  UV_idle_state_LED();
 8001d04:	f7ff fd84 	bl	8001810 <UV_idle_state_LED>

  /* Infinite loop */
  for(;;)
  {
    ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f008 f8ff 	bl	8009f10 <ulTaskNotifyTake>
 8001d12:	60f8      	str	r0, [r7, #12]
    if(ulNotifyValue != 0)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f6      	beq.n	8001d08 <StartUVIntervalTask+0x10>
    {
    	if (interrupt_type == DOOR_SW_INTERRUPT)
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <StartUVIntervalTask+0xc0>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d115      	bne.n	8001d4e <StartUVIntervalTask+0x56>
    	{
    		if(HAL_GPIO_ReadPin (DOOR_OPEN_MCU_GPIO_Port, DOOR_OPEN_MCU_Pin))
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	4825      	ldr	r0, [pc, #148]	; (8001dbc <StartUVIntervalTask+0xc4>)
 8001d26:	f002 fdad 	bl	8004884 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <StartUVIntervalTask+0x4a>
			{
    			UV_IT_flag = UV_NOT_READY;
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <StartUVIntervalTask+0xc8>)
 8001d32:	2205      	movs	r2, #5
 8001d34:	801a      	strh	r2, [r3, #0]
    			osDelay(10);
 8001d36:	200a      	movs	r0, #10
 8001d38:	f007 fbd4 	bl	80094e4 <osDelay>
				door_open();
 8001d3c:	f7ff fd7a 	bl	8001834 <door_open>
 8001d40:	e7e2      	b.n	8001d08 <StartUVIntervalTask+0x10>
			}
    		else
    		{
    			osDelay(10);
 8001d42:	200a      	movs	r0, #10
 8001d44:	f007 fbce 	bl	80094e4 <osDelay>
    			UV_idle_state_LED();
 8001d48:	f7ff fd62 	bl	8001810 <UV_idle_state_LED>
 8001d4c:	e7dc      	b.n	8001d08 <StartUVIntervalTask+0x10>
    		}
    	}

    	else if (interrupt_type == POS_SW_INTERRUPT)
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <StartUVIntervalTask+0xc0>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d116      	bne.n	8001d84 <StartUVIntervalTask+0x8c>
    	{
    		if(HAL_GPIO_ReadPin (POS_SW_MCU_GPIO_Port, POS_SW_MCU_Pin))
 8001d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5a:	4818      	ldr	r0, [pc, #96]	; (8001dbc <StartUVIntervalTask+0xc4>)
 8001d5c:	f002 fd92 	bl	8004884 <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <StartUVIntervalTask+0x80>
			{
    			UV_IT_flag = UV_NOT_READY;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <StartUVIntervalTask+0xc8>)
 8001d68:	2205      	movs	r2, #5
 8001d6a:	801a      	strh	r2, [r3, #0]
    			osDelay(10);
 8001d6c:	200a      	movs	r0, #10
 8001d6e:	f007 fbb9 	bl	80094e4 <osDelay>
				reed_sw_open();
 8001d72:	f7ff fd45 	bl	8001800 <reed_sw_open>
 8001d76:	e7c7      	b.n	8001d08 <StartUVIntervalTask+0x10>
			}
    		else
    		{
    			osDelay(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f007 fbb3 	bl	80094e4 <osDelay>
    			UV_idle_state_LED();
 8001d7e:	f7ff fd47 	bl	8001810 <UV_idle_state_LED>
 8001d82:	e7c1      	b.n	8001d08 <StartUVIntervalTask+0x10>
    		}
    	}

    	else if(interrupt_type == UV_PUSHBUTTON_INTERRUPT)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <StartUVIntervalTask+0xc0>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1bd      	bne.n	8001d08 <StartUVIntervalTask+0x10>
		{
    		if(HAL_GPIO_ReadPin (UV_ON_OFF_MCU_GPIO_Port, UV_ON_OFF_MCU_Pin))
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f002 fd77 	bl	8004884 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <StartUVIntervalTask+0xaa>
    		{
    			UV_ON();
 8001d9c:	f7ff fcd8 	bl	8001750 <UV_ON>
 8001da0:	e7b2      	b.n	8001d08 <StartUVIntervalTask+0x10>
    		}
    		else
    		{
    			UV_IT_flag = UV_NOT_READY;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <StartUVIntervalTask+0xc8>)
 8001da4:	2205      	movs	r2, #5
 8001da6:	801a      	strh	r2, [r3, #0]
    			osDelay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f007 fb9b 	bl	80094e4 <osDelay>
    			UV_OFF();
 8001dae:	f7ff fcc5 	bl	800173c <UV_OFF>
    			UV_pulse();
 8001db2:	f7ff fd9b 	bl	80018ec <UV_pulse>
    ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 8001db6:	e7a7      	b.n	8001d08 <StartUVIntervalTask+0x10>
 8001db8:	20000542 	.word	0x20000542
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	20000544 	.word	0x20000544

08001dc4 <StartHEPAfanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHEPAfanTask */
void StartHEPAfanTask(void const * argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUVIntervalTask */
  uint32_t ulNotifyValue;
  HEPA_OFF();
 8001dcc:	f7ff fe42 	bl	8001a54 <HEPA_OFF>

  /* Infinite loop */
  for(;;)
  {
    ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f008 f89b 	bl	8009f10 <ulTaskNotifyTake>
 8001dda:	60f8      	str	r0, [r7, #12]
    if(ulNotifyValue != 0)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f6      	beq.n	8001dd0 <StartHEPAfanTask+0xc>
    {
    	if (HAL_GPIO_ReadPin(HEPA_ON_OFF_GPIO_Port, HEPA_ON_OFF_Pin))
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f002 fd4c 	bl	8004884 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <StartHEPAfanTask+0x34>
    	{
    		HEPA_OFF();
 8001df2:	f7ff fe2f 	bl	8001a54 <HEPA_OFF>
 8001df6:	e7eb      	b.n	8001dd0 <StartHEPAfanTask+0xc>
		}
    	else
    	{
    		HEPA_ON();
 8001df8:	f7ff fe10 	bl	8001a1c <HEPA_ON>
    ulNotifyValue = ulTaskNotifyTake(pdTRUE, 0xFFFFFFFF);
 8001dfc:	e7e8      	b.n	8001dd0 <StartHEPAfanTask+0xc>
	...

08001e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e12:	f000 fe31 	bl	8002a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40001000 	.word	0x40001000

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <Error_Handler+0x8>
	...

08001e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_MspInit+0x50>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_MspInit+0x50>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6613      	str	r3, [r2, #96]	; 0x60
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x50>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_MspInit+0x50>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_MspInit+0x50>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x50>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	210f      	movs	r1, #15
 8001e6a:	f06f 0001 	mvn.w	r0, #1
 8001e6e:	f001 ffc3 	bl	8003df8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e72:	f003 fc09 	bl	8005688 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b09e      	sub	sp, #120	; 0x78
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2250      	movs	r2, #80	; 0x50
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f008 ffb6 	bl	800ae16 <memset>
  if(hadc->Instance==ADC1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb2:	d133      	bne.n	8001f1c <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001eba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ebe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 f951 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ed0:	f7ff ffa8 	bl	8001e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001eda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_ADC_MspInit+0xa0>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = _24V_SCLD_Pin|_3V3_SCLD_Pin;
 8001f04:	2303      	movs	r3, #3
 8001f06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f14:	4619      	mov	r1, r3
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HAL_ADC_MspInit+0xa4>)
 8001f18:	f002 fb32 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3778      	adds	r7, #120	; 0x78
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000800 	.word	0x48000800

08001f2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b09e      	sub	sp, #120	; 0x78
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2250      	movs	r2, #80	; 0x50
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f008 ff62 	bl	800ae16 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_FDCAN_MspInit+0xac>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d139      	bne.n	8001fd0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f8fd 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001f78:	f7ff ff54 	bl	8001e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001f82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_FDCAN_MspInit+0xb0>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fb0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fcc:	f002 fad8 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3778      	adds	r7, #120	; 0x78
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40006400 	.word	0x40006400
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0a0      	sub	sp, #128	; 0x80
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2250      	movs	r2, #80	; 0x50
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f008 ff08 	bl	800ae16 <memset>
  if(hi2c->Instance==I2C2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_I2C_MspInit+0x15c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d154      	bne.n	80020ba <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002014:	2300      	movs	r3, #0
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4618      	mov	r0, r3
 800201e:	f004 f8a5 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002028:	f7ff fefc 	bl	8001e24 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_I2C_MspInit+0x160>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_I2C_MspInit+0x160>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_I2C_MspInit+0x160>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_I2C_MspInit+0x160>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a3d      	ldr	r2, [pc, #244]	; (8002140 <HAL_I2C_MspInit+0x160>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_I2C_MspInit+0x160>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin;
 800205c:	2310      	movs	r3, #16
 800205e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002060:	2312      	movs	r3, #18
 8002062:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800206c:	2304      	movs	r3, #4
 800206e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002074:	4619      	mov	r1, r3
 8002076:	4833      	ldr	r0, [pc, #204]	; (8002144 <HAL_I2C_MspInit+0x164>)
 8002078:	f002 fa82 	bl	8004580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EEPROM_SDA_Pin;
 800207c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002080:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002082:	2312      	movs	r3, #18
 8002084:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800208e:	2304      	movs	r3, #4
 8002090:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f002 fa70 	bl	8004580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020b8:	e03c      	b.n	8002134 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_I2C_MspInit+0x168>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d137      	bne.n	8002134 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f84a 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_MspInit+0x102>
      Error_Handler();
 80020de:	f7ff fea1 	bl	8001e24 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_I2C_MspInit+0x160>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	2312      	movs	r3, #18
 8002102:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800210c:	2308      	movs	r3, #8
 800210e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002114:	4619      	mov	r1, r3
 8002116:	480b      	ldr	r0, [pc, #44]	; (8002144 <HAL_I2C_MspInit+0x164>)
 8002118:	f002 fa32 	bl	8004580 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_I2C_MspInit+0x160>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_I2C_MspInit+0x160>)
 8002122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_I2C_MspInit+0x160>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
}
 8002134:	bf00      	nop
 8002136:	3780      	adds	r7, #128	; 0x80
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40005800 	.word	0x40005800
 8002140:	40021000 	.word	0x40021000
 8002144:	48000800 	.word	0x48000800
 8002148:	40007800 	.word	0x40007800

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b09e      	sub	sp, #120	; 0x78
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2250      	movs	r2, #80	; 0x50
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f008 fe52 	bl	800ae16 <memset>
  if(huart->Instance==LPUART1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_UART_MspInit+0xa8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d136      	bne.n	80021ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800217c:	2320      	movs	r3, #32
 800217e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4618      	mov	r0, r3
 800218a:	f003 ffef 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002194:	f7ff fe46 	bl	8001e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_UART_MspInit+0xac>)
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_UART_MspInit+0xac>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_UART_MspInit+0xac>)
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_UART_MspInit+0xac>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_UART_MspInit+0xac>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_UART_MspInit+0xac>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021c8:	230c      	movs	r3, #12
 80021ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80021d8:	230c      	movs	r3, #12
 80021da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e6:	f002 f9cb 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3778      	adds	r7, #120	; 0x78
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40008000 	.word	0x40008000
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_SPI_MspInit+0x7c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d128      	bne.n	8002270 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_SPI_MspInit+0x80>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_SPI_MspInit+0x80>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6593      	str	r3, [r2, #88]	; 0x58
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_SPI_MspInit+0x80>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_SPI_MspInit+0x80>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_SPI_MspInit+0x80>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_SPI_MspInit+0x80>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800224e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002260:	2305      	movs	r3, #5
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_SPI_MspInit+0x84>)
 800226c:	f002 f988 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40003800 	.word	0x40003800
 800227c:	40021000 	.word	0x40021000
 8002280:	48000400 	.word	0x48000400

08002284 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_TIM_PWM_MspInit+0x80>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 800229c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a0:	6613      	str	r3, [r2, #96]	; 0x60
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80022ae:	e022      	b.n	80022f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <HAL_TIM_PWM_MspInit+0x88>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10c      	bne.n	80022d4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c4:	6613      	str	r3, [r2, #96]	; 0x60
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
}
 80022d2:	e010      	b.n	80022f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM20)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_TIM_PWM_MspInit+0x8c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10b      	bne.n	80022f6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_TIM_PWM_MspInit+0x84>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40013400 	.word	0x40013400
 8002310:	40015000 	.word	0x40015000

08002314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d129      	bne.n	800238a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a27      	ldr	r2, [pc, #156]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HEPA_FG_Pin;
 8002366:	2320      	movs	r3, #32
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002376:	2301      	movs	r3, #1
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HEPA_FG_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f002 f8fc 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002388:	e022      	b.n	80023d0 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_TIM_Base_MspInit+0xc8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d10c      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
}
 80023ac:	e010      	b.n	80023d0 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM16)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_TIM_Base_MspInit+0xcc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10b      	bne.n	80023d0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 80023ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 80023be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c2:	6613      	str	r3, [r2, #96]	; 0x60
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_TIM_Base_MspInit+0xc4>)
 80023c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40014400 	.word	0x40014400

080023e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_TIM_MspPostInit+0x1e8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d13a      	bne.n	800247c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	4a6b      	ldr	r2, [pc, #428]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242a:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC5     ------> TIM1_CH4N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = UV_B_CTRL_Pin;
 8002436:	2320      	movs	r3, #32
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002446:	2306      	movs	r3, #6
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UV_B_CTRL_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	4619      	mov	r1, r3
 8002450:	4860      	ldr	r0, [pc, #384]	; (80025d4 <HAL_TIM_MspPostInit+0x1f0>)
 8002452:	f002 f895 	bl	8004580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEPA_R_CTRL_Pin|HEPA_W_CTRL_Pin;
 8002456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002468:	2306      	movs	r3, #6
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002476:	f002 f883 	bl	8004580 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 800247a:	e0a3      	b.n	80025c4 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a55      	ldr	r2, [pc, #340]	; (80025d8 <HAL_TIM_MspPostInit+0x1f4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11d      	bne.n	80024c2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002492:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HEPA_PWM_Pin;
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ae:	2302      	movs	r3, #2
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HEPA_PWM_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f002 f860 	bl	8004580 <HAL_GPIO_Init>
}
 80024c0:	e080      	b.n	80025c4 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM8)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_TIM_MspPostInit+0x1f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d138      	bne.n	800253e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	4a3f      	ldr	r2, [pc, #252]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	4a39      	ldr	r2, [pc, #228]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f0:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UV_G_CTRL_Pin|UV_R_CTRL_Pin;
 80024fc:	2303      	movs	r3, #3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800250c:	2304      	movs	r3, #4
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002514:	4619      	mov	r1, r3
 8002516:	4832      	ldr	r0, [pc, #200]	; (80025e0 <HAL_TIM_MspPostInit+0x1fc>)
 8002518:	f002 f832 	bl	8004580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800252c:	2304      	movs	r3, #4
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002534:	4619      	mov	r1, r3
 8002536:	4827      	ldr	r0, [pc, #156]	; (80025d4 <HAL_TIM_MspPostInit+0x1f0>)
 8002538:	f002 f822 	bl	8004580 <HAL_GPIO_Init>
}
 800253c:	e042      	b.n	80025c4 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM16)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <HAL_TIM_MspPostInit+0x200>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d11c      	bne.n	8002582 <HAL_TIM_MspPostInit+0x19e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEPA_B_CTRLB4_Pin;
 8002560:	2310      	movs	r3, #16
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002570:	2301      	movs	r3, #1
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HEPA_B_CTRLB4_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002578:	4619      	mov	r1, r3
 800257a:	4819      	ldr	r0, [pc, #100]	; (80025e0 <HAL_TIM_MspPostInit+0x1fc>)
 800257c:	f002 f800 	bl	8004580 <HAL_GPIO_Init>
}
 8002580:	e020      	b.n	80025c4 <HAL_TIM_MspPostInit+0x1e0>
  else if(htim->Instance==TIM20)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_TIM_MspPostInit+0x204>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_MspPostInit+0x1e0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_TIM_MspPostInit+0x1ec>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UV_W_CTRL_Pin;
 80025a4:	2304      	movs	r3, #4
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80025b4:	2303      	movs	r3, #3
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(UV_W_CTRL_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	4808      	ldr	r0, [pc, #32]	; (80025e0 <HAL_TIM_MspPostInit+0x1fc>)
 80025c0:	f001 ffde 	bl	8004580 <HAL_GPIO_Init>
}
 80025c4:	bf00      	nop
 80025c6:	3738      	adds	r7, #56	; 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000800 	.word	0x48000800
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40013400 	.word	0x40013400
 80025e0:	48000400 	.word	0x48000400
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40015000 	.word	0x40015000

080025ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_InitTick+0xcc>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <HAL_InitTick+0xcc>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6593      	str	r3, [r2, #88]	; 0x58
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_InitTick+0xcc>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fd2b 	bl	8006080 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800262a:	f003 fcfd 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 800262e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_InitTick+0xd0>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	3b01      	subs	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_InitTick+0xd4>)
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_InitTick+0xd8>)
 8002642:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_InitTick+0xd4>)
 8002646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800264a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800264c:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <HAL_InitTick+0xd4>)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_InitTick+0xd4>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_InitTick+0xd4>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800265e:	4818      	ldr	r0, [pc, #96]	; (80026c0 <HAL_InitTick+0xd4>)
 8002660:	f004 f86b 	bl	800673a <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800266a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11b      	bne.n	80026aa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002672:	4813      	ldr	r0, [pc, #76]	; (80026c0 <HAL_InitTick+0xd4>)
 8002674:	f004 f8b8 	bl	80067e8 <HAL_TIM_Base_Start_IT>
 8002678:	4603      	mov	r3, r0
 800267a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800267e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002682:	2b00      	cmp	r3, #0
 8002684:	d111      	bne.n	80026aa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002686:	2036      	movs	r0, #54	; 0x36
 8002688:	f001 fbd0 	bl	8003e2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d808      	bhi.n	80026a4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002692:	2200      	movs	r2, #0
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	2036      	movs	r0, #54	; 0x36
 8002698:	f001 fbae 	bl	8003df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_InitTick+0xdc>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e002      	b.n	80026aa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	20000548 	.word	0x20000548
 80026c4:	40001000 	.word	0x40001000
 80026c8:	20000008 	.word	0x20000008

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <NMI_Handler+0x4>

080026d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <HardFault_Handler+0x4>

080026d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <MemManage_Handler+0x4>

080026de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <BusFault_Handler+0x4>

080026e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <UsageFault_Handler+0x4>

080026ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_NO_MCU_Pin);
 80026fc:	2004      	movs	r0, #4
 80026fe:	f002 f90b 	bl	8004918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}

08002706 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DOOR_OPEN_MCU_Pin);
 800270a:	2080      	movs	r0, #128	; 0x80
 800270c:	f002 f904 	bl	8004918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEPA_NO_MCU_Pin);
 8002718:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800271c:	f002 f8fc 	bl	8004918 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POS_SW_MCU_Pin);
 8002720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002724:	f002 f8f8 	bl	8004918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM6_DAC_IRQHandler+0x10>)
 8002732:	f004 fb2a 	bl	8006d8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000548 	.word	0x20000548

08002740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
	return 1;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_kill>:

int _kill(int pid, int sig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800275a:	f008 fc11 	bl	800af80 <__errno>
 800275e:	4603      	mov	r3, r0
 8002760:	2216      	movs	r2, #22
 8002762:	601a      	str	r2, [r3, #0]
	return -1;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_exit>:

void _exit (int status)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ffe7 	bl	8002750 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002782:	e7fe      	b.n	8002782 <_exit+0x12>

08002784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00a      	b.n	80027ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002796:	f3af 8000 	nop.w
 800279a:	4601      	mov	r1, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	60ba      	str	r2, [r7, #8]
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dbf0      	blt.n	8002796 <_read+0x12>
	}

return len;
 80027b4:	687b      	ldr	r3, [r7, #4]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e009      	b.n	80027e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf1      	blt.n	80027d0 <_write+0x12>
	}
	return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_close>:

int _close(int file)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800281e:	605a      	str	r2, [r3, #4]
	return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_isatty>:

int _isatty(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return 1;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f008 fb76 	bl	800af80 <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2001c000 	.word	0x2001c000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	20000594 	.word	0x20000594
 80028c8:	20002f60 	.word	0x20002f60

080028cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <SystemInit+0x20>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <SystemInit+0x20>)
 80028d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028f0:	480d      	ldr	r0, [pc, #52]	; (8002928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <LoopForever+0x6>)
  ldr r1, =_edata
 80028f6:	490e      	ldr	r1, [pc, #56]	; (8002930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028f8:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <LoopForever+0xe>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028fc:	e002      	b.n	8002904 <LoopCopyDataInit>

080028fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002902:	3304      	adds	r3, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002908:	d3f9      	bcc.n	80028fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <LoopForever+0x12>)
  ldr r4, =_ebss
 800290c:	4c0b      	ldr	r4, [pc, #44]	; (800293c <LoopForever+0x16>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002910:	e001      	b.n	8002916 <LoopFillZerobss>

08002912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002914:	3204      	adds	r2, #4

08002916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002918:	d3fb      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291a:	f7ff ffd7 	bl	80028cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800291e:	f008 fb35 	bl	800af8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002922:	f7fe f837 	bl	8000994 <main>

08002926 <LoopForever>:

LoopForever:
    b LoopForever
 8002926:	e7fe      	b.n	8002926 <LoopForever>
  ldr   r0, =_estack
 8002928:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800292c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002930:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002934:	0800c014 	.word	0x0800c014
  ldr r2, =_sbss
 8002938:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800293c:	20002f60 	.word	0x20002f60

08002940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <ADC1_2_IRQHandler>

08002942 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
 8002954:	f7ff fa66 	bl	8001e24 <Error_Handler>
 8002958:	e7fe      	b.n	8002958 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7a1b      	ldrb	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d904      	bls.n	800296c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002962:	b672      	cpsid	i
}
 8002964:	bf00      	nop
 8002966:	f7ff fa5d 	bl	8001e24 <Error_Handler>
 800296a:	e7fe      	b.n	800296a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7a1b      	ldrb	r3, [r3, #8]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	b2d1      	uxtb	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	7211      	strb	r1, [r2, #8]
 8002978:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800297a:	f3ef 8211 	mrs	r2, BASEPRI
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d104      	bne.n	80029ba <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
 80029b4:	f7ff fa36 	bl	8001e24 <Error_Handler>
 80029b8:	e7fe      	b.n	80029b8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	3b01      	subs	r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7a1b      	ldrb	r3, [r3, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d904      	bls.n	80029d8 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80029ce:	b672      	cpsid	i
}
 80029d0:	bf00      	nop
 80029d2:	f7ff fa27 	bl	8001e24 <Error_Handler>
 80029d6:	e7fe      	b.n	80029d6 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7a1b      	ldrb	r3, [r3, #8]
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029ec:	bf00      	nop
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
 8002a08:	f7ff fa0c 	bl	8001e24 <Error_Handler>
 8002a0c:	e7fe      	b.n	8002a0c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff96 	bl	8002942 <stm32_lock_acquire>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
 8002a30:	f7ff f9f8 	bl	8001e24 <Error_Handler>
 8002a34:	e7fe      	b.n	8002a34 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ffb2 	bl	80029a2 <stm32_lock_release>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a50:	2003      	movs	r0, #3
 8002a52:	f001 f9c6 	bl	8003de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a56:	200f      	movs	r0, #15
 8002a58:	f7ff fdc8 	bl	80025ec <HAL_InitTick>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	71fb      	strb	r3, [r7, #7]
 8002a66:	e001      	b.n	8002a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a68:	f7ff f9e2 	bl	8001e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_IncTick+0x1c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_IncTick+0x20>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_IncTick+0x1c>)
 8002a88:	6013      	str	r3, [r2, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	200005b0 	.word	0x200005b0
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200005b0 	.word	0x200005b0

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d004      	beq.n	8002ad8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_Delay+0x40>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad8:	bf00      	nop
 8002ada:	f7ff ffdf 	bl	8002a9c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d8f7      	bhi.n	8002ada <HAL_Delay+0x26>
  {
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <LL_ADC_SetOffset+0x44>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	03fff000 	.word	0x03fff000

08002ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3360      	adds	r3, #96	; 0x60
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	615a      	str	r2, [r3, #20]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3330      	adds	r3, #48	; 0x30
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	211f      	movs	r1, #31
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 011f 	and.w	r1, r3, #31
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3314      	adds	r3, #20
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0e5b      	lsrs	r3, r3, #25
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	4413      	add	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0d1b      	lsrs	r3, r3, #20
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2107      	movs	r1, #7
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	0d1b      	lsrs	r3, r3, #20
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0f      	ldr	r2, [pc, #60]	; (8002d98 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d10a      	bne.n	8002d76 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002d74:	e00a      	b.n	8002d8c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	43db      	mvns	r3, r3
 8002d84:	401a      	ands	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	407f0000 	.word	0x407f0000

08002d9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6093      	str	r3, [r2, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd4:	d101      	bne.n	8002dda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e24:	d101      	bne.n	8002e2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsEnabled+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsEnabled+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d101      	bne.n	8002e9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1a1      	b.n	800320a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe ffd5 	bl	8001e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff67 	bl	8002dc0 <LL_ADC_IsDeepPowerDownEnabled>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff4d 	bl	8002d9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff82 	bl	8002e10 <LL_ADC_IsInternalRegulatorEnabled>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff66 	bl	8002de8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1c:	4b9a      	ldr	r3, [pc, #616]	; (8003188 <HAL_ADC_Init+0x2dc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	4a9a      	ldr	r2, [pc, #616]	; (800318c <HAL_ADC_Init+0x2e0>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f30:	e002      	b.n	8002f38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f9      	bne.n	8002f32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff64 	bl	8002e10 <LL_ADC_IsInternalRegulatorEnabled>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff75 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002f74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 813a 	bne.w	80031f8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8136 	bne.w	80031f8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff49 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d137      	bne.n	800301c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_Init+0x114>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_ADC_Init+0x2e4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_ADC_Init+0x134>
 8002fc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fc4:	f7ff ff38 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	4871      	ldr	r0, [pc, #452]	; (8003190 <HAL_ADC_Init+0x2e4>)
 8002fcc:	f7ff ff34 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e008      	b.n	8002ff2 <HAL_ADC_Init+0x146>
 8002fe0:	486c      	ldr	r0, [pc, #432]	; (8003194 <HAL_ADC_Init+0x2e8>)
 8002fe2:	f7ff ff29 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d012      	beq.n	800301c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_Init+0x15e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a62      	ldr	r2, [pc, #392]	; (8003190 <HAL_ADC_Init+0x2e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_ADC_Init+0x162>
 800300a:	4a63      	ldr	r2, [pc, #396]	; (8003198 <HAL_ADC_Init+0x2ec>)
 800300c:	e000      	b.n	8003010 <HAL_ADC_Init+0x164>
 800300e:	4a63      	ldr	r2, [pc, #396]	; (800319c <HAL_ADC_Init+0x2f0>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f7ff fd6e 	bl	8002af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7f5b      	ldrb	r3, [r3, #29]
 8003020:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003026:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800302c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003032:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	045b      	lsls	r3, r3, #17
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_ADC_Init+0x2f4>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fedb 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 80030a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fee8 	bl	8002e84 <LL_ADC_INJ_IsConversionOngoing>
 80030b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d17b      	bne.n	80031b4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d178      	bne.n	80031b4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030de:	f023 0302 	bic.w	r3, r3, #2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003102:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800310c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6911      	ldr	r1, [r2, #16]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003122:	e013      	b.n	800314c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003132:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003148:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	2b01      	cmp	r3, #1
 8003154:	d126      	bne.n	80031a4 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003178:	430a      	orrs	r2, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	611a      	str	r2, [r3, #16]
 8003186:	e015      	b.n	80031b4 <HAL_ADC_Init+0x308>
 8003188:	20000004 	.word	0x20000004
 800318c:	053e2d63 	.word	0x053e2d63
 8003190:	50000100 	.word	0x50000100
 8003194:	50000400 	.word	0x50000400
 8003198:	50000300 	.word	0x50000300
 800319c:	50000700 	.word	0x50000700
 80031a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10c      	bne.n	80031d6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f023 010f 	bic.w	r1, r3, #15
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
 80031d4:	e007      	b.n	80031e6 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020f 	bic.w	r2, r2, #15
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80031f6:	e007      	b.n	8003208 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	f043 0210 	orr.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003208:	7ffb      	ldrb	r3, [r7, #31]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop

08003214 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0b6      	sub	sp, #216	; 0xd8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	f000 bc04 	b.w	8003a40 <HAL_ADC_ConfigChannel+0x82c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe0a 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 83e8 	bne.w	8003a22 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	f7ff fd1c 	bl	8002c9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fdf8 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 800326e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fe04 	bl	8002e84 <LL_ADC_INJ_IsConversionOngoing>
 800327c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003280:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 81d9 	bne.w	800363c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 81d4 	bne.w	800363c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329c:	d10f      	bne.n	80032be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	4619      	mov	r1, r3
 80032aa:	f7ff fd23 	bl	8002cf4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fcdd 	bl	8002c76 <LL_ADC_SetSamplingTimeCommonConfig>
 80032bc:	e00e      	b.n	80032dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f7ff fd12 	bl	8002cf4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fccd 	bl	8002c76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	08db      	lsrs	r3, r3, #3
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d022      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6919      	ldr	r1, [r3, #16]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800330e:	f7ff fc27 	bl	8002b60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	461a      	mov	r2, r3
 8003320:	f7ff fc73 	bl	8002c0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	7f1b      	ldrb	r3, [r3, #28]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d102      	bne.n	800333a <HAL_ADC_ConfigChannel+0x126>
 8003334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003338:	e000      	b.n	800333c <HAL_ADC_ConfigChannel+0x128>
 800333a:	2300      	movs	r3, #0
 800333c:	461a      	mov	r2, r3
 800333e:	f7ff fc7f 	bl	8002c40 <LL_ADC_SetOffsetSaturation>
 8003342:	e17b      	b.n	800363c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fc2c 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x15c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fc21 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 021f 	and.w	r2, r3, #31
 800336e:	e01e      	b.n	80033ae <HAL_ADC_ConfigChannel+0x19a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fc16 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800338e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003392:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x1b2>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	e018      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x1e4>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e004      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80033ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2200      	movs	r2, #0
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fbe5 	bl	8002bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fbc9 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x222>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fbbe 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 800342c:	4603      	mov	r3, r0
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	e01e      	b.n	8003474 <HAL_ADC_ConfigChannel+0x260>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fbb3 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344c:	fa93 f3a3 	rbit	r3, r3
 8003450:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003454:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800345c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e004      	b.n	8003472 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_ADC_ConfigChannel+0x278>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	e018      	b.n	80034be <HAL_ADC_ConfigChannel+0x2aa>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80034a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80034a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e004      	b.n	80034be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034be:	429a      	cmp	r2, r3
 80034c0:	d106      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fb82 	bl	8002bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fb66 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 80034dc:	4603      	mov	r3, r0
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x2e8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2102      	movs	r1, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fb5b 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 80034f2:	4603      	mov	r3, r0
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	f003 021f 	and.w	r2, r3, #31
 80034fa:	e01e      	b.n	800353a <HAL_ADC_ConfigChannel+0x326>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fb50 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 8003508:	4603      	mov	r3, r0
 800350a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800351a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800351e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003522:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800352a:	2320      	movs	r3, #32
 800352c:	e004      	b.n	8003538 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800352e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x33e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0e9b      	lsrs	r3, r3, #26
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	e016      	b.n	8003580 <HAL_ADC_ConfigChannel+0x36c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800356a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003572:	2320      	movs	r3, #32
 8003574:	e004      	b.n	8003580 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003580:	429a      	cmp	r2, r3
 8003582:	d106      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fb21 	bl	8002bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2103      	movs	r1, #3
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fb05 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_ADC_ConfigChannel+0x3aa>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2103      	movs	r1, #3
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fafa 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 80035b4:	4603      	mov	r3, r0
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	e017      	b.n	80035ee <HAL_ADC_ConfigChannel+0x3da>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2103      	movs	r1, #3
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff faef 	bl	8002ba8 <LL_ADC_GetOffsetChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035e0:	2320      	movs	r3, #32
 80035e2:	e003      	b.n	80035ec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x3f2>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	e011      	b.n	800362a <HAL_ADC_ConfigChannel+0x416>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003616:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800361e:	2320      	movs	r3, #32
 8003620:	e003      	b.n	800362a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362a:	429a      	cmp	r2, r3
 800362c:	d106      	bne.n	800363c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	2103      	movs	r1, #3
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff facc 	bl	8002bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fbf9 	bl	8002e38 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 813d 	bne.w	80038c8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	461a      	mov	r2, r3
 800365c:	f7ff fb76 	bl	8002d4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4aa2      	ldr	r2, [pc, #648]	; (80038f0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f040 812e 	bne.w	80038c8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x480>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b09      	cmp	r3, #9
 800368a:	bf94      	ite	ls
 800368c:	2301      	movls	r3, #1
 800368e:	2300      	movhi	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e019      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x4b4>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80036a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80036a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2b09      	cmp	r3, #9
 80036c0:	bf94      	ite	ls
 80036c2:	2301      	movls	r3, #1
 80036c4:	2300      	movhi	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d079      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x4d4>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	3301      	adds	r3, #1
 80036e0:	069b      	lsls	r3, r3, #26
 80036e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e6:	e015      	b.n	8003714 <HAL_ADC_ConfigChannel+0x500>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e003      	b.n	800370c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3301      	adds	r3, #1
 800370e:	069b      	lsls	r3, r3, #26
 8003710:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x520>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2101      	movs	r1, #1
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	e017      	b.n	8003764 <HAL_ADC_ConfigChannel+0x550>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e003      	b.n	8003758 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	ea42 0103 	orr.w	r1, r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_ADC_ConfigChannel+0x576>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0e9b      	lsrs	r3, r3, #26
 800377a:	3301      	adds	r3, #1
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	051b      	lsls	r3, r3, #20
 8003788:	e018      	b.n	80037bc <HAL_ADC_ConfigChannel+0x5a8>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037bc:	430b      	orrs	r3, r1
 80037be:	e07e      	b.n	80038be <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x5c8>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	3301      	adds	r3, #1
 80037d4:	069b      	lsls	r3, r3, #26
 80037d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037da:	e015      	b.n	8003808 <HAL_ADC_ConfigChannel+0x5f4>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x614>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	3301      	adds	r3, #1
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	e017      	b.n	8003858 <HAL_ADC_ConfigChannel+0x644>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	61fb      	str	r3, [r7, #28]
  return result;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e003      	b.n	800384c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	ea42 0103 	orr.w	r1, r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x670>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	3301      	adds	r3, #1
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	3b1e      	subs	r3, #30
 800387c:	051b      	lsls	r3, r3, #20
 800387e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003882:	e01b      	b.n	80038bc <HAL_ADC_ConfigChannel+0x6a8>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	613b      	str	r3, [r7, #16]
  return result;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e003      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	3b1e      	subs	r3, #30
 80038b6:	051b      	lsls	r3, r3, #20
 80038b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038bc:	430b      	orrs	r3, r1
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7ff fa16 	bl	8002cf4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_ADC_ConfigChannel+0x6e0>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80af 	beq.w	8003a34 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038de:	d004      	beq.n	80038ea <HAL_ADC_ConfigChannel+0x6d6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_ADC_ConfigChannel+0x6e4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10a      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x6ec>
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_ADC_ConfigChannel+0x6e8>)
 80038ec:	e009      	b.n	8003902 <HAL_ADC_ConfigChannel+0x6ee>
 80038ee:	bf00      	nop
 80038f0:	407f0000 	.word	0x407f0000
 80038f4:	80080000 	.word	0x80080000
 80038f8:	50000100 	.word	0x50000100
 80038fc:	50000300 	.word	0x50000300
 8003900:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <HAL_ADC_ConfigChannel+0x834>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f91e 	bl	8002b44 <LL_ADC_GetCommonPathInternalCh>
 8003908:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_ADC_ConfigChannel+0x838>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x70c>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <HAL_ADC_ConfigChannel+0x83c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d134      	bne.n	800398a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d12e      	bne.n	800398a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003934:	d17e      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393e:	d004      	beq.n	800394a <HAL_ADC_ConfigChannel+0x736>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a43      	ldr	r2, [pc, #268]	; (8003a54 <HAL_ADC_ConfigChannel+0x840>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_ADC_ConfigChannel+0x73a>
 800394a:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <HAL_ADC_ConfigChannel+0x844>)
 800394c:	e000      	b.n	8003950 <HAL_ADC_ConfigChannel+0x73c>
 800394e:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <HAL_ADC_ConfigChannel+0x834>)
 8003950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003954:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7ff f8df 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003960:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <HAL_ADC_ConfigChannel+0x848>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <HAL_ADC_ConfigChannel+0x84c>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800397a:	e002      	b.n	8003982 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3b01      	subs	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003988:	e054      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <HAL_ADC_ConfigChannel+0x850>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d120      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x7c2>
 8003994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11a      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a8:	d144      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b2:	d004      	beq.n	80039be <HAL_ADC_ConfigChannel+0x7aa>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_ADC_ConfigChannel+0x840>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x7ae>
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <HAL_ADC_ConfigChannel+0x844>)
 80039c0:	e000      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x7b0>
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_ADC_ConfigChannel+0x834>)
 80039c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f7ff f8a5 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d4:	e02e      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_ADC_ConfigChannel+0x854>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d129      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d123      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_ADC_ConfigChannel+0x840>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01e      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039fe:	d004      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x7f6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_ADC_ConfigChannel+0x840>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x7fa>
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <HAL_ADC_ConfigChannel+0x844>)
 8003a0c:	e000      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x7fc>
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <HAL_ADC_ConfigChannel+0x834>)
 8003a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f7ff f87f 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
 8003a20:	e008      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	f043 0220 	orr.w	r2, r3, #32
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	37d8      	adds	r7, #216	; 0xd8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	50000700 	.word	0x50000700
 8003a4c:	c3210000 	.word	0xc3210000
 8003a50:	90c00010 	.word	0x90c00010
 8003a54:	50000100 	.word	0x50000100
 8003a58:	50000300 	.word	0x50000300
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	053e2d63 	.word	0x053e2d63
 8003a64:	c7520000 	.word	0xc7520000
 8003a68:	cb840000 	.word	0xcb840000

08003a6c <LL_ADC_IsEnabled>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <LL_ADC_IsEnabled+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_ADC_IsEnabled+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d101      	bne.n	8003aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b0a1      	sub	sp, #132	; 0x84
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0cb      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aee:	d102      	bne.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	e001      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0aa      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ffb9 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8003b20:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff ffb3 	bl	8003a92 <LL_ADC_REG_IsConversionOngoing>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 808c 	bne.w	8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 8088 	bne.w	8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003b54:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003b56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d041      	beq.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b72:	035b      	lsls	r3, r3, #13
 8003b74:	430b      	orrs	r3, r1
 8003b76:	431a      	orrs	r2, r3
 8003b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b84:	d004      	beq.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3b      	ldr	r2, [pc, #236]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003b90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b94:	f7ff ff6a 	bl	8003a6c <LL_ADC_IsEnabled>
 8003b98:	4604      	mov	r4, r0
 8003b9a:	4837      	ldr	r0, [pc, #220]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003b9c:	f7ff ff66 	bl	8003a6c <LL_ADC_IsEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4323      	orrs	r3, r4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e008      	b.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003bb0:	4834      	ldr	r0, [pc, #208]	; (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003bb2:	f7ff ff5b 	bl	8003a6c <LL_ADC_IsEnabled>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bce:	f023 030f 	bic.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003be2:	e03d      	b.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10f      	bne.n	8003c24 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003c04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c08:	f7ff ff30 	bl	8003a6c <LL_ADC_IsEnabled>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	481a      	ldr	r0, [pc, #104]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c10:	f7ff ff2c 	bl	8003a6c <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4323      	orrs	r3, r4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e008      	b.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003c24:	4817      	ldr	r0, [pc, #92]	; (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003c26:	f7ff ff21 	bl	8003a6c <LL_ADC_IsEnabled>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c42:	f023 030f 	bic.w	r3, r3, #15
 8003c46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c48:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4a:	e009      	b.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c5e:	e000      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3784      	adds	r7, #132	; 0x84
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	bf00      	nop
 8003c78:	50000100 	.word	0x50000100
 8003c7c:	50000300 	.word	0x50000300
 8003c80:	50000700 	.word	0x50000700
 8003c84:	50000400 	.word	0x50000400

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	; (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	; (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff4c 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e06:	f7ff ff63 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	6978      	ldr	r0, [r7, #20]
 8003e12:	f7ff ffb3 	bl	8003d7c <NVIC_EncodePriority>
 8003e16:	4602      	mov	r2, r0
 8003e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff ff82 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e24:	bf00      	nop
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff56 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e147      	b.n	80040ea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe f85c 	bl	8001f2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e84:	f7fe fe0a 	bl	8002a9c <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e8a:	e012      	b.n	8003eb2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e8c:	f7fe fe06 	bl	8002a9c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b0a      	cmp	r3, #10
 8003e98:	d90b      	bls.n	8003eb2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e11b      	b.n	80040ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d0e5      	beq.n	8003e8c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed0:	f7fe fde4 	bl	8002a9c <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ed6:	e012      	b.n	8003efe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ed8:	f7fe fde0 	bl	8002a9c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b0a      	cmp	r3, #10
 8003ee4:	d90b      	bls.n	8003efe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0f5      	b.n	80040ea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0e5      	beq.n	8003ed8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0202 	orr.w	r2, r2, #2
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a74      	ldr	r2, [pc, #464]	; (80040f4 <HAL_FDCAN_Init+0x2ac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d103      	bne.n	8003f2e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003f26:	4a74      	ldr	r2, [pc, #464]	; (80040f8 <HAL_FDCAN_Init+0x2b0>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7c1b      	ldrb	r3, [r3, #16]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d108      	bne.n	8003f48 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f44:	619a      	str	r2, [r3, #24]
 8003f46:	e007      	b.n	8003f58 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f56:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7c5b      	ldrb	r3, [r3, #17]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d108      	bne.n	8003f72 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f6e:	619a      	str	r2, [r3, #24]
 8003f70:	e007      	b.n	8003f82 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f80:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	7c9b      	ldrb	r3, [r3, #18]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d108      	bne.n	8003f9c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f98:	619a      	str	r2, [r3, #24]
 8003f9a:	e007      	b.n	8003fac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003faa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699a      	ldr	r2, [r3, #24]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003fd0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0210 	bic.w	r2, r2, #16
 8003fe0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d108      	bne.n	8003ffc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0204 	orr.w	r2, r2, #4
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	e02c      	b.n	8004056 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d028      	beq.n	8004056 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d01c      	beq.n	8004046 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800401a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0210 	orr.w	r2, r2, #16
 800402a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d110      	bne.n	8004056 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0220 	orr.w	r2, r2, #32
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e007      	b.n	8004056 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0220 	orr.w	r2, r2, #32
 8004054:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	3b01      	subs	r3, #1
 800405c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	3b01      	subs	r3, #1
 8004064:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004066:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800406e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	3b01      	subs	r3, #1
 8004078:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800407e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004080:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408a:	d115      	bne.n	80040b8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	3b01      	subs	r3, #1
 8004098:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800409a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	3b01      	subs	r3, #1
 80040a2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	3b01      	subs	r3, #1
 80040ae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80040b4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80040b6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f978 	bl	80043c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40006400 	.word	0x40006400
 80040f8:	40006500 	.word	0x40006500

080040fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d110      	bne.n	8004132 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e006      	b.n	8004140 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	f043 0204 	orr.w	r2, r3, #4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d12c      	bne.n	80041be <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004178:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e023      	b.n	80041cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f974 	bl	8004488 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ac:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80041b0:	2201      	movs	r2, #1
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	409a      	lsls	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e006      	b.n	80041cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	f043 0208 	orr.w	r2, r3, #8
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b08b      	sub	sp, #44	; 0x2c
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041e8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80041ea:	7efb      	ldrb	r3, [r7, #27]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f040 80bc 	bne.w	800436a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d121      	bne.n	800423c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0af      	b.n	8004378 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	e020      	b.n	800427e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e08d      	b.n	8004378 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	440b      	add	r3, r1
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	0c9b      	lsrs	r3, r3, #18
 8004298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	3304      	adds	r3, #4
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	0e1b      	lsrs	r3, r3, #24
 8004300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0fda      	lsrs	r2, r3, #31
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	3304      	adds	r3, #4
 8004316:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800431c:	2300      	movs	r3, #0
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	e00a      	b.n	8004338 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	441a      	add	r2, r3
 8004328:	6839      	ldr	r1, [r7, #0]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	440b      	add	r3, r1
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	3301      	adds	r3, #1
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	4a11      	ldr	r2, [pc, #68]	; (8004384 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8004340:	5cd3      	ldrb	r3, [r2, r3]
 8004342:	461a      	mov	r2, r3
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	4293      	cmp	r3, r2
 8004348:	d3eb      	bcc.n	8004322 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d105      	bne.n	800435c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800435a:	e004      	b.n	8004366 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	e006      	b.n	8004378 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	f043 0208 	orr.w	r2, r3, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	372c      	adds	r7, #44	; 0x2c
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	0800beec 	.word	0x0800beec

08004388 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d107      	bne.n	80043a8 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	e006      	b.n	80043b6 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80043cc:	4b2c      	ldr	r3, [pc, #176]	; (8004480 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80043ce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d103      	bne.n	80043e2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80043e0:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f0:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004416:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	061a      	lsls	r2, r3, #24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e005      	b.n	8004464 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3f3      	bcc.n	8004458 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	4000a400 	.word	0x4000a400
 8004484:	40006800 	.word	0x40006800

08004488 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80044a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e00a      	b.n	80044ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80044bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80044c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80044c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80044da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80044e0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3304      	adds	r3, #4
 8004506:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	3304      	adds	r3, #4
 8004512:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e020      	b.n	800455c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	3303      	adds	r3, #3
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	3302      	adds	r3, #2
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	440b      	add	r3, r1
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004532:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3301      	adds	r3, #1
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	440b      	add	r3, r1
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004540:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	440a      	add	r2, r1
 8004548:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800454a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3304      	adds	r3, #4
 8004554:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3304      	adds	r3, #4
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <FDCAN_CopyMessageToRAM+0xf4>)
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	461a      	mov	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4293      	cmp	r3, r2
 800456c:	d3d5      	bcc.n	800451a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	3724      	adds	r7, #36	; 0x24
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	0800beec 	.word	0x0800beec

08004580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800458e:	e15a      	b.n	8004846 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 814c 	beq.w	8004840 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d005      	beq.n	80045c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d130      	bne.n	8004622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045f6:	2201      	movs	r2, #1
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 0201 	and.w	r2, r3, #1
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d017      	beq.n	800465e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d123      	bne.n	80046b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	08da      	lsrs	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3208      	adds	r2, #8
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0203 	and.w	r2, r3, #3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80a6 	beq.w	8004840 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f4:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <HAL_GPIO_Init+0x2e4>)
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	4a5a      	ldr	r2, [pc, #360]	; (8004864 <HAL_GPIO_Init+0x2e4>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004700:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_GPIO_Init+0x2e4>)
 8004702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800470c:	4a56      	ldr	r2, [pc, #344]	; (8004868 <HAL_GPIO_Init+0x2e8>)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	3302      	adds	r3, #2
 8004714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004736:	d01f      	beq.n	8004778 <HAL_GPIO_Init+0x1f8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a4c      	ldr	r2, [pc, #304]	; (800486c <HAL_GPIO_Init+0x2ec>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d019      	beq.n	8004774 <HAL_GPIO_Init+0x1f4>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a4b      	ldr	r2, [pc, #300]	; (8004870 <HAL_GPIO_Init+0x2f0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_GPIO_Init+0x1f0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <HAL_GPIO_Init+0x2f4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00d      	beq.n	800476c <HAL_GPIO_Init+0x1ec>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a49      	ldr	r2, [pc, #292]	; (8004878 <HAL_GPIO_Init+0x2f8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <HAL_GPIO_Init+0x1e8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a48      	ldr	r2, [pc, #288]	; (800487c <HAL_GPIO_Init+0x2fc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_GPIO_Init+0x1e4>
 8004760:	2305      	movs	r3, #5
 8004762:	e00a      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 8004764:	2306      	movs	r3, #6
 8004766:	e008      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 8004768:	2304      	movs	r3, #4
 800476a:	e006      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 800476c:	2303      	movs	r3, #3
 800476e:	e004      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 8004770:	2302      	movs	r3, #2
 8004772:	e002      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <HAL_GPIO_Init+0x1fa>
 8004778:	2300      	movs	r3, #0
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	f002 0203 	and.w	r2, r2, #3
 8004780:	0092      	lsls	r2, r2, #2
 8004782:	4093      	lsls	r3, r2
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800478a:	4937      	ldr	r1, [pc, #220]	; (8004868 <HAL_GPIO_Init+0x2e8>)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	3302      	adds	r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_GPIO_Init+0x300>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047bc:	4a30      	ldr	r2, [pc, #192]	; (8004880 <HAL_GPIO_Init+0x300>)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_GPIO_Init+0x300>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_GPIO_Init+0x300>)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <HAL_GPIO_Init+0x300>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4013      	ands	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004810:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <HAL_GPIO_Init+0x300>)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <HAL_GPIO_Init+0x300>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	43db      	mvns	r3, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800483a:	4a11      	ldr	r2, [pc, #68]	; (8004880 <HAL_GPIO_Init+0x300>)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f ae9d 	bne.w	8004590 <HAL_GPIO_Init+0x10>
  }
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40021000 	.word	0x40021000
 8004868:	40010000 	.word	0x40010000
 800486c:	48000400 	.word	0x48000400
 8004870:	48000800 	.word	0x48000800
 8004874:	48000c00 	.word	0x48000c00
 8004878:	48001000 	.word	0x48001000
 800487c:	48001400 	.word	0x48001400
 8004880:	40010400 	.word	0x40010400

08004884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	e001      	b.n	80048a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
 80048c0:	4613      	mov	r3, r2
 80048c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c4:	787b      	ldrb	r3, [r7, #1]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048d0:	e002      	b.n	80048d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	041a      	lsls	r2, r3, #16
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43d9      	mvns	r1, r3
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	400b      	ands	r3, r1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800492e:	4a05      	ldr	r2, [pc, #20]	; (8004944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd f8d2 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010400 	.word	0x40010400

08004948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e081      	b.n	8004a5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fd fb36 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004998:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	e006      	b.n	80049d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d104      	bne.n	80049e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	f040 80f9 	bne.w	8004c82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_I2C_Mem_Write+0x34>
 8004a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0ed      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Mem_Write+0x4e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0e6      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004abe:	f7fd ffed 	bl	8002a9c <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2319      	movs	r3, #25
 8004aca:	2201      	movs	r2, #1
 8004acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fac3 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0d1      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2221      	movs	r2, #33	; 0x21
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b08:	88f8      	ldrh	r0, [r7, #6]
 8004b0a:	893a      	ldrh	r2, [r7, #8]
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4603      	mov	r3, r0
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f9d3 	bl	8004ec4 <I2C_RequestMemoryWrite>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0a9      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2bff      	cmp	r3, #255	; 0xff
 8004b38:	d90e      	bls.n	8004b58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fc2b 	bl	80053ac <I2C_TransferConfig>
 8004b56:	e00f      	b.n	8004b78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fc1a 	bl	80053ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 faad 	bl	80050dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e07b      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d034      	beq.n	8004c30 <HAL_I2C_Mem_Write+0x1c8>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d130      	bne.n	8004c30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2180      	movs	r1, #128	; 0x80
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa3f 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e04d      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2bff      	cmp	r3, #255	; 0xff
 8004bf0:	d90e      	bls.n	8004c10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fbcf 	bl	80053ac <I2C_TransferConfig>
 8004c0e:	e00f      	b.n	8004c30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	8979      	ldrh	r1, [r7, #10]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fbbe 	bl	80053ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d19e      	bne.n	8004b78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa8c 	bl	800515c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e01a      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2220      	movs	r2, #32
 8004c54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <HAL_I2C_Mem_Write+0x224>)
 8004c62:	400b      	ands	r3, r1
 8004c64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fe00e800 	.word	0xfe00e800

08004c90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	813b      	strh	r3, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	f040 80fd 	bne.w	8004eb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x34>
 8004cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0f1      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Mem_Read+0x4e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0ea      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fd fed9 	bl	8002a9c <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2319      	movs	r3, #25
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f9af 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0d5      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2222      	movs	r2, #34	; 0x22
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d30:	88f8      	ldrh	r0, [r7, #6]
 8004d32:	893a      	ldrh	r2, [r7, #8]
 8004d34:	8979      	ldrh	r1, [r7, #10]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	9301      	str	r3, [sp, #4]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	4603      	mov	r3, r0
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f913 	bl	8004f6c <I2C_RequestMemoryRead>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0ad      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2bff      	cmp	r3, #255	; 0xff
 8004d60:	d90e      	bls.n	8004d80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	22ff      	movs	r2, #255	; 0xff
 8004d66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	8979      	ldrh	r1, [r7, #10]
 8004d70:	4b52      	ldr	r3, [pc, #328]	; (8004ebc <HAL_I2C_Mem_Read+0x22c>)
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fb17 	bl	80053ac <I2C_TransferConfig>
 8004d7e:	e00f      	b.n	8004da0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	8979      	ldrh	r1, [r7, #10]
 8004d92:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_I2C_Mem_Read+0x22c>)
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fb06 	bl	80053ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2200      	movs	r2, #0
 8004da8:	2104      	movs	r1, #4
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 f956 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07c      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d034      	beq.n	8004e60 <HAL_I2C_Mem_Read+0x1d0>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d130      	bne.n	8004e60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f927 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e04d      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2bff      	cmp	r3, #255	; 0xff
 8004e20:	d90e      	bls.n	8004e40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	22ff      	movs	r2, #255	; 0xff
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	8979      	ldrh	r1, [r7, #10]
 8004e30:	2300      	movs	r3, #0
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fab7 	bl	80053ac <I2C_TransferConfig>
 8004e3e:	e00f      	b.n	8004e60 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	8979      	ldrh	r1, [r7, #10]
 8004e52:	2300      	movs	r3, #0
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 faa6 	bl	80053ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d19a      	bne.n	8004da0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f974 	bl	800515c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e01a      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_I2C_Mem_Read+0x230>)
 8004e92:	400b      	ands	r3, r1
 8004e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	80002400 	.word	0x80002400
 8004ec0:	fe00e800 	.word	0xfe00e800

08004ec4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <I2C_RequestMemoryWrite+0xa4>)
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fa5d 	bl	80053ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8f0 	bl	80050dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02c      	b.n	8004f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28
 8004f16:	e015      	b.n	8004f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f8d6 	bl	80050dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e012      	b.n	8004f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3a:	893b      	ldrh	r3, [r7, #8]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f884 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	80002000 	.word	0x80002000

08004f6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	813b      	strh	r3, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	8979      	ldrh	r1, [r7, #10]
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <I2C_RequestMemoryRead+0xa4>)
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	2300      	movs	r3, #0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa0a 	bl	80053ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f89d 	bl	80050dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e02c      	b.n	8005006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb2:	893b      	ldrh	r3, [r7, #8]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28
 8004fbc:	e015      	b.n	8004fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbe:	893b      	ldrh	r3, [r7, #8]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	69b9      	ldr	r1, [r7, #24]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f883 	bl	80050dc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e012      	b.n	8005006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2140      	movs	r1, #64	; 0x40
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f831 	bl	800505c <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	80002000 	.word	0x80002000

08005014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d103      	bne.n	8005032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d007      	beq.n	8005050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	619a      	str	r2, [r3, #24]
  }
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800506c:	e022      	b.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d01e      	beq.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005076:	f7fd fd11 	bl	8002a9c <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d302      	bcc.n	800508c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d113      	bne.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e00f      	b.n	80050d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	bf0c      	ite	eq
 80050c4:	2301      	moveq	r3, #1
 80050c6:	2300      	movne	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d0cd      	beq.n	800506e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050e8:	e02c      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f870 	bl	80051d4 <I2C_IsErrorOccurred>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e02a      	b.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d01e      	beq.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fd fcc9 	bl	8002a9c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d113      	bne.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e007      	b.n	8005154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d1cb      	bne.n	80050ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005168:	e028      	b.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f830 	bl	80051d4 <I2C_IsErrorOccurred>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e026      	b.n	80051cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fd fc8d 	bl	8002a9c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d113      	bne.n	80051bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e007      	b.n	80051cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d1cf      	bne.n	800516a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d075      	beq.n	80052ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2210      	movs	r2, #16
 8005206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005208:	e056      	b.n	80052b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d052      	beq.n	80052b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fd fc43 	bl	8002a9c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_IsErrorOccurred+0x54>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d147      	bne.n	80052b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524a:	d12e      	bne.n	80052aa <I2C_IsErrorOccurred+0xd6>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005252:	d02a      	beq.n	80052aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b20      	cmp	r3, #32
 8005258:	d027      	beq.n	80052aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005268:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800526a:	f7fd fc17 	bl	8002a9c <HAL_GetTick>
 800526e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005270:	e01b      	b.n	80052aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005272:	f7fd fc13 	bl	8002a9c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b19      	cmp	r3, #25
 800527e:	d914      	bls.n	80052aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d1dc      	bne.n	8005272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d003      	beq.n	80052ce <I2C_IsErrorOccurred+0xfa>
 80052c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d09d      	beq.n	800520a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d103      	bne.n	80052de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2220      	movs	r2, #32
 80052dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f043 0302 	orr.w	r3, r3, #2
 8005348:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800535a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01c      	beq.n	800539c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fe56 	bl	8005014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <I2C_IsErrorOccurred+0x1d4>)
 8005374:	400b      	ands	r3, r1
 8005376:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	431a      	orrs	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800539c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	; 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	fe00e800 	.word	0xfe00e800

080053ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	817b      	strh	r3, [r7, #10]
 80053ba:	4613      	mov	r3, r2
 80053bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053c4:	7a7b      	ldrb	r3, [r7, #9]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053cc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053da:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	0d5b      	lsrs	r3, r3, #21
 80053e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <I2C_TransferConfig+0x60>)
 80053ec:	430b      	orrs	r3, r1
 80053ee:	43db      	mvns	r3, r3
 80053f0:	ea02 0103 	and.w	r1, r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	03ff63ff 	.word	0x03ff63ff

08005410 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b20      	cmp	r3, #32
 8005424:	d138      	bne.n	8005498 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005430:	2302      	movs	r3, #2
 8005432:	e032      	b.n	800549a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005462:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d139      	bne.n	8005530 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e033      	b.n	8005532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2224      	movs	r2, #36	; 0x24
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d141      	bne.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800554e:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555a:	d131      	bne.n	80055c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800555c:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005562:	4a46      	ldr	r2, [pc, #280]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005574:	4a41      	ldr	r2, [pc, #260]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800557a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800557c:	4b40      	ldr	r3, [pc, #256]	; (8005680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2232      	movs	r2, #50	; 0x32
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	4a3f      	ldr	r2, [pc, #252]	; (8005684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	0c9b      	lsrs	r3, r3, #18
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005592:	e002      	b.n	800559a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800559a:	4b38      	ldr	r3, [pc, #224]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a6:	d102      	bne.n	80055ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f2      	bne.n	8005594 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ba:	d158      	bne.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e057      	b.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055c0:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	4a2d      	ldr	r2, [pc, #180]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055d0:	e04d      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d8:	d141      	bne.n	800565e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055da:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e6:	d131      	bne.n	800564c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ee:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f8:	4b20      	ldr	r3, [pc, #128]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005600:	4a1e      	ldr	r2, [pc, #120]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2232      	movs	r2, #50	; 0x32
 800560e:	fb02 f303 	mul.w	r3, r2, r3
 8005612:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	0c9b      	lsrs	r3, r3, #18
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561e:	e002      	b.n	8005626 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005626:	4b15      	ldr	r3, [pc, #84]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005632:	d102      	bne.n	800563a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f2      	bne.n	8005620 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005646:	d112      	bne.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e011      	b.n	8005670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800565c:	e007      	b.n	800566e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005666:	4a05      	ldr	r2, [pc, #20]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800566c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40007000 	.word	0x40007000
 8005680:	20000004 	.word	0x20000004
 8005684:	431bde83 	.word	0x431bde83

08005688 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005696:	6093      	str	r3, [r2, #8]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40007000 	.word	0x40007000

080056a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e306      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d075      	beq.n	80057b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c6:	4b97      	ldr	r3, [pc, #604]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056d0:	4b94      	ldr	r3, [pc, #592]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3e>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_OscConfig+0x44>
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d10b      	bne.n	8005704 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	4b8d      	ldr	r3, [pc, #564]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05b      	beq.n	80057b0 <HAL_RCC_OscConfig+0x108>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d157      	bne.n	80057b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e2e1      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d106      	bne.n	800571c <HAL_RCC_OscConfig+0x74>
 800570e:	4b85      	ldr	r3, [pc, #532]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a84      	ldr	r2, [pc, #528]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e01d      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x98>
 8005726:	4b7f      	ldr	r3, [pc, #508]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7e      	ldr	r2, [pc, #504]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800572c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b7c      	ldr	r3, [pc, #496]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a7b      	ldr	r2, [pc, #492]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00b      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 8005740:	4b78      	ldr	r3, [pc, #480]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a77      	ldr	r2, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b75      	ldr	r3, [pc, #468]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a74      	ldr	r2, [pc, #464]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d013      	beq.n	8005788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fd f99c 	bl	8002a9c <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005768:	f7fd f998 	bl	8002a9c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e2a6      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800577a:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0xc0>
 8005786:	e014      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fd f988 	bl	8002a9c <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005790:	f7fd f984 	bl	8002a9c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e292      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057a2:	4b60      	ldr	r3, [pc, #384]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0xe8>
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d075      	beq.n	80058aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057be:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c8:	4b56      	ldr	r3, [pc, #344]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d102      	bne.n	80057de <HAL_RCC_OscConfig+0x136>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d002      	beq.n	80057e4 <HAL_RCC_OscConfig+0x13c>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d11f      	bne.n	8005824 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e4:	4b4f      	ldr	r3, [pc, #316]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_OscConfig+0x154>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e265      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b49      	ldr	r3, [pc, #292]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	4946      	ldr	r1, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCC_OscConfig+0x280>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fc fee9 	bl	80025ec <HAL_InitTick>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d043      	beq.n	80058a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e251      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d023      	beq.n	8005874 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800582c:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd f930 	bl	8002a9c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005840:	f7fd f92c 	bl	8002a9c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e23a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005852:	4b34      	ldr	r3, [pc, #208]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	492d      	ldr	r1, [pc, #180]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
 8005872:	e01a      	b.n	80058aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005874:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800587a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fd f90c 	bl	8002a9c <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005888:	f7fd f908 	bl	8002a9c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e216      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800589a:	4b22      	ldr	r3, [pc, #136]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x1e0>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d041      	beq.n	800593a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01c      	beq.n	80058f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058be:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c4:	4a17      	ldr	r2, [pc, #92]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ce:	f7fd f8e5 	bl	8002a9c <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d6:	f7fd f8e1 	bl	8002a9c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1ef      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058e8:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0ef      	beq.n	80058d6 <HAL_RCC_OscConfig+0x22e>
 80058f6:	e020      	b.n	800593a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 80058fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_RCC_OscConfig+0x27c>)
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd f8c8 	bl	8002a9c <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800590e:	e00d      	b.n	800592c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd f8c4 	bl	8002a9c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d906      	bls.n	800592c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1d2      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800592c:	4b8c      	ldr	r3, [pc, #560]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 800592e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ea      	bne.n	8005910 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80a6 	beq.w	8005a94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800594c:	4b84      	ldr	r3, [pc, #528]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_OscConfig+0x2b4>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x2b6>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	4b7f      	ldr	r3, [pc, #508]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	4a7e      	ldr	r2, [pc, #504]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596c:	6593      	str	r3, [r2, #88]	; 0x58
 800596e:	4b7c      	ldr	r3, [pc, #496]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800597a:	2301      	movs	r3, #1
 800597c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597e:	4b79      	ldr	r3, [pc, #484]	; (8005b64 <HAL_RCC_OscConfig+0x4bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d118      	bne.n	80059bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800598a:	4b76      	ldr	r3, [pc, #472]	; (8005b64 <HAL_RCC_OscConfig+0x4bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a75      	ldr	r2, [pc, #468]	; (8005b64 <HAL_RCC_OscConfig+0x4bc>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fd f881 	bl	8002a9c <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fd f87d 	bl	8002a9c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e18b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b0:	4b6c      	ldr	r3, [pc, #432]	; (8005b64 <HAL_RCC_OscConfig+0x4bc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_RCC_OscConfig+0x32e>
 80059c4:	4b66      	ldr	r3, [pc, #408]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	4a65      	ldr	r2, [pc, #404]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d4:	e024      	b.n	8005a20 <HAL_RCC_OscConfig+0x378>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b05      	cmp	r3, #5
 80059dc:	d110      	bne.n	8005a00 <HAL_RCC_OscConfig+0x358>
 80059de:	4b60      	ldr	r3, [pc, #384]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	4a5e      	ldr	r2, [pc, #376]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059e6:	f043 0304 	orr.w	r3, r3, #4
 80059ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ee:	4b5c      	ldr	r3, [pc, #368]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	4a5a      	ldr	r2, [pc, #360]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059fe:	e00f      	b.n	8005a20 <HAL_RCC_OscConfig+0x378>
 8005a00:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a06:	4a56      	ldr	r2, [pc, #344]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a10:	4b53      	ldr	r3, [pc, #332]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	4a52      	ldr	r2, [pc, #328]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d016      	beq.n	8005a56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a28:	f7fd f838 	bl	8002a9c <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a30:	f7fd f834 	bl	8002a9c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e140      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a46:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0ed      	beq.n	8005a30 <HAL_RCC_OscConfig+0x388>
 8005a54:	e015      	b.n	8005a82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fd f821 	bl	8002a9c <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a5c:	e00a      	b.n	8005a74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5e:	f7fd f81d 	bl	8002a9c <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e129      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a74:	4b3a      	ldr	r3, [pc, #232]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ed      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	4a34      	ldr	r2, [pc, #208]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d03c      	beq.n	8005b1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01c      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fc fff0 	bl	8002a9c <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ac0:	f7fc ffec 	bl	8002a9c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0fa      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ef      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x418>
 8005ae0:	e01b      	b.n	8005b1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ae2:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fc ffd3 	bl	8002a9c <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005afa:	f7fc ffcf 	bl	8002a9c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0dd      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b0c:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1ef      	bne.n	8005afa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80d1 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	f000 808b 	beq.w	8005c48 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d15e      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a08      	ldr	r2, [pc, #32]	; (8005b60 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fc ffa9 	bl	8002a9c <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4c:	e00c      	b.n	8005b68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fc ffa5 	bl	8002a9c <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d905      	bls.n	8005b68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e0b3      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b68:	4b59      	ldr	r3, [pc, #356]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1ec      	bne.n	8005b4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b74:	4b56      	ldr	r3, [pc, #344]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	4b56      	ldr	r3, [pc, #344]	; (8005cd4 <HAL_RCC_OscConfig+0x62c>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6a11      	ldr	r1, [r2, #32]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b84:	3a01      	subs	r2, #1
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	4311      	orrs	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b8e:	0212      	lsls	r2, r2, #8
 8005b90:	4311      	orrs	r1, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b96:	0852      	lsrs	r2, r2, #1
 8005b98:	3a01      	subs	r2, #1
 8005b9a:	0552      	lsls	r2, r2, #21
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ba2:	0852      	lsrs	r2, r2, #1
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0652      	lsls	r2, r2, #25
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bae:	06d2      	lsls	r2, r2, #27
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	4947      	ldr	r1, [pc, #284]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a44      	ldr	r2, [pc, #272]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a41      	ldr	r2, [pc, #260]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fc ff64 	bl	8002a9c <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fc ff60 	bl	8002a9c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e06e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x530>
 8005bf6:	e066      	b.n	8005cc6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf8:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a34      	ldr	r2, [pc, #208]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005c04:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c0a:	f023 0303 	bic.w	r3, r3, #3
 8005c0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005c10:	4b2f      	ldr	r3, [pc, #188]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a2e      	ldr	r2, [pc, #184]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fc ff3c 	bl	8002a9c <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fc ff38 	bl	8002a9c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e046      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3a:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x580>
 8005c46:	e03e      	b.n	8005cc6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e039      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c54:	4b1e      	ldr	r3, [pc, #120]	; (8005cd0 <HAL_RCC_OscConfig+0x628>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0203 	and.w	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d12c      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	3b01      	subs	r3, #1
 8005c74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d123      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d11b      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d113      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	019f800c 	.word	0x019f800c

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e11e      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b91      	ldr	r3, [pc, #580]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d910      	bls.n	8005d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b8e      	ldr	r3, [pc, #568]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 020f 	bic.w	r2, r3, #15
 8005d06:	498c      	ldr	r1, [pc, #560]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0e:	4b8a      	ldr	r3, [pc, #552]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e106      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d073      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d129      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d34:	4b81      	ldr	r3, [pc, #516]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0f4      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d44:	f000 f9ce 	bl	80060e4 <RCC_GetSysClockFreqFromPLLSource>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	4a7c      	ldr	r2, [pc, #496]	; (8005f40 <HAL_RCC_ClockConfig+0x268>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d93f      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d52:	4b7a      	ldr	r3, [pc, #488]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d033      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d12f      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d72:	4b72      	ldr	r3, [pc, #456]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7a:	4a70      	ldr	r2, [pc, #448]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	e024      	b.n	8005dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d107      	bne.n	8005da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d90:	4b6a      	ldr	r3, [pc, #424]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0c6      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005da0:	4b66      	ldr	r3, [pc, #408]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0be      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005db0:	f000 f8ce 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4a61      	ldr	r2, [pc, #388]	; (8005f40 <HAL_RCC_ClockConfig+0x268>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d909      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005dbe:	4b5f      	ldr	r3, [pc, #380]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc6:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dd2:	4b5a      	ldr	r3, [pc, #360]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 0203 	bic.w	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	4957      	ldr	r1, [pc, #348]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de4:	f7fc fe5a 	bl	8002a9c <HAL_GetTick>
 8005de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	e00a      	b.n	8005e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dec:	f7fc fe56 	bl	8002a9c <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e095      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e02:	4b4e      	ldr	r3, [pc, #312]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 020c 	and.w	r2, r3, #12
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d1eb      	bne.n	8005dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d023      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e2c:	4b43      	ldr	r3, [pc, #268]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d007      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e44:	4b3d      	ldr	r3, [pc, #244]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e4c:	4a3b      	ldr	r2, [pc, #236]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e54:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4936      	ldr	r1, [pc, #216]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e6e:	4b33      	ldr	r3, [pc, #204]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d21d      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e88:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f023 020f 	bic.w	r2, r3, #15
 8005e90:	4929      	ldr	r1, [pc, #164]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e98:	f7fc fe00 	bl	8002a9c <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f7fc fdfc 	bl	8002a9c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e03b      	b.n	8005f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCC_ClockConfig+0x260>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d1ed      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4917      	ldr	r1, [pc, #92]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	490f      	ldr	r1, [pc, #60]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f02:	f000 f825 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCC_ClockConfig+0x264>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	490c      	ldr	r1, [pc, #48]	; (8005f44 <HAL_RCC_ClockConfig+0x26c>)
 8005f14:	5ccb      	ldrb	r3, [r1, r3]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x270>)
 8005f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f22:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <HAL_RCC_ClockConfig+0x274>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc fb60 	bl	80025ec <HAL_InitTick>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	04c4b400 	.word	0x04c4b400
 8005f44:	0800bed4 	.word	0x0800bed4
 8005f48:	20000004 	.word	0x20000004
 8005f4c:	20000008 	.word	0x20000008

08005f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d102      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	e047      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d102      	bne.n	8005f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f74:	4b25      	ldr	r3, [pc, #148]	; (800600c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	e03e      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f7a:	4b23      	ldr	r3, [pc, #140]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d136      	bne.n	8005ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f90:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d10c      	bne.n	8005fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa4:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fae:	68d2      	ldr	r2, [r2, #12]
 8005fb0:	0a12      	lsrs	r2, r2, #8
 8005fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	617b      	str	r3, [r7, #20]
      break;
 8005fbc:	e00c      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fbe:	4a13      	ldr	r2, [pc, #76]	; (800600c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc8:	68d2      	ldr	r2, [r2, #12]
 8005fca:	0a12      	lsrs	r2, r2, #8
 8005fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
      break;
 8005fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0e5b      	lsrs	r3, r3, #25
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e001      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ff8:	693b      	ldr	r3, [r7, #16]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000
 800600c:	00f42400 	.word	0x00f42400

08006010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <HAL_RCC_GetHCLKFreq+0x14>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000004 	.word	0x20000004

08006028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800602c:	f7ff fff0 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4904      	ldr	r1, [pc, #16]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40021000 	.word	0x40021000
 8006050:	0800bee4 	.word	0x0800bee4

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006058:	f7ff ffda 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 800605c:	4602      	mov	r2, r0
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0adb      	lsrs	r3, r3, #11
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4904      	ldr	r1, [pc, #16]	; (800607c <HAL_RCC_GetPCLK2Freq+0x28>)
 800606a:	5ccb      	ldrb	r3, [r1, r3]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40021000 	.word	0x40021000
 800607c:	0800bee4 	.word	0x0800bee4

08006080 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	220f      	movs	r2, #15
 800608e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCC_GetClockConfig+0x5c>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0203 	and.w	r2, r3, #3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <HAL_RCC_GetClockConfig+0x5c>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_RCC_GetClockConfig+0x5c>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCC_GetClockConfig+0x5c>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	08db      	lsrs	r3, r3, #3
 80060ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <HAL_RCC_GetClockConfig+0x60>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40021000 	.word	0x40021000
 80060e0:	40022000 	.word	0x40022000

080060e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ea:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	3301      	adds	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d10c      	bne.n	8006122 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006108:	4a17      	ldr	r2, [pc, #92]	; (8006168 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	4a14      	ldr	r2, [pc, #80]	; (8006164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006112:	68d2      	ldr	r2, [r2, #12]
 8006114:	0a12      	lsrs	r2, r2, #8
 8006116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	617b      	str	r3, [r7, #20]
    break;
 8006120:	e00c      	b.n	800613c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006122:	4a11      	ldr	r2, [pc, #68]	; (8006168 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800612c:	68d2      	ldr	r2, [r2, #12]
 800612e:	0a12      	lsrs	r2, r2, #8
 8006130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006134:	fb02 f303 	mul.w	r3, r2, r3
 8006138:	617b      	str	r3, [r7, #20]
    break;
 800613a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	0e5b      	lsrs	r3, r3, #25
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	3301      	adds	r3, #1
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006156:	687b      	ldr	r3, [r7, #4]
}
 8006158:	4618      	mov	r0, r3
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40021000 	.word	0x40021000
 8006168:	00f42400 	.word	0x00f42400

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006174:	2300      	movs	r3, #0
 8006176:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006178:	2300      	movs	r3, #0
 800617a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8098 	beq.w	80062ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800618e:	4b43      	ldr	r3, [pc, #268]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	4b40      	ldr	r3, [pc, #256]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	4a3f      	ldr	r2, [pc, #252]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6593      	str	r3, [r2, #88]	; 0x58
 80061a6:	4b3d      	ldr	r3, [pc, #244]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b2:	2301      	movs	r3, #1
 80061b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b6:	4b3a      	ldr	r3, [pc, #232]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a39      	ldr	r2, [pc, #228]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c2:	f7fc fc6b 	bl	8002a9c <HAL_GetTick>
 80061c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061c8:	e009      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ca:	f7fc fc67 	bl	8002a9c <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d902      	bls.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	74fb      	strb	r3, [r7, #19]
        break;
 80061dc:	e005      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061de:	4b30      	ldr	r3, [pc, #192]	; (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0ef      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d159      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061f0:	4b2a      	ldr	r3, [pc, #168]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01e      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	429a      	cmp	r2, r3
 800620a:	d019      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006216:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006218:	4b20      	ldr	r3, [pc, #128]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006228:	4b1c      	ldr	r3, [pc, #112]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006238:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624a:	f7fc fc27 	bl	8002a9c <HAL_GetTick>
 800624e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006250:	e00b      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006252:	f7fc fc23 	bl	8002a9c <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006260:	4293      	cmp	r3, r2
 8006262:	d902      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	74fb      	strb	r3, [r7, #19]
            break;
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0ec      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006278:	7cfb      	ldrb	r3, [r7, #19]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	4903      	ldr	r1, [pc, #12]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006296:	7cfb      	ldrb	r3, [r7, #19]
 8006298:	74bb      	strb	r3, [r7, #18]
 800629a:	e005      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800629c:	40021000 	.word	0x40021000
 80062a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a4:	7cfb      	ldrb	r3, [r7, #19]
 80062a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062a8:	7c7b      	ldrb	r3, [r7, #17]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ae:	4ba7      	ldr	r3, [pc, #668]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	4aa6      	ldr	r2, [pc, #664]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062c6:	4ba1      	ldr	r3, [pc, #644]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	f023 0203 	bic.w	r2, r3, #3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	499d      	ldr	r1, [pc, #628]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062e8:	4b98      	ldr	r3, [pc, #608]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f023 020c 	bic.w	r2, r3, #12
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	4995      	ldr	r1, [pc, #596]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800630a:	4b90      	ldr	r3, [pc, #576]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	498c      	ldr	r1, [pc, #560]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800632c:	4b87      	ldr	r3, [pc, #540]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	4984      	ldr	r1, [pc, #528]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800634e:	4b7f      	ldr	r3, [pc, #508]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	497b      	ldr	r1, [pc, #492]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006370:	4b76      	ldr	r3, [pc, #472]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	4973      	ldr	r1, [pc, #460]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006392:	4b6e      	ldr	r3, [pc, #440]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	496a      	ldr	r1, [pc, #424]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	4962      	ldr	r1, [pc, #392]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063d6:	4b5d      	ldr	r3, [pc, #372]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	4959      	ldr	r1, [pc, #356]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063f8:	4b54      	ldr	r3, [pc, #336]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	4951      	ldr	r1, [pc, #324]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006416:	2b00      	cmp	r3, #0
 8006418:	d015      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800641a:	4b4c      	ldr	r3, [pc, #304]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4948      	ldr	r1, [pc, #288]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006438:	d105      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800643a:	4b44      	ldr	r3, [pc, #272]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4a43      	ldr	r2, [pc, #268]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006444:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644e:	2b00      	cmp	r3, #0
 8006450:	d015      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	493a      	ldr	r1, [pc, #232]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006470:	d105      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006472:	4b36      	ldr	r3, [pc, #216]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4a35      	ldr	r2, [pc, #212]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800648a:	4b30      	ldr	r3, [pc, #192]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	492c      	ldr	r1, [pc, #176]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a8:	d105      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064aa:	4b28      	ldr	r3, [pc, #160]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d015      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	491e      	ldr	r1, [pc, #120]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e0:	d105      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ec:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d015      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064fa:	4b14      	ldr	r3, [pc, #80]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006508:	4910      	ldr	r1, [pc, #64]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d105      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	4a0b      	ldr	r2, [pc, #44]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006524:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	4902      	ldr	r1, [pc, #8]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	e001      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800654c:	40021000 	.word	0x40021000
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006556:	d105      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006558:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4a20      	ldr	r2, [pc, #128]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800655e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006562:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	4918      	ldr	r1, [pc, #96]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d105      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065a8:	4b0d      	ldr	r3, [pc, #52]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b6:	490a      	ldr	r1, [pc, #40]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c6:	d105      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80065ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80065d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000

080065e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e09d      	b.n	8006732 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d108      	bne.n	8006610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006606:	d009      	beq.n	800661c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	61da      	str	r2, [r3, #28]
 800660e:	e005      	b.n	800661c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fb fde0 	bl	80021fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006652:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800665c:	d902      	bls.n	8006664 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e002      	b.n	800666a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006668:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006672:	d007      	beq.n	8006684 <HAL_SPI_Init+0xa0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800667c:	d002      	beq.n	8006684 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c6:	ea42 0103 	orr.w	r1, r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	f003 0204 	and.w	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006700:	ea42 0103 	orr.w	r1, r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e049      	b.n	80067e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fb fdd7 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f000 ff61 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d001      	beq.n	8006800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e04f      	b.n	80068a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a23      	ldr	r2, [pc, #140]	; (80068ac <HAL_TIM_Base_Start_IT+0xc4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01d      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d018      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1e      	ldr	r2, [pc, #120]	; (80068b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00e      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_TIM_Base_Start_IT+0x76>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d115      	bne.n	800688a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006866:	4013      	ands	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b06      	cmp	r3, #6
 800686e:	d015      	beq.n	800689c <HAL_TIM_Base_Start_IT+0xb4>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006876:	d011      	beq.n	800689c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006888:	e008      	b.n	800689c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e000      	b.n	800689e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40015000 	.word	0x40015000
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e049      	b.n	800696e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fb fcc8 	bl	8002284 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 fe9a 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x24>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e03c      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x3e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf14      	ite	ne
 80069ae:	2301      	movne	r3, #1
 80069b0:	2300      	moveq	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e02f      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x58>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e022      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d109      	bne.n	80069ea <HAL_TIM_PWM_Start+0x72>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b01      	cmp	r3, #1
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	e015      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d109      	bne.n	8006a04 <HAL_TIM_PWM_Start+0x8c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e008      	b.n	8006a16 <HAL_TIM_PWM_Start+0x9e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e0a1      	b.n	8006b62 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0xb6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a2c:	e023      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0xc6>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	e01b      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0xd6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4c:	e013      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d104      	bne.n	8006a5e <HAL_TIM_PWM_Start+0xe6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a5c:	e00b      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xf6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a6c:	e003      	b.n	8006a76 <HAL_TIM_PWM_Start+0xfe>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fb66 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a38      	ldr	r2, [pc, #224]	; (8006b6c <HAL_TIM_PWM_Start+0x1f4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0x148>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a37      	ldr	r2, [pc, #220]	; (8006b70 <HAL_TIM_PWM_Start+0x1f8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0x148>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	; (8006b74 <HAL_TIM_PWM_Start+0x1fc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0x148>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a34      	ldr	r2, [pc, #208]	; (8006b78 <HAL_TIM_PWM_Start+0x200>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0x148>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a32      	ldr	r2, [pc, #200]	; (8006b7c <HAL_TIM_PWM_Start+0x204>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_PWM_Start+0x148>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a31      	ldr	r2, [pc, #196]	; (8006b80 <HAL_TIM_PWM_Start+0x208>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIM_PWM_Start+0x14c>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_TIM_PWM_Start+0x14e>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <HAL_TIM_PWM_Start+0x1f4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d01d      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aec:	d018      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a24      	ldr	r2, [pc, #144]	; (8006b84 <HAL_TIM_PWM_Start+0x20c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d013      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a22      	ldr	r2, [pc, #136]	; (8006b88 <HAL_TIM_PWM_Start+0x210>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_TIM_PWM_Start+0x1f8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <HAL_TIM_PWM_Start+0x1fc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x1a8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a19      	ldr	r2, [pc, #100]	; (8006b80 <HAL_TIM_PWM_Start+0x208>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d115      	bne.n	8006b4c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	4b19      	ldr	r3, [pc, #100]	; (8006b8c <HAL_TIM_PWM_Start+0x214>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d015      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x1e6>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b38:	d011      	beq.n	8006b5e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 0201 	orr.w	r2, r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	e008      	b.n	8006b5e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e000      	b.n	8006b60 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800
 8006b80:	40015000 	.word	0x40015000
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	00010007 	.word	0x00010007

08006b90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 fad4 	bl	8008150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a40      	ldr	r2, [pc, #256]	; (8006cb0 <HAL_TIM_PWM_Stop+0x120>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_PWM_Stop+0x54>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a3f      	ldr	r2, [pc, #252]	; (8006cb4 <HAL_TIM_PWM_Stop+0x124>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_PWM_Stop+0x54>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a3d      	ldr	r2, [pc, #244]	; (8006cb8 <HAL_TIM_PWM_Stop+0x128>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_PWM_Stop+0x54>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a3c      	ldr	r2, [pc, #240]	; (8006cbc <HAL_TIM_PWM_Stop+0x12c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_PWM_Stop+0x54>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a3a      	ldr	r2, [pc, #232]	; (8006cc0 <HAL_TIM_PWM_Stop+0x130>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_PWM_Stop+0x54>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a39      	ldr	r2, [pc, #228]	; (8006cc4 <HAL_TIM_PWM_Stop+0x134>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d101      	bne.n	8006be8 <HAL_TIM_PWM_Stop+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_TIM_PWM_Stop+0x5a>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d017      	beq.n	8006c1e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <HAL_TIM_PWM_Stop+0x8e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	f244 4344 	movw	r3, #17476	; 0x4444
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_PWM_Stop+0x8e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c28:	4013      	ands	r3, r2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10f      	bne.n	8006c4e <HAL_TIM_PWM_Stop+0xbe>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	f244 4344 	movw	r3, #17476	; 0x4444
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_PWM_Stop+0xbe>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Stop+0xce>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c5c:	e023      	b.n	8006ca6 <HAL_TIM_PWM_Stop+0x116>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Stop+0xde>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c6c:	e01b      	b.n	8006ca6 <HAL_TIM_PWM_Stop+0x116>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Stop+0xee>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_PWM_Stop+0x116>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Stop+0xfe>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_PWM_Stop+0x116>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Stop+0x10e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_PWM_Stop+0x116>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800
 8006cc4:	40015000 	.word	0x40015000

08006cc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e049      	b.n	8006d6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f841 	bl	8006d76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f000 fc9a 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d122      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d11b      	bne.n	8006de6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f06f 0202 	mvn.w	r2, #2
 8006db6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc19 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 8006dd2:	e005      	b.n	8006de0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc0b 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc1c 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d122      	bne.n	8006e3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d11b      	bne.n	8006e3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0204 	mvn.w	r2, #4
 8006e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fbef 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 8006e26:	e005      	b.n	8006e34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fbe1 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fbf2 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d122      	bne.n	8006e8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d11b      	bne.n	8006e8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f06f 0208 	mvn.w	r2, #8
 8006e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbc5 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 8006e7a:	e005      	b.n	8006e88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fbb7 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fbc8 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d122      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f06f 0210 	mvn.w	r2, #16
 8006eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fb9b 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 8006ece:	e005      	b.n	8006edc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fb8d 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fb9e 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10e      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0201 	mvn.w	r2, #1
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fa ff79 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d10e      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b80      	cmp	r3, #128	; 0x80
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 fb93 	bl	8008660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f48:	d10e      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	2b80      	cmp	r3, #128	; 0x80
 8006f56:	d107      	bne.n	8006f68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fb86 	bl	8008674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d10e      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb4c 	bl	800762c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d107      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0220 	mvn.w	r2, #32
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fb46 	bl	800864c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fce:	d10f      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fde:	d107      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 fb4c 	bl	8008688 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ffe:	d10f      	bne.n	8007020 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800700a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fb3e 	bl	800869c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800702a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702e:	d10f      	bne.n	8007050 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800703e:	d107      	bne.n	8007050 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fb30 	bl	80086b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800705a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705e:	d10f      	bne.n	8007080 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800706a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706e:	d107      	bne.n	8007080 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fb22 	bl	80086c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e088      	b.n	80071b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11b      	bne.n	80070ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f000 fe84 	bl	8007dd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 020c 	bic.w	r2, r2, #12
 80070d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6999      	ldr	r1, [r3, #24]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	619a      	str	r2, [r3, #24]
 80070ea:	e060      	b.n	80071ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d11c      	bne.n	800712c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f000 ff02 	bl	8007f0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007114:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6999      	ldr	r1, [r3, #24]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	021a      	lsls	r2, r3, #8
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	619a      	str	r2, [r3, #24]
 800712a:	e040      	b.n	80071ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b08      	cmp	r3, #8
 8007130:	d11b      	bne.n	800716a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6819      	ldr	r1, [r3, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f000 ff4f 	bl	8007fe4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 020c 	bic.w	r2, r2, #12
 8007154:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69d9      	ldr	r1, [r3, #28]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	61da      	str	r2, [r3, #28]
 8007168:	e021      	b.n	80071ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b0c      	cmp	r3, #12
 800716e:	d11c      	bne.n	80071aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6819      	ldr	r1, [r3, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f000 ff6c 	bl	800805c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69da      	ldr	r2, [r3, #28]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007192:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69d9      	ldr	r1, [r3, #28]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	021a      	lsls	r2, r3, #8
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	61da      	str	r2, [r3, #28]
 80071a8:	e001      	b.n	80071ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0ff      	b.n	80073de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b14      	cmp	r3, #20
 80071ea:	f200 80f0 	bhi.w	80073ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080073cf 	.word	0x080073cf
 80071fc:	080073cf 	.word	0x080073cf
 8007200:	080073cf 	.word	0x080073cf
 8007204:	08007289 	.word	0x08007289
 8007208:	080073cf 	.word	0x080073cf
 800720c:	080073cf 	.word	0x080073cf
 8007210:	080073cf 	.word	0x080073cf
 8007214:	080072cb 	.word	0x080072cb
 8007218:	080073cf 	.word	0x080073cf
 800721c:	080073cf 	.word	0x080073cf
 8007220:	080073cf 	.word	0x080073cf
 8007224:	0800730b 	.word	0x0800730b
 8007228:	080073cf 	.word	0x080073cf
 800722c:	080073cf 	.word	0x080073cf
 8007230:	080073cf 	.word	0x080073cf
 8007234:	0800734d 	.word	0x0800734d
 8007238:	080073cf 	.word	0x080073cf
 800723c:	080073cf 	.word	0x080073cf
 8007240:	080073cf 	.word	0x080073cf
 8007244:	0800738d 	.word	0x0800738d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fa94 	bl	800777c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e0a5      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fb0e 	bl	80078b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e084      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb81 	bl	80079d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e064      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fbf3 	bl	8007afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e043      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fc66 	bl	8007c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0208 	orr.w	r2, r2, #8
 8007366:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0204 	bic.w	r2, r2, #4
 8007376:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800738a:	e023      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fcb0 	bl	8007cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	021a      	lsls	r2, r3, #8
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80073cc:	e002      	b.n	80073d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
      break;
 80073d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop

080073e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_ConfigClockSource+0x1c>
 8007400:	2302      	movs	r3, #2
 8007402:	e0e6      	b.n	80075d2 <HAL_TIM_ConfigClockSource+0x1ea>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a67      	ldr	r2, [pc, #412]	; (80075dc <HAL_TIM_ConfigClockSource+0x1f4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f000 80b1 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007444:	4a65      	ldr	r2, [pc, #404]	; (80075dc <HAL_TIM_ConfigClockSource+0x1f4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	f200 80b6 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800744c:	4a64      	ldr	r2, [pc, #400]	; (80075e0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	f000 80a9 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007454:	4a62      	ldr	r2, [pc, #392]	; (80075e0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	f200 80ae 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800745c:	4a61      	ldr	r2, [pc, #388]	; (80075e4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f000 80a1 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007464:	4a5f      	ldr	r2, [pc, #380]	; (80075e4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	f200 80a6 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800746c:	4a5e      	ldr	r2, [pc, #376]	; (80075e8 <HAL_TIM_ConfigClockSource+0x200>)
 800746e:	4293      	cmp	r3, r2
 8007470:	f000 8099 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007474:	4a5c      	ldr	r2, [pc, #368]	; (80075e8 <HAL_TIM_ConfigClockSource+0x200>)
 8007476:	4293      	cmp	r3, r2
 8007478:	f200 809e 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800747c:	4a5b      	ldr	r2, [pc, #364]	; (80075ec <HAL_TIM_ConfigClockSource+0x204>)
 800747e:	4293      	cmp	r3, r2
 8007480:	f000 8091 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007484:	4a59      	ldr	r2, [pc, #356]	; (80075ec <HAL_TIM_ConfigClockSource+0x204>)
 8007486:	4293      	cmp	r3, r2
 8007488:	f200 8096 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800748c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007490:	f000 8089 	beq.w	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 8007494:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007498:	f200 808e 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 800749c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a0:	d03e      	beq.n	8007520 <HAL_TIM_ConfigClockSource+0x138>
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	f200 8087 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	f000 8086 	beq.w	80075be <HAL_TIM_ConfigClockSource+0x1d6>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	d87f      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074b8:	2b70      	cmp	r3, #112	; 0x70
 80074ba:	d01a      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0x10a>
 80074bc:	2b70      	cmp	r3, #112	; 0x70
 80074be:	d87b      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d050      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x17e>
 80074c4:	2b60      	cmp	r3, #96	; 0x60
 80074c6:	d877      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d03c      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15e>
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d873      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d058      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x19e>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d86f      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074d8:	2b30      	cmp	r3, #48	; 0x30
 80074da:	d064      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d86b      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d060      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d867      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d05c      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d05a      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x1be>
 80074f0:	e062      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6899      	ldr	r1, [r3, #8]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f000 fe05 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	609a      	str	r2, [r3, #8]
      break;
 800751e:	e04f      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6899      	ldr	r1, [r3, #8]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f000 fdee 	bl	8008110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007542:	609a      	str	r2, [r3, #8]
      break;
 8007544:	e03c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	f000 fcaa 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2150      	movs	r1, #80	; 0x50
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fdb9 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007564:	e02c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	461a      	mov	r2, r3
 8007574:	f000 fd06 	bl	8007f84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2160      	movs	r1, #96	; 0x60
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fda9 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 8007584:	e01c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	461a      	mov	r2, r3
 8007594:	f000 fc8a 	bl	8007eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fd99 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 80075a4:	e00c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f000 fd90 	bl	80080d6 <TIM_ITRx_SetConfig>
      break;
 80075b6:	e003      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
      break;
 80075bc:	e000      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80075be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	00100070 	.word	0x00100070
 80075e0:	00100050 	.word	0x00100050
 80075e4:	00100040 	.word	0x00100040
 80075e8:	00100030 	.word	0x00100030
 80075ec:	00100020 	.word	0x00100020

080075f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a42      	ldr	r2, [pc, #264]	; (800775c <TIM_Base_SetConfig+0x11c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d00f      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3f      	ldr	r2, [pc, #252]	; (8007760 <TIM_Base_SetConfig+0x120>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00b      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <TIM_Base_SetConfig+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d007      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3d      	ldr	r2, [pc, #244]	; (8007768 <TIM_Base_SetConfig+0x128>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d003      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3c      	ldr	r2, [pc, #240]	; (800776c <TIM_Base_SetConfig+0x12c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d108      	bne.n	8007692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a31      	ldr	r2, [pc, #196]	; (800775c <TIM_Base_SetConfig+0x11c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01f      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d01b      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2e      	ldr	r2, [pc, #184]	; (8007760 <TIM_Base_SetConfig+0x120>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d017      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2d      	ldr	r2, [pc, #180]	; (8007764 <TIM_Base_SetConfig+0x124>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <TIM_Base_SetConfig+0x128>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a2c      	ldr	r2, [pc, #176]	; (8007770 <TIM_Base_SetConfig+0x130>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2b      	ldr	r2, [pc, #172]	; (8007774 <TIM_Base_SetConfig+0x134>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <TIM_Base_SetConfig+0x138>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a25      	ldr	r2, [pc, #148]	; (800776c <TIM_Base_SetConfig+0x12c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a12      	ldr	r2, [pc, #72]	; (800775c <TIM_Base_SetConfig+0x11c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d013      	beq.n	8007740 <TIM_Base_SetConfig+0x100>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a13      	ldr	r2, [pc, #76]	; (8007768 <TIM_Base_SetConfig+0x128>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_Base_SetConfig+0x100>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a13      	ldr	r2, [pc, #76]	; (8007770 <TIM_Base_SetConfig+0x130>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00b      	beq.n	8007740 <TIM_Base_SetConfig+0x100>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <TIM_Base_SetConfig+0x134>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_Base_SetConfig+0x100>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a11      	ldr	r2, [pc, #68]	; (8007778 <TIM_Base_SetConfig+0x138>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_Base_SetConfig+0x100>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a0c      	ldr	r2, [pc, #48]	; (800776c <TIM_Base_SetConfig+0x12c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d103      	bne.n	8007748 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	615a      	str	r2, [r3, #20]
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800
 8007768:	40013400 	.word	0x40013400
 800776c:	40015000 	.word	0x40015000
 8007770:	40014000 	.word	0x40014000
 8007774:	40014400 	.word	0x40014400
 8007778:	40014800 	.word	0x40014800

0800777c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 0302 	bic.w	r3, r3, #2
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a30      	ldr	r2, [pc, #192]	; (8007898 <TIM_OC1_SetConfig+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <TIM_OC1_SetConfig+0x88>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2f      	ldr	r2, [pc, #188]	; (800789c <TIM_OC1_SetConfig+0x120>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_OC1_SetConfig+0x88>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a2e      	ldr	r2, [pc, #184]	; (80078a0 <TIM_OC1_SetConfig+0x124>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC1_SetConfig+0x88>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <TIM_OC1_SetConfig+0x128>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC1_SetConfig+0x88>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a2c      	ldr	r2, [pc, #176]	; (80078a8 <TIM_OC1_SetConfig+0x12c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC1_SetConfig+0x88>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <TIM_OC1_SetConfig+0x130>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d10c      	bne.n	800781e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0308 	bic.w	r3, r3, #8
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f023 0304 	bic.w	r3, r3, #4
 800781c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <TIM_OC1_SetConfig+0x11c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <TIM_OC1_SetConfig+0xd2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a1c      	ldr	r2, [pc, #112]	; (800789c <TIM_OC1_SetConfig+0x120>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00f      	beq.n	800784e <TIM_OC1_SetConfig+0xd2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <TIM_OC1_SetConfig+0x124>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00b      	beq.n	800784e <TIM_OC1_SetConfig+0xd2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <TIM_OC1_SetConfig+0x128>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d007      	beq.n	800784e <TIM_OC1_SetConfig+0xd2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a19      	ldr	r2, [pc, #100]	; (80078a8 <TIM_OC1_SetConfig+0x12c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d003      	beq.n	800784e <TIM_OC1_SetConfig+0xd2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a18      	ldr	r2, [pc, #96]	; (80078ac <TIM_OC1_SetConfig+0x130>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d111      	bne.n	8007872 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800785c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	621a      	str	r2, [r3, #32]
}
 800788c:	bf00      	nop
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40014400 	.word	0x40014400
 80078a8:	40014800 	.word	0x40014800
 80078ac:	40015000 	.word	0x40015000

080078b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f023 0210 	bic.w	r2, r3, #16
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0320 	bic.w	r3, r3, #32
 80078fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a2c      	ldr	r2, [pc, #176]	; (80079c0 <TIM_OC2_SetConfig+0x110>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d007      	beq.n	8007924 <TIM_OC2_SetConfig+0x74>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a2b      	ldr	r2, [pc, #172]	; (80079c4 <TIM_OC2_SetConfig+0x114>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_OC2_SetConfig+0x74>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <TIM_OC2_SetConfig+0x118>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d10d      	bne.n	8007940 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a1f      	ldr	r2, [pc, #124]	; (80079c0 <TIM_OC2_SetConfig+0x110>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <TIM_OC2_SetConfig+0xc0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <TIM_OC2_SetConfig+0x114>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00f      	beq.n	8007970 <TIM_OC2_SetConfig+0xc0>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <TIM_OC2_SetConfig+0x11c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_OC2_SetConfig+0xc0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a1d      	ldr	r2, [pc, #116]	; (80079d0 <TIM_OC2_SetConfig+0x120>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_OC2_SetConfig+0xc0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <TIM_OC2_SetConfig+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_OC2_SetConfig+0xc0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <TIM_OC2_SetConfig+0x118>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d113      	bne.n	8007998 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800797e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4313      	orrs	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40013400 	.word	0x40013400
 80079c8:	40015000 	.word	0x40015000
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800

080079d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0303 	bic.w	r3, r3, #3
 8007a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2b      	ldr	r2, [pc, #172]	; (8007ae4 <TIM_OC3_SetConfig+0x10c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_OC3_SetConfig+0x72>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2a      	ldr	r2, [pc, #168]	; (8007ae8 <TIM_OC3_SetConfig+0x110>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_OC3_SetConfig+0x72>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a29      	ldr	r2, [pc, #164]	; (8007aec <TIM_OC3_SetConfig+0x114>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d10d      	bne.n	8007a66 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a1e      	ldr	r2, [pc, #120]	; (8007ae4 <TIM_OC3_SetConfig+0x10c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <TIM_OC3_SetConfig+0xbe>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <TIM_OC3_SetConfig+0x110>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00f      	beq.n	8007a96 <TIM_OC3_SetConfig+0xbe>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a1d      	ldr	r2, [pc, #116]	; (8007af0 <TIM_OC3_SetConfig+0x118>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <TIM_OC3_SetConfig+0xbe>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a1c      	ldr	r2, [pc, #112]	; (8007af4 <TIM_OC3_SetConfig+0x11c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_OC3_SetConfig+0xbe>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a1b      	ldr	r2, [pc, #108]	; (8007af8 <TIM_OC3_SetConfig+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC3_SetConfig+0xbe>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a16      	ldr	r2, [pc, #88]	; (8007aec <TIM_OC3_SetConfig+0x114>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d113      	bne.n	8007abe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	621a      	str	r2, [r3, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40013400 	.word	0x40013400
 8007aec:	40015000 	.word	0x40015000
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	40014800 	.word	0x40014800

08007afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	031b      	lsls	r3, r3, #12
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <TIM_OC4_SetConfig+0x110>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d007      	beq.n	8007b70 <TIM_OC4_SetConfig+0x74>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a2b      	ldr	r2, [pc, #172]	; (8007c10 <TIM_OC4_SetConfig+0x114>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d003      	beq.n	8007b70 <TIM_OC4_SetConfig+0x74>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <TIM_OC4_SetConfig+0x118>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10d      	bne.n	8007b8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	031b      	lsls	r3, r3, #12
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <TIM_OC4_SetConfig+0x110>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <TIM_OC4_SetConfig+0xc0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <TIM_OC4_SetConfig+0x114>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00f      	beq.n	8007bbc <TIM_OC4_SetConfig+0xc0>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <TIM_OC4_SetConfig+0x11c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_OC4_SetConfig+0xc0>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <TIM_OC4_SetConfig+0x120>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_OC4_SetConfig+0xc0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <TIM_OC4_SetConfig+0x124>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0xc0>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a17      	ldr	r2, [pc, #92]	; (8007c14 <TIM_OC4_SetConfig+0x118>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d113      	bne.n	8007be4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	019b      	lsls	r3, r3, #6
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	019b      	lsls	r3, r3, #6
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	621a      	str	r2, [r3, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40015000 	.word	0x40015000
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40014400 	.word	0x40014400
 8007c20:	40014800 	.word	0x40014800

08007c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <TIM_OC5_SetConfig+0xbc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <TIM_OC5_SetConfig+0x82>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <TIM_OC5_SetConfig+0xc0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00f      	beq.n	8007ca6 <TIM_OC5_SetConfig+0x82>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <TIM_OC5_SetConfig+0xc4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <TIM_OC5_SetConfig+0x82>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <TIM_OC5_SetConfig+0xc8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <TIM_OC5_SetConfig+0x82>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <TIM_OC5_SetConfig+0xcc>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_OC5_SetConfig+0x82>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <TIM_OC5_SetConfig+0xd0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d109      	bne.n	8007cba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	621a      	str	r2, [r3, #32]
}
 8007cd4:	bf00      	nop
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800
 8007cf4:	40015000 	.word	0x40015000

08007cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	051b      	lsls	r3, r3, #20
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <TIM_OC6_SetConfig+0xc0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <TIM_OC6_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <TIM_OC6_SetConfig+0xc4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC6_SetConfig+0x84>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a18      	ldr	r2, [pc, #96]	; (8007dc0 <TIM_OC6_SetConfig+0xc8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC6_SetConfig+0x84>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a17      	ldr	r2, [pc, #92]	; (8007dc4 <TIM_OC6_SetConfig+0xcc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC6_SetConfig+0x84>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <TIM_OC6_SetConfig+0xd0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC6_SetConfig+0x84>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC6_SetConfig+0xd4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d109      	bne.n	8007d90 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	029b      	lsls	r3, r3, #10
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800
 8007dcc:	40015000 	.word	0x40015000

08007dd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4a26      	ldr	r2, [pc, #152]	; (8007e94 <TIM_TI1_SetConfig+0xc4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d017      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e04:	d013      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <TIM_TI1_SetConfig+0xc8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00f      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <TIM_TI1_SetConfig+0xcc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00b      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4a21      	ldr	r2, [pc, #132]	; (8007ea0 <TIM_TI1_SetConfig+0xd0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a20      	ldr	r2, [pc, #128]	; (8007ea4 <TIM_TI1_SetConfig+0xd4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d003      	beq.n	8007e2e <TIM_TI1_SetConfig+0x5e>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <TIM_TI1_SetConfig+0xd8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d101      	bne.n	8007e32 <TIM_TI1_SetConfig+0x62>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <TIM_TI1_SetConfig+0x64>
 8007e32:	2300      	movs	r3, #0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e003      	b.n	8007e52 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	011b      	lsls	r3, r3, #4
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f023 030a 	bic.w	r3, r3, #10
 8007e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f003 030a 	and.w	r3, r3, #10
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40012c00 	.word	0x40012c00
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40013400 	.word	0x40013400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40015000 	.word	0x40015000

08007eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 030a 	bic.w	r3, r3, #10
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f023 0210 	bic.w	r2, r3, #16
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	031b      	lsls	r3, r3, #12
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	621a      	str	r2, [r3, #32]
}
 8007f78:	bf00      	nop
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f023 0210 	bic.w	r2, r3, #16
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	031b      	lsls	r3, r3, #12
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f023 0303 	bic.w	r3, r3, #3
 8008010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008020:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	b2db      	uxtb	r3, r3
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008034:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	621a      	str	r2, [r3, #32]
}
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008088:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	031b      	lsls	r3, r3, #12
 80080b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b085      	sub	sp, #20
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f043 0307 	orr.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800812a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	021a      	lsls	r2, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	431a      	orrs	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	609a      	str	r2, [r3, #8]
}
 8008144:	bf00      	nop
 8008146:	371c      	adds	r7, #28
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2201      	movs	r2, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	43db      	mvns	r3, r3
 8008172:	401a      	ands	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1a      	ldr	r2, [r3, #32]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 031f 	and.w	r3, r3, #31
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	431a      	orrs	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d109      	bne.n	80081c0 <HAL_TIMEx_PWMN_Start+0x24>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	bf14      	ite	ne
 80081b8:	2301      	movne	r3, #1
 80081ba:	2300      	moveq	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	e022      	b.n	8008206 <HAL_TIMEx_PWMN_Start+0x6a>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d109      	bne.n	80081da <HAL_TIMEx_PWMN_Start+0x3e>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	bf14      	ite	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	2300      	moveq	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	e015      	b.n	8008206 <HAL_TIMEx_PWMN_Start+0x6a>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d109      	bne.n	80081f4 <HAL_TIMEx_PWMN_Start+0x58>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	bf14      	ite	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	2300      	moveq	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	e008      	b.n	8008206 <HAL_TIMEx_PWMN_Start+0x6a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e06e      	b.n	80082ec <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_TIMEx_PWMN_Start+0x82>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800821c:	e013      	b.n	8008246 <HAL_TIMEx_PWMN_Start+0xaa>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d104      	bne.n	800822e <HAL_TIMEx_PWMN_Start+0x92>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800822c:	e00b      	b.n	8008246 <HAL_TIMEx_PWMN_Start+0xaa>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d104      	bne.n	800823e <HAL_TIMEx_PWMN_Start+0xa2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800823c:	e003      	b.n	8008246 <HAL_TIMEx_PWMN_Start+0xaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2204      	movs	r2, #4
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa42 	bl	80086d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008262:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a22      	ldr	r2, [pc, #136]	; (80082f4 <HAL_TIMEx_PWMN_Start+0x158>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d01d      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008276:	d018      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a1d      	ldr	r2, [pc, #116]	; (80082fc <HAL_TIMEx_PWMN_Start+0x160>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d00e      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <HAL_TIMEx_PWMN_Start+0x164>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <HAL_TIMEx_PWMN_Start+0x168>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_PWMN_Start+0x10e>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a18      	ldr	r2, [pc, #96]	; (8008308 <HAL_TIMEx_PWMN_Start+0x16c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d115      	bne.n	80082d6 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	4b16      	ldr	r3, [pc, #88]	; (800830c <HAL_TIMEx_PWMN_Start+0x170>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d015      	beq.n	80082e8 <HAL_TIMEx_PWMN_Start+0x14c>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c2:	d011      	beq.n	80082e8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0201 	orr.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d4:	e008      	b.n	80082e8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0201 	orr.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e000      	b.n	80082ea <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40013400 	.word	0x40013400
 8008304:	40014000 	.word	0x40014000
 8008308:	40015000 	.word	0x40015000
 800830c:	00010007 	.word	0x00010007

08008310 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f9d8 	bl	80086d8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6a1a      	ldr	r2, [r3, #32]
 800832e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008332:	4013      	ands	r3, r2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10f      	bne.n	8008358 <HAL_TIMEx_PWMN_Stop+0x48>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a1a      	ldr	r2, [r3, #32]
 800833e:	f244 4344 	movw	r3, #17476	; 0x4444
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d107      	bne.n	8008358 <HAL_TIMEx_PWMN_Stop+0x48>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008362:	4013      	ands	r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10f      	bne.n	8008388 <HAL_TIMEx_PWMN_Stop+0x78>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6a1a      	ldr	r2, [r3, #32]
 800836e:	f244 4344 	movw	r3, #17476	; 0x4444
 8008372:	4013      	ands	r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d107      	bne.n	8008388 <HAL_TIMEx_PWMN_Stop+0x78>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <HAL_TIMEx_PWMN_Stop+0x88>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008396:	e013      	b.n	80083c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b04      	cmp	r3, #4
 800839c:	d104      	bne.n	80083a8 <HAL_TIMEx_PWMN_Stop+0x98>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083a6:	e00b      	b.n	80083c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b08      	cmp	r3, #8
 80083ac:	d104      	bne.n	80083b8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083b6:	e003      	b.n	80083c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e06f      	b.n	80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a31      	ldr	r2, [pc, #196]	; (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a30      	ldr	r2, [pc, #192]	; (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2e      	ldr	r2, [pc, #184]	; (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d108      	bne.n	8008434 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008428:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d01d      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008464:	d018      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1c      	ldr	r2, [pc, #112]	; (80084dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1a      	ldr	r2, [pc, #104]	; (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00e      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d009      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a16      	ldr	r2, [pc, #88]	; (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d004      	beq.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a11      	ldr	r2, [pc, #68]	; (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d10c      	bne.n	80084b2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800849e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	40012c00 	.word	0x40012c00
 80084d4:	40013400 	.word	0x40013400
 80084d8:	40015000 	.word	0x40015000
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40014000 	.word	0x40014000

080084e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008500:	2302      	movs	r3, #2
 8008502:	e096      	b.n	8008632 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2f      	ldr	r2, [pc, #188]	; (8008640 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d009      	beq.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2d      	ldr	r2, [pc, #180]	; (8008644 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d106      	bne.n	80085aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a24      	ldr	r2, [pc, #144]	; (8008640 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a22      	ldr	r2, [pc, #136]	; (8008644 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a21      	ldr	r2, [pc, #132]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d12b      	bne.n	8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	051b      	lsls	r3, r3, #20
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a11      	ldr	r2, [pc, #68]	; (8008640 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a10      	ldr	r2, [pc, #64]	; (8008644 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d106      	bne.n	8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	40012c00 	.word	0x40012c00
 8008644:	40013400 	.word	0x40013400
 8008648:	40015000 	.word	0x40015000

0800864c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	2204      	movs	r2, #4
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a1a      	ldr	r2, [r3, #32]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	43db      	mvns	r3, r3
 80086fa:	401a      	ands	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1a      	ldr	r2, [r3, #32]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e042      	b.n	80087ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7f9 fd00 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	; 0x24
 8008750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f8c3 	bl	80088f0 <UART_SetConfig>
 800876a:	4603      	mov	r3, r0
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e022      	b.n	80087ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fbb3 	bl	8008ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0201 	orr.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc3a 	bl	800902c <UART_CheckIdleState>
 80087b8:	4603      	mov	r3, r0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b08a      	sub	sp, #40	; 0x28
 80087c6:	af02      	add	r7, sp, #8
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f040 8083 	bne.w	80088e4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_UART_Transmit+0x28>
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e07b      	b.n	80088e6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Transmit+0x3a>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e074      	b.n	80088e6 <HAL_UART_Transmit+0x124>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2221      	movs	r2, #33	; 0x21
 8008810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008814:	f7fa f942 	bl	8002a9c <HAL_GetTick>
 8008818:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	88fa      	ldrh	r2, [r7, #6]
 800881e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	88fa      	ldrh	r2, [r7, #6]
 8008826:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008832:	d108      	bne.n	8008846 <HAL_UART_Transmit+0x84>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800883c:	2300      	movs	r3, #0
 800883e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	61bb      	str	r3, [r7, #24]
 8008844:	e003      	b.n	800884e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008856:	e02c      	b.n	80088b2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2200      	movs	r2, #0
 8008860:	2180      	movs	r1, #128	; 0x80
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fc2d 	bl	80090c2 <UART_WaitOnFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e039      	b.n	80088e6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008886:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	3302      	adds	r3, #2
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	e007      	b.n	80088a0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	3301      	adds	r3, #1
 800889e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1cc      	bne.n	8008858 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2200      	movs	r2, #0
 80088c6:	2140      	movs	r1, #64	; 0x40
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fbfa 	bl	80090c2 <UART_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e006      	b.n	80088e6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088f4:	b08c      	sub	sp, #48	; 0x30
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	431a      	orrs	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	431a      	orrs	r2, r3
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	4313      	orrs	r3, r2
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4baa      	ldr	r3, [pc, #680]	; (8008bc8 <UART_SetConfig+0x2d8>)
 8008920:	4013      	ands	r3, r2
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008928:	430b      	orrs	r3, r1
 800892a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a9f      	ldr	r2, [pc, #636]	; (8008bcc <UART_SetConfig+0x2dc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d004      	beq.n	800895c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008958:	4313      	orrs	r3, r2
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008970:	430b      	orrs	r3, r1
 8008972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	f023 010f 	bic.w	r1, r3, #15
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a90      	ldr	r2, [pc, #576]	; (8008bd0 <UART_SetConfig+0x2e0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d125      	bne.n	80089e0 <UART_SetConfig+0xf0>
 8008994:	4b8f      	ldr	r3, [pc, #572]	; (8008bd4 <UART_SetConfig+0x2e4>)
 8008996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d81a      	bhi.n	80089d8 <UART_SetConfig+0xe8>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0xb8>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089c9 	.word	0x080089c9
 80089b0:	080089c1 	.word	0x080089c1
 80089b4:	080089d1 	.word	0x080089d1
 80089b8:	2301      	movs	r3, #1
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089be:	e116      	b.n	8008bee <UART_SetConfig+0x2fe>
 80089c0:	2302      	movs	r3, #2
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089c6:	e112      	b.n	8008bee <UART_SetConfig+0x2fe>
 80089c8:	2304      	movs	r3, #4
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089ce:	e10e      	b.n	8008bee <UART_SetConfig+0x2fe>
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089d6:	e10a      	b.n	8008bee <UART_SetConfig+0x2fe>
 80089d8:	2310      	movs	r3, #16
 80089da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089de:	e106      	b.n	8008bee <UART_SetConfig+0x2fe>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a7c      	ldr	r2, [pc, #496]	; (8008bd8 <UART_SetConfig+0x2e8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d138      	bne.n	8008a5c <UART_SetConfig+0x16c>
 80089ea:	4b7a      	ldr	r3, [pc, #488]	; (8008bd4 <UART_SetConfig+0x2e4>)
 80089ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f0:	f003 030c 	and.w	r3, r3, #12
 80089f4:	2b0c      	cmp	r3, #12
 80089f6:	d82d      	bhi.n	8008a54 <UART_SetConfig+0x164>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <UART_SetConfig+0x110>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a35 	.word	0x08008a35
 8008a04:	08008a55 	.word	0x08008a55
 8008a08:	08008a55 	.word	0x08008a55
 8008a0c:	08008a55 	.word	0x08008a55
 8008a10:	08008a45 	.word	0x08008a45
 8008a14:	08008a55 	.word	0x08008a55
 8008a18:	08008a55 	.word	0x08008a55
 8008a1c:	08008a55 	.word	0x08008a55
 8008a20:	08008a3d 	.word	0x08008a3d
 8008a24:	08008a55 	.word	0x08008a55
 8008a28:	08008a55 	.word	0x08008a55
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a4d 	.word	0x08008a4d
 8008a34:	2300      	movs	r3, #0
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a3a:	e0d8      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a42:	e0d4      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a44:	2304      	movs	r3, #4
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a4a:	e0d0      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a52:	e0cc      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a54:	2310      	movs	r3, #16
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a5a:	e0c8      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a5e      	ldr	r2, [pc, #376]	; (8008bdc <UART_SetConfig+0x2ec>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d125      	bne.n	8008ab2 <UART_SetConfig+0x1c2>
 8008a66:	4b5b      	ldr	r3, [pc, #364]	; (8008bd4 <UART_SetConfig+0x2e4>)
 8008a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a70:	2b30      	cmp	r3, #48	; 0x30
 8008a72:	d016      	beq.n	8008aa2 <UART_SetConfig+0x1b2>
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d818      	bhi.n	8008aaa <UART_SetConfig+0x1ba>
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d00a      	beq.n	8008a92 <UART_SetConfig+0x1a2>
 8008a7c:	2b20      	cmp	r3, #32
 8008a7e:	d814      	bhi.n	8008aaa <UART_SetConfig+0x1ba>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <UART_SetConfig+0x19a>
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d008      	beq.n	8008a9a <UART_SetConfig+0x1aa>
 8008a88:	e00f      	b.n	8008aaa <UART_SetConfig+0x1ba>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a90:	e0ad      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a92:	2302      	movs	r3, #2
 8008a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a98:	e0a9      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa0:	e0a5      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa8:	e0a1      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008aaa:	2310      	movs	r3, #16
 8008aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ab0:	e09d      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a4a      	ldr	r2, [pc, #296]	; (8008be0 <UART_SetConfig+0x2f0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d125      	bne.n	8008b08 <UART_SetConfig+0x218>
 8008abc:	4b45      	ldr	r3, [pc, #276]	; (8008bd4 <UART_SetConfig+0x2e4>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ac8:	d016      	beq.n	8008af8 <UART_SetConfig+0x208>
 8008aca:	2bc0      	cmp	r3, #192	; 0xc0
 8008acc:	d818      	bhi.n	8008b00 <UART_SetConfig+0x210>
 8008ace:	2b80      	cmp	r3, #128	; 0x80
 8008ad0:	d00a      	beq.n	8008ae8 <UART_SetConfig+0x1f8>
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d814      	bhi.n	8008b00 <UART_SetConfig+0x210>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <UART_SetConfig+0x1f0>
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d008      	beq.n	8008af0 <UART_SetConfig+0x200>
 8008ade:	e00f      	b.n	8008b00 <UART_SetConfig+0x210>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae6:	e082      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aee:	e07e      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af6:	e07a      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008afe:	e076      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b06:	e072      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a35      	ldr	r2, [pc, #212]	; (8008be4 <UART_SetConfig+0x2f4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d12a      	bne.n	8008b68 <UART_SetConfig+0x278>
 8008b12:	4b30      	ldr	r3, [pc, #192]	; (8008bd4 <UART_SetConfig+0x2e4>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b20:	d01a      	beq.n	8008b58 <UART_SetConfig+0x268>
 8008b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b26:	d81b      	bhi.n	8008b60 <UART_SetConfig+0x270>
 8008b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2c:	d00c      	beq.n	8008b48 <UART_SetConfig+0x258>
 8008b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b32:	d815      	bhi.n	8008b60 <UART_SetConfig+0x270>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <UART_SetConfig+0x250>
 8008b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3c:	d008      	beq.n	8008b50 <UART_SetConfig+0x260>
 8008b3e:	e00f      	b.n	8008b60 <UART_SetConfig+0x270>
 8008b40:	2300      	movs	r3, #0
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b46:	e052      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4e:	e04e      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b56:	e04a      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b5e:	e046      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b66:	e042      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a17      	ldr	r2, [pc, #92]	; (8008bcc <UART_SetConfig+0x2dc>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d13a      	bne.n	8008be8 <UART_SetConfig+0x2f8>
 8008b72:	4b18      	ldr	r3, [pc, #96]	; (8008bd4 <UART_SetConfig+0x2e4>)
 8008b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b80:	d01a      	beq.n	8008bb8 <UART_SetConfig+0x2c8>
 8008b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b86:	d81b      	bhi.n	8008bc0 <UART_SetConfig+0x2d0>
 8008b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b8c:	d00c      	beq.n	8008ba8 <UART_SetConfig+0x2b8>
 8008b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b92:	d815      	bhi.n	8008bc0 <UART_SetConfig+0x2d0>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <UART_SetConfig+0x2b0>
 8008b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9c:	d008      	beq.n	8008bb0 <UART_SetConfig+0x2c0>
 8008b9e:	e00f      	b.n	8008bc0 <UART_SetConfig+0x2d0>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba6:	e022      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bae:	e01e      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	e01a      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bbe:	e016      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bc6:	e012      	b.n	8008bee <UART_SetConfig+0x2fe>
 8008bc8:	cfff69f3 	.word	0xcfff69f3
 8008bcc:	40008000 	.word	0x40008000
 8008bd0:	40013800 	.word	0x40013800
 8008bd4:	40021000 	.word	0x40021000
 8008bd8:	40004400 	.word	0x40004400
 8008bdc:	40004800 	.word	0x40004800
 8008be0:	40004c00 	.word	0x40004c00
 8008be4:	40005000 	.word	0x40005000
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4aae      	ldr	r2, [pc, #696]	; (8008eac <UART_SetConfig+0x5bc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	f040 8097 	bne.w	8008d28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bfe:	2b08      	cmp	r3, #8
 8008c00:	d823      	bhi.n	8008c4a <UART_SetConfig+0x35a>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x318>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c4b 	.word	0x08008c4b
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c4b 	.word	0x08008c4b
 8008c18:	08008c3b 	.word	0x08008c3b
 8008c1c:	08008c4b 	.word	0x08008c4b
 8008c20:	08008c4b 	.word	0x08008c4b
 8008c24:	08008c4b 	.word	0x08008c4b
 8008c28:	08008c43 	.word	0x08008c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c2c:	f7fd f9fc 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8008c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c32:	e010      	b.n	8008c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b9e      	ldr	r3, [pc, #632]	; (8008eb0 <UART_SetConfig+0x5c0>)
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c38:	e00d      	b.n	8008c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c3a:	f7fd f989 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8008c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c40:	e009      	b.n	8008c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c48:	e005      	b.n	8008c56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8130 	beq.w	8008ebe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	4a94      	ldr	r2, [pc, #592]	; (8008eb4 <UART_SetConfig+0x5c4>)
 8008c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4413      	add	r3, r2
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d305      	bcc.n	8008c8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d903      	bls.n	8008c96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008c94:	e113      	b.n	8008ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	2200      	movs	r2, #0
 8008c9a:	60bb      	str	r3, [r7, #8]
 8008c9c:	60fa      	str	r2, [r7, #12]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	4a84      	ldr	r2, [pc, #528]	; (8008eb4 <UART_SetConfig+0x5c4>)
 8008ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2200      	movs	r2, #0
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cb8:	f7f7 fb0a 	bl	80002d0 <__aeabi_uldivmod>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	020b      	lsls	r3, r1, #8
 8008cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cd2:	0202      	lsls	r2, r0, #8
 8008cd4:	6979      	ldr	r1, [r7, #20]
 8008cd6:	6849      	ldr	r1, [r1, #4]
 8008cd8:	0849      	lsrs	r1, r1, #1
 8008cda:	2000      	movs	r0, #0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4605      	mov	r5, r0
 8008ce0:	eb12 0804 	adds.w	r8, r2, r4
 8008ce4:	eb43 0905 	adc.w	r9, r3, r5
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	469a      	mov	sl, r3
 8008cf0:	4693      	mov	fp, r2
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	f7f7 fae9 	bl	80002d0 <__aeabi_uldivmod>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4613      	mov	r3, r2
 8008d04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d0c:	d308      	bcc.n	8008d20 <UART_SetConfig+0x430>
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d14:	d204      	bcs.n	8008d20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6a3a      	ldr	r2, [r7, #32]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	e0ce      	b.n	8008ebe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d26:	e0ca      	b.n	8008ebe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d30:	d166      	bne.n	8008e00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d36:	2b08      	cmp	r3, #8
 8008d38:	d827      	bhi.n	8008d8a <UART_SetConfig+0x49a>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0x450>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	08008d8b 	.word	0x08008d8b
 8008d50:	08008d7b 	.word	0x08008d7b
 8008d54:	08008d8b 	.word	0x08008d8b
 8008d58:	08008d8b 	.word	0x08008d8b
 8008d5c:	08008d8b 	.word	0x08008d8b
 8008d60:	08008d83 	.word	0x08008d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d64:	f7fd f960 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d6a:	e014      	b.n	8008d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d6c:	f7fd f972 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d72:	e010      	b.n	8008d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d74:	4b4e      	ldr	r3, [pc, #312]	; (8008eb0 <UART_SetConfig+0x5c0>)
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d78:	e00d      	b.n	8008d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d7a:	f7fd f8e9 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8008d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d80:	e009      	b.n	8008d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d88:	e005      	b.n	8008d96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8090 	beq.w	8008ebe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	4a44      	ldr	r2, [pc, #272]	; (8008eb4 <UART_SetConfig+0x5c4>)
 8008da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db0:	005a      	lsls	r2, r3, #1
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	441a      	add	r2, r3
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d916      	bls.n	8008df8 <UART_SetConfig+0x508>
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd0:	d212      	bcs.n	8008df8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f023 030f 	bic.w	r3, r3, #15
 8008dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	8bfb      	ldrh	r3, [r7, #30]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	8bfa      	ldrh	r2, [r7, #30]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e062      	b.n	8008ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dfe:	e05e      	b.n	8008ebe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d828      	bhi.n	8008e5a <UART_SetConfig+0x56a>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <UART_SetConfig+0x520>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e35 	.word	0x08008e35
 8008e14:	08008e3d 	.word	0x08008e3d
 8008e18:	08008e45 	.word	0x08008e45
 8008e1c:	08008e5b 	.word	0x08008e5b
 8008e20:	08008e4b 	.word	0x08008e4b
 8008e24:	08008e5b 	.word	0x08008e5b
 8008e28:	08008e5b 	.word	0x08008e5b
 8008e2c:	08008e5b 	.word	0x08008e5b
 8008e30:	08008e53 	.word	0x08008e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e34:	f7fd f8f8 	bl	8006028 <HAL_RCC_GetPCLK1Freq>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e3a:	e014      	b.n	8008e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e3c:	f7fd f90a 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e42:	e010      	b.n	8008e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e44:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <UART_SetConfig+0x5c0>)
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e48:	e00d      	b.n	8008e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e4a:	f7fd f881 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e50:	e009      	b.n	8008e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e58:	e005      	b.n	8008e66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e64:	bf00      	nop
    }

    if (pclk != 0U)
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d028      	beq.n	8008ebe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <UART_SetConfig+0x5c4>)
 8008e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	441a      	add	r2, r3
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	2b0f      	cmp	r3, #15
 8008e94:	d910      	bls.n	8008eb8 <UART_SetConfig+0x5c8>
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e9c:	d20c      	bcs.n	8008eb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60da      	str	r2, [r3, #12]
 8008ea8:	e009      	b.n	8008ebe <UART_SetConfig+0x5ce>
 8008eaa:	bf00      	nop
 8008eac:	40008000 	.word	0x40008000
 8008eb0:	00f42400 	.word	0x00f42400
 8008eb4:	0800befc 	.word	0x0800befc
      }
      else
      {
        ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008eda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3730      	adds	r7, #48	; 0x30
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	f003 0310 	and.w	r3, r3, #16
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d01a      	beq.n	8008ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe6:	d10a      	bne.n	8008ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	605a      	str	r2, [r3, #4]
  }
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af02      	add	r7, sp, #8
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800903c:	f7f9 fd2e 	bl	8002a9c <HAL_GetTick>
 8009040:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b08      	cmp	r3, #8
 800904e:	d10e      	bne.n	800906e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f82f 	bl	80090c2 <UART_WaitOnFlagUntilTimeout>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e025      	b.n	80090ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b04      	cmp	r3, #4
 800907a:	d10e      	bne.n	800909a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800907c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f819 	bl	80090c2 <UART_WaitOnFlagUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e00f      	b.n	80090ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b09c      	sub	sp, #112	; 0x70
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	603b      	str	r3, [r7, #0]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d2:	e0a9      	b.n	8009228 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	f000 80a5 	beq.w	8009228 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090de:	f7f9 fcdd 	bl	8002a9c <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d302      	bcc.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80090ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d140      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009108:	667b      	str	r3, [r7, #100]	; 0x64
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009114:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e6      	bne.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3308      	adds	r3, #8
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	663b      	str	r3, [r7, #96]	; 0x60
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009146:	64ba      	str	r2, [r7, #72]	; 0x48
 8009148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800914c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e5      	bne.n	8009126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e069      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d051      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800918e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009192:	d149      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800919c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	637b      	str	r3, [r7, #52]	; 0x34
 80091be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e6      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3308      	adds	r3, #8
 80091d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	613b      	str	r3, [r7, #16]
   return(result);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3308      	adds	r3, #8
 80091ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091f0:	623a      	str	r2, [r7, #32]
 80091f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	69f9      	ldr	r1, [r7, #28]
 80091f6:	6a3a      	ldr	r2, [r7, #32]
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e010      	b.n	800924a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69da      	ldr	r2, [r3, #28]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4013      	ands	r3, r2
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	429a      	cmp	r2, r3
 8009236:	bf0c      	ite	eq
 8009238:	2301      	moveq	r3, #1
 800923a:	2300      	movne	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	429a      	cmp	r2, r3
 8009244:	f43f af46 	beq.w	80090d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3770      	adds	r7, #112	; 0x70
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_UARTEx_DisableFifoMode+0x16>
 8009264:	2302      	movs	r3, #2
 8009266:	e027      	b.n	80092b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2224      	movs	r2, #36	; 0x24
 8009274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009296:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092d8:	2302      	movs	r3, #2
 80092da:	e02d      	b.n	8009338 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	; 0x24
 80092e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0201 	bic.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f84f 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009354:	2302      	movs	r3, #2
 8009356:	e02d      	b.n	80093b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2224      	movs	r2, #36	; 0x24
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f811 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d108      	bne.n	80093de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093dc:	e031      	b.n	8009442 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093de:	2308      	movs	r3, #8
 80093e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093e2:	2308      	movs	r3, #8
 80093e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	0e5b      	lsrs	r3, r3, #25
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0307 	and.w	r3, r3, #7
 80093f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	0f5b      	lsrs	r3, r3, #29
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009406:	7bbb      	ldrb	r3, [r7, #14]
 8009408:	7b3a      	ldrb	r2, [r7, #12]
 800940a:	4911      	ldr	r1, [pc, #68]	; (8009450 <UARTEx_SetNbDataToProcess+0x94>)
 800940c:	5c8a      	ldrb	r2, [r1, r2]
 800940e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009412:	7b3a      	ldrb	r2, [r7, #12]
 8009414:	490f      	ldr	r1, [pc, #60]	; (8009454 <UARTEx_SetNbDataToProcess+0x98>)
 8009416:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009418:	fb93 f3f2 	sdiv	r3, r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	7b7a      	ldrb	r2, [r7, #13]
 8009428:	4909      	ldr	r1, [pc, #36]	; (8009450 <UARTEx_SetNbDataToProcess+0x94>)
 800942a:	5c8a      	ldrb	r2, [r1, r2]
 800942c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009430:	7b7a      	ldrb	r2, [r7, #13]
 8009432:	4908      	ldr	r1, [pc, #32]	; (8009454 <UARTEx_SetNbDataToProcess+0x98>)
 8009434:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009436:	fb93 f3f2 	sdiv	r3, r3, r2
 800943a:	b29a      	uxth	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	0800bf14 	.word	0x0800bf14
 8009454:	0800bf1c 	.word	0x0800bf1c

08009458 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800946a:	2b84      	cmp	r3, #132	; 0x84
 800946c:	d005      	beq.n	800947a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800946e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	3303      	adds	r3, #3
 8009478:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800947a:	68fb      	ldr	r3, [r7, #12]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800948c:	f000 fa70 	bl	8009970 <vTaskStartScheduler>
  
  return osOK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	bd80      	pop	{r7, pc}

08009496 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009498:	b087      	sub	sp, #28
 800949a:	af02      	add	r7, sp, #8
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685c      	ldr	r4, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094ac:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff ffcf 	bl	8009458 <makeFreeRtosPriority>
 80094ba:	4602      	mov	r2, r0
 80094bc:	f107 030c 	add.w	r3, r7, #12
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	9200      	str	r2, [sp, #0]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	4632      	mov	r2, r6
 80094c8:	4629      	mov	r1, r5
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 f8d2 	bl	8009674 <xTaskCreate>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d001      	beq.n	80094da <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <osDelay+0x16>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	e000      	b.n	80094fc <osDelay+0x18>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fa03 	bl	8009908 <vTaskDelay>
  
  return osOK;
 8009502:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 0208 	add.w	r2, r3, #8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f103 0208 	add.w	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f103 0208 	add.w	r2, r3, #8
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d103      	bne.n	80095ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e00c      	b.n	80095e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3308      	adds	r3, #8
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e002      	b.n	80095dc <vListInsert+0x2e>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d2f6      	bcs.n	80095d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6892      	ldr	r2, [r2, #8]
 8009636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6852      	ldr	r2, [r2, #4]
 8009640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08c      	sub	sp, #48	; 0x30
 8009678:	af04      	add	r7, sp, #16
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4618      	mov	r0, r3
 800968a:	f000 ffd5 	bl	800a638 <pvPortMalloc>
 800968e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00e      	beq.n	80096b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009696:	20a0      	movs	r0, #160	; 0xa0
 8009698:	f000 ffce 	bl	800a638 <pvPortMalloc>
 800969c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	631a      	str	r2, [r3, #48]	; 0x30
 80096aa:	e005      	b.n	80096b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096ac:	6978      	ldr	r0, [r7, #20]
 80096ae:	f001 f88f 	bl	800a7d0 <vPortFree>
 80096b2:	e001      	b.n	80096b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d013      	beq.n	80096e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096be:	88fa      	ldrh	r2, [r7, #6]
 80096c0:	2300      	movs	r3, #0
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f80f 	bl	80096f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096da:	69f8      	ldr	r0, [r7, #28]
 80096dc:	f000 f8aa 	bl	8009834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096e0:	2301      	movs	r3, #1
 80096e2:	61bb      	str	r3, [r7, #24]
 80096e4:	e002      	b.n	80096ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096ec:	69bb      	ldr	r3, [r7, #24]
	}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009710:	3b01      	subs	r3, #1
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <prvInitialiseNewTask+0x48>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	617b      	str	r3, [r7, #20]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01f      	beq.n	8009786 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e012      	b.n	8009772 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	7819      	ldrb	r1, [r3, #0]
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	3334      	adds	r3, #52	; 0x34
 800975c:	460a      	mov	r2, r1
 800975e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3301      	adds	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b0f      	cmp	r3, #15
 8009776:	d9e9      	bls.n	800974c <prvInitialiseNewTask+0x54>
 8009778:	e000      	b.n	800977c <prvInitialiseNewTask+0x84>
			{
				break;
 800977a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009784:	e003      	b.n	800978e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	2b06      	cmp	r3, #6
 8009792:	d901      	bls.n	8009798 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009794:	2306      	movs	r3, #6
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fecc 	bl	800954c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	3318      	adds	r3, #24
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff fec7 	bl	800954c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f1c3 0207 	rsb	r2, r3, #7
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	334c      	adds	r3, #76	; 0x4c
 80097e8:	224c      	movs	r2, #76	; 0x4c
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f001 fb12 	bl	800ae16 <memset>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <prvInitialiseNewTask+0x130>)
 80097f6:	651a      	str	r2, [r3, #80]	; 0x50
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <prvInitialiseNewTask+0x134>)
 80097fc:	655a      	str	r2, [r3, #84]	; 0x54
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	4a0b      	ldr	r2, [pc, #44]	; (8009830 <prvInitialiseNewTask+0x138>)
 8009802:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f000 fcc7 	bl	800a19c <pxPortInitialiseStack>
 800980e:	4602      	mov	r2, r0
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009820:	bf00      	nop
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20002e20 	.word	0x20002e20
 800982c:	20002e88 	.word	0x20002e88
 8009830:	20002ef0 	.word	0x20002ef0

08009834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800983c:	f000 fdda 	bl	800a3f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009840:	4b2a      	ldr	r3, [pc, #168]	; (80098ec <prvAddNewTaskToReadyList+0xb8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	4a29      	ldr	r2, [pc, #164]	; (80098ec <prvAddNewTaskToReadyList+0xb8>)
 8009848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800984a:	4b29      	ldr	r3, [pc, #164]	; (80098f0 <prvAddNewTaskToReadyList+0xbc>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009852:	4a27      	ldr	r2, [pc, #156]	; (80098f0 <prvAddNewTaskToReadyList+0xbc>)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009858:	4b24      	ldr	r3, [pc, #144]	; (80098ec <prvAddNewTaskToReadyList+0xb8>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d110      	bne.n	8009882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009860:	f000 fab2 	bl	8009dc8 <prvInitialiseTaskLists>
 8009864:	e00d      	b.n	8009882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009866:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <prvAddNewTaskToReadyList+0xc0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800986e:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <prvAddNewTaskToReadyList+0xbc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	429a      	cmp	r2, r3
 800987a:	d802      	bhi.n	8009882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800987c:	4a1c      	ldr	r2, [pc, #112]	; (80098f0 <prvAddNewTaskToReadyList+0xbc>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009882:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <prvAddNewTaskToReadyList+0xc4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	4a1b      	ldr	r2, [pc, #108]	; (80098f8 <prvAddNewTaskToReadyList+0xc4>)
 800988a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	2201      	movs	r2, #1
 8009892:	409a      	lsls	r2, r3
 8009894:	4b19      	ldr	r3, [pc, #100]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4313      	orrs	r3, r2
 800989a:	4a18      	ldr	r2, [pc, #96]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4a15      	ldr	r2, [pc, #84]	; (8009900 <prvAddNewTaskToReadyList+0xcc>)
 80098ac:	441a      	add	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4619      	mov	r1, r3
 80098b4:	4610      	mov	r0, r2
 80098b6:	f7ff fe56 	bl	8009566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098ba:	f000 fdcb 	bl	800a454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <prvAddNewTaskToReadyList+0xc0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098c6:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <prvAddNewTaskToReadyList+0xbc>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d207      	bcs.n	80098e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098d4:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <prvAddNewTaskToReadyList+0xd0>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	200006b4 	.word	0x200006b4
 80098f0:	200005b4 	.word	0x200005b4
 80098f4:	200006c0 	.word	0x200006c0
 80098f8:	200006d0 	.word	0x200006d0
 80098fc:	200006bc 	.word	0x200006bc
 8009900:	200005b8 	.word	0x200005b8
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d017      	beq.n	800994a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800991a:	4b13      	ldr	r3, [pc, #76]	; (8009968 <vTaskDelay+0x60>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <vTaskDelay+0x30>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009938:	f000 f86a 	bl	8009a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800993c:	2100      	movs	r1, #0
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fbc6 	bl	800a0d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009944:	f000 f872 	bl	8009a2c <xTaskResumeAll>
 8009948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <vTaskDelay+0x64>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200006dc 	.word	0x200006dc
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009976:	4b1e      	ldr	r3, [pc, #120]	; (80099f0 <vTaskStartScheduler+0x80>)
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	2300      	movs	r3, #0
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2300      	movs	r3, #0
 8009980:	2280      	movs	r2, #128	; 0x80
 8009982:	491c      	ldr	r1, [pc, #112]	; (80099f4 <vTaskStartScheduler+0x84>)
 8009984:	481c      	ldr	r0, [pc, #112]	; (80099f8 <vTaskStartScheduler+0x88>)
 8009986:	f7ff fe75 	bl	8009674 <xTaskCreate>
 800998a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d11b      	bne.n	80099ca <vTaskStartScheduler+0x5a>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	60bb      	str	r3, [r7, #8]
}
 80099a4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a6:	4b15      	ldr	r3, [pc, #84]	; (80099fc <vTaskStartScheduler+0x8c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	334c      	adds	r3, #76	; 0x4c
 80099ac:	4a14      	ldr	r2, [pc, #80]	; (8009a00 <vTaskStartScheduler+0x90>)
 80099ae:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099b0:	4b14      	ldr	r3, [pc, #80]	; (8009a04 <vTaskStartScheduler+0x94>)
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099b8:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <vTaskStartScheduler+0x98>)
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <vTaskStartScheduler+0x9c>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099c4:	f000 fc74 	bl	800a2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099c8:	e00e      	b.n	80099e8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d0:	d10a      	bne.n	80099e8 <vTaskStartScheduler+0x78>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	607b      	str	r3, [r7, #4]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <vTaskStartScheduler+0x76>
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	200006d8 	.word	0x200006d8
 80099f4:	0800becc 	.word	0x0800becc
 80099f8:	08009d99 	.word	0x08009d99
 80099fc:	200005b4 	.word	0x200005b4
 8009a00:	2000006c 	.word	0x2000006c
 8009a04:	200006d4 	.word	0x200006d4
 8009a08:	200006c0 	.word	0x200006c0
 8009a0c:	200006b8 	.word	0x200006b8

08009a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <vTaskSuspendAll+0x18>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a03      	ldr	r2, [pc, #12]	; (8009a28 <vTaskSuspendAll+0x18>)
 8009a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a1e:	bf00      	nop
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	200006dc 	.word	0x200006dc

08009a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a3a:	4b41      	ldr	r3, [pc, #260]	; (8009b40 <xTaskResumeAll+0x114>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	603b      	str	r3, [r7, #0]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a58:	f000 fccc 	bl	800a3f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a5c:	4b38      	ldr	r3, [pc, #224]	; (8009b40 <xTaskResumeAll+0x114>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	4a37      	ldr	r2, [pc, #220]	; (8009b40 <xTaskResumeAll+0x114>)
 8009a64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a66:	4b36      	ldr	r3, [pc, #216]	; (8009b40 <xTaskResumeAll+0x114>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d161      	bne.n	8009b32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a6e:	4b35      	ldr	r3, [pc, #212]	; (8009b44 <xTaskResumeAll+0x118>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d05d      	beq.n	8009b32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a76:	e02e      	b.n	8009ad6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	4b33      	ldr	r3, [pc, #204]	; (8009b48 <xTaskResumeAll+0x11c>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3318      	adds	r3, #24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fdcb 	bl	8009620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fdc6 	bl	8009620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a98:	2201      	movs	r2, #1
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	4b2b      	ldr	r3, [pc, #172]	; (8009b4c <xTaskResumeAll+0x120>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	4a2a      	ldr	r2, [pc, #168]	; (8009b4c <xTaskResumeAll+0x120>)
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <xTaskResumeAll+0x124>)
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4619      	mov	r1, r3
 8009abc:	4610      	mov	r0, r2
 8009abe:	f7ff fd52 	bl	8009566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac6:	4b23      	ldr	r3, [pc, #140]	; (8009b54 <xTaskResumeAll+0x128>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d302      	bcc.n	8009ad6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009ad0:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <xTaskResumeAll+0x12c>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ad6:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <xTaskResumeAll+0x11c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1cc      	bne.n	8009a78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ae4:	f000 f9f4 	bl	8009ed0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ae8:	4b1c      	ldr	r3, [pc, #112]	; (8009b5c <xTaskResumeAll+0x130>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d010      	beq.n	8009b16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009af4:	f000 f836 	bl	8009b64 <xTaskIncrementTick>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009afe:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <xTaskResumeAll+0x12c>)
 8009b00:	2201      	movs	r2, #1
 8009b02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f1      	bne.n	8009af4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009b10:	4b12      	ldr	r3, [pc, #72]	; (8009b5c <xTaskResumeAll+0x130>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b16:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <xTaskResumeAll+0x12c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d009      	beq.n	8009b32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <xTaskResumeAll+0x134>)
 8009b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b32:	f000 fc8f 	bl	800a454 <vPortExitCritical>

	return xAlreadyYielded;
 8009b36:	68bb      	ldr	r3, [r7, #8]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	200006dc 	.word	0x200006dc
 8009b44:	200006b4 	.word	0x200006b4
 8009b48:	20000674 	.word	0x20000674
 8009b4c:	200006bc 	.word	0x200006bc
 8009b50:	200005b8 	.word	0x200005b8
 8009b54:	200005b4 	.word	0x200005b4
 8009b58:	200006c8 	.word	0x200006c8
 8009b5c:	200006c4 	.word	0x200006c4
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b6e:	4b4e      	ldr	r3, [pc, #312]	; (8009ca8 <xTaskIncrementTick+0x144>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 808e 	bne.w	8009c94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b78:	4b4c      	ldr	r3, [pc, #304]	; (8009cac <xTaskIncrementTick+0x148>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b80:	4a4a      	ldr	r2, [pc, #296]	; (8009cac <xTaskIncrementTick+0x148>)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d120      	bne.n	8009bce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b8c:	4b48      	ldr	r3, [pc, #288]	; (8009cb0 <xTaskIncrementTick+0x14c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <xTaskIncrementTick+0x48>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	603b      	str	r3, [r7, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <xTaskIncrementTick+0x46>
 8009bac:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <xTaskIncrementTick+0x14c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	4b40      	ldr	r3, [pc, #256]	; (8009cb4 <xTaskIncrementTick+0x150>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a3e      	ldr	r2, [pc, #248]	; (8009cb0 <xTaskIncrementTick+0x14c>)
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	4a3e      	ldr	r2, [pc, #248]	; (8009cb4 <xTaskIncrementTick+0x150>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	4b3d      	ldr	r3, [pc, #244]	; (8009cb8 <xTaskIncrementTick+0x154>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	4a3c      	ldr	r2, [pc, #240]	; (8009cb8 <xTaskIncrementTick+0x154>)
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	f000 f981 	bl	8009ed0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bce:	4b3b      	ldr	r3, [pc, #236]	; (8009cbc <xTaskIncrementTick+0x158>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d348      	bcc.n	8009c6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bd8:	4b35      	ldr	r3, [pc, #212]	; (8009cb0 <xTaskIncrementTick+0x14c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d104      	bne.n	8009bec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be2:	4b36      	ldr	r3, [pc, #216]	; (8009cbc <xTaskIncrementTick+0x158>)
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295
 8009be8:	601a      	str	r2, [r3, #0]
					break;
 8009bea:	e03e      	b.n	8009c6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bec:	4b30      	ldr	r3, [pc, #192]	; (8009cb0 <xTaskIncrementTick+0x14c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d203      	bcs.n	8009c0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c04:	4a2d      	ldr	r2, [pc, #180]	; (8009cbc <xTaskIncrementTick+0x158>)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c0a:	e02e      	b.n	8009c6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fd05 	bl	8009620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	3318      	adds	r3, #24
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fcfc 	bl	8009620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	409a      	lsls	r2, r3
 8009c30:	4b23      	ldr	r3, [pc, #140]	; (8009cc0 <xTaskIncrementTick+0x15c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	4a22      	ldr	r2, [pc, #136]	; (8009cc0 <xTaskIncrementTick+0x15c>)
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4a1f      	ldr	r2, [pc, #124]	; (8009cc4 <xTaskIncrementTick+0x160>)
 8009c48:	441a      	add	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4610      	mov	r0, r2
 8009c52:	f7ff fc88 	bl	8009566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5a:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <xTaskIncrementTick+0x164>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3b9      	bcc.n	8009bd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c68:	e7b6      	b.n	8009bd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c6a:	4b17      	ldr	r3, [pc, #92]	; (8009cc8 <xTaskIncrementTick+0x164>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c70:	4914      	ldr	r1, [pc, #80]	; (8009cc4 <xTaskIncrementTick+0x160>)
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d901      	bls.n	8009c86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009c82:	2301      	movs	r3, #1
 8009c84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c86:	4b11      	ldr	r3, [pc, #68]	; (8009ccc <xTaskIncrementTick+0x168>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	e004      	b.n	8009c9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c94:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <xTaskIncrementTick+0x16c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	4a0d      	ldr	r2, [pc, #52]	; (8009cd0 <xTaskIncrementTick+0x16c>)
 8009c9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c9e:	697b      	ldr	r3, [r7, #20]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	200006dc 	.word	0x200006dc
 8009cac:	200006b8 	.word	0x200006b8
 8009cb0:	2000066c 	.word	0x2000066c
 8009cb4:	20000670 	.word	0x20000670
 8009cb8:	200006cc 	.word	0x200006cc
 8009cbc:	200006d4 	.word	0x200006d4
 8009cc0:	200006bc 	.word	0x200006bc
 8009cc4:	200005b8 	.word	0x200005b8
 8009cc8:	200005b4 	.word	0x200005b4
 8009ccc:	200006c8 	.word	0x200006c8
 8009cd0:	200006c4 	.word	0x200006c4

08009cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cda:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <vTaskSwitchContext+0xac>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ce2:	4b28      	ldr	r3, [pc, #160]	; (8009d84 <vTaskSwitchContext+0xb0>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ce8:	e044      	b.n	8009d74 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009cea:	4b26      	ldr	r3, [pc, #152]	; (8009d84 <vTaskSwitchContext+0xb0>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf0:	4b25      	ldr	r3, [pc, #148]	; (8009d88 <vTaskSwitchContext+0xb4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	fab3 f383 	clz	r3, r3
 8009cfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	f1c3 031f 	rsb	r3, r3, #31
 8009d04:	617b      	str	r3, [r7, #20]
 8009d06:	4921      	ldr	r1, [pc, #132]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10a      	bne.n	8009d30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <vTaskSwitchContext+0x5a>
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4a14      	ldr	r2, [pc, #80]	; (8009d8c <vTaskSwitchContext+0xb8>)
 8009d3c:	4413      	add	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	605a      	str	r2, [r3, #4]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3308      	adds	r3, #8
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d104      	bne.n	8009d60 <vTaskSwitchContext+0x8c>
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	605a      	str	r2, [r3, #4]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <vTaskSwitchContext+0xbc>)
 8009d68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d6a:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <vTaskSwitchContext+0xbc>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	334c      	adds	r3, #76	; 0x4c
 8009d70:	4a08      	ldr	r2, [pc, #32]	; (8009d94 <vTaskSwitchContext+0xc0>)
 8009d72:	6013      	str	r3, [r2, #0]
}
 8009d74:	bf00      	nop
 8009d76:	371c      	adds	r7, #28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	200006dc 	.word	0x200006dc
 8009d84:	200006c8 	.word	0x200006c8
 8009d88:	200006bc 	.word	0x200006bc
 8009d8c:	200005b8 	.word	0x200005b8
 8009d90:	200005b4 	.word	0x200005b4
 8009d94:	2000006c 	.word	0x2000006c

08009d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009da0:	f000 f852 	bl	8009e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <prvIdleTask+0x28>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d9f9      	bls.n	8009da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <prvIdleTask+0x2c>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dbc:	e7f0      	b.n	8009da0 <prvIdleTask+0x8>
 8009dbe:	bf00      	nop
 8009dc0:	200005b8 	.word	0x200005b8
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dce:	2300      	movs	r3, #0
 8009dd0:	607b      	str	r3, [r7, #4]
 8009dd2:	e00c      	b.n	8009dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a12      	ldr	r2, [pc, #72]	; (8009e28 <prvInitialiseTaskLists+0x60>)
 8009de0:	4413      	add	r3, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fb92 	bl	800950c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3301      	adds	r3, #1
 8009dec:	607b      	str	r3, [r7, #4]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b06      	cmp	r3, #6
 8009df2:	d9ef      	bls.n	8009dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009df4:	480d      	ldr	r0, [pc, #52]	; (8009e2c <prvInitialiseTaskLists+0x64>)
 8009df6:	f7ff fb89 	bl	800950c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dfa:	480d      	ldr	r0, [pc, #52]	; (8009e30 <prvInitialiseTaskLists+0x68>)
 8009dfc:	f7ff fb86 	bl	800950c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e00:	480c      	ldr	r0, [pc, #48]	; (8009e34 <prvInitialiseTaskLists+0x6c>)
 8009e02:	f7ff fb83 	bl	800950c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e06:	480c      	ldr	r0, [pc, #48]	; (8009e38 <prvInitialiseTaskLists+0x70>)
 8009e08:	f7ff fb80 	bl	800950c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e0c:	480b      	ldr	r0, [pc, #44]	; (8009e3c <prvInitialiseTaskLists+0x74>)
 8009e0e:	f7ff fb7d 	bl	800950c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e12:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <prvInitialiseTaskLists+0x78>)
 8009e14:	4a05      	ldr	r2, [pc, #20]	; (8009e2c <prvInitialiseTaskLists+0x64>)
 8009e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <prvInitialiseTaskLists+0x7c>)
 8009e1a:	4a05      	ldr	r2, [pc, #20]	; (8009e30 <prvInitialiseTaskLists+0x68>)
 8009e1c:	601a      	str	r2, [r3, #0]
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	200005b8 	.word	0x200005b8
 8009e2c:	20000644 	.word	0x20000644
 8009e30:	20000658 	.word	0x20000658
 8009e34:	20000674 	.word	0x20000674
 8009e38:	20000688 	.word	0x20000688
 8009e3c:	200006a0 	.word	0x200006a0
 8009e40:	2000066c 	.word	0x2000066c
 8009e44:	20000670 	.word	0x20000670

08009e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e4e:	e019      	b.n	8009e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e50:	f000 fad0 	bl	800a3f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e54:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <prvCheckTasksWaitingTermination+0x50>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff fbdd 	bl	8009620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <prvCheckTasksWaitingTermination+0x54>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	4a0b      	ldr	r2, [pc, #44]	; (8009e9c <prvCheckTasksWaitingTermination+0x54>)
 8009e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e70:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e7a:	f000 faeb 	bl	800a454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f810 	bl	8009ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <prvCheckTasksWaitingTermination+0x58>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e1      	bne.n	8009e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000688 	.word	0x20000688
 8009e9c:	200006b4 	.word	0x200006b4
 8009ea0:	2000069c 	.word	0x2000069c

08009ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	334c      	adds	r3, #76	; 0x4c
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 ffc9 	bl	800ae48 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fc88 	bl	800a7d0 <vPortFree>
			vPortFree( pxTCB );
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fc85 	bl	800a7d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvResetNextTaskUnblockTime+0x38>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <prvResetNextTaskUnblockTime+0x3c>)
 8009ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ee8:	e008      	b.n	8009efc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <prvResetNextTaskUnblockTime+0x38>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	4a04      	ldr	r2, [pc, #16]	; (8009f0c <prvResetNextTaskUnblockTime+0x3c>)
 8009efa:	6013      	str	r3, [r2, #0]
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	2000066c 	.word	0x2000066c
 8009f0c:	200006d4 	.word	0x200006d4

08009f10 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009f1a:	f000 fa6b 	bl	800a3f4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009f1e:	4b20      	ldr	r3, [pc, #128]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d113      	bne.n	8009f52 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f2a:	4b1d      	ldr	r3, [pc, #116]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00b      	beq.n	8009f52 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	6838      	ldr	r0, [r7, #0]
 8009f3e:	f000 f8c7 	bl	800a0d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f42:	4b18      	ldr	r3, [pc, #96]	; (8009fa4 <ulTaskNotifyTake+0x94>)
 8009f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f52:	f000 fa7f 	bl	800a454 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f56:	f000 fa4d 	bl	800a3f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009f5a:	4b11      	ldr	r3, [pc, #68]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f62:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d005      	beq.n	8009f7c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009f70:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009f7a:	e005      	b.n	8009f88 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009f7c:	4b08      	ldr	r3, [pc, #32]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	3a01      	subs	r2, #1
 8009f84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f88:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <ulTaskNotifyTake+0x90>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8009f92:	f000 fa5f 	bl	800a454 <vPortExitCritical>

		return ulReturn;
 8009f96:	68fb      	ldr	r3, [r7, #12]
	}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	200005b4 	.word	0x200005b4
 8009fa4:	e000ed04 	.word	0xe000ed04

08009fa8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	61bb      	str	r3, [r7, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fce:	f000 faf3 	bl	800a5b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	617a      	str	r2, [r7, #20]
 8009fec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009fee:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ff0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009ff8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a010:	7ffb      	ldrb	r3, [r7, #31]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d145      	bne.n	800a0a2 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00a      	beq.n	800a034 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	60fb      	str	r3, [r7, #12]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a034:	4b20      	ldr	r3, [pc, #128]	; (800a0b8 <vTaskNotifyGiveFromISR+0x110>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d11c      	bne.n	800a076 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	3304      	adds	r3, #4
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff faed 	bl	8009620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	2201      	movs	r2, #1
 800a04c:	409a      	lsls	r2, r3
 800a04e:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <vTaskNotifyGiveFromISR+0x114>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4313      	orrs	r3, r2
 800a054:	4a19      	ldr	r2, [pc, #100]	; (800a0bc <vTaskNotifyGiveFromISR+0x114>)
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <vTaskNotifyGiveFromISR+0x118>)
 800a066:	441a      	add	r2, r3
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7ff fa79 	bl	8009566 <vListInsertEnd>
 800a074:	e005      	b.n	800a082 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	3318      	adds	r3, #24
 800a07a:	4619      	mov	r1, r3
 800a07c:	4811      	ldr	r0, [pc, #68]	; (800a0c4 <vTaskNotifyGiveFromISR+0x11c>)
 800a07e:	f7ff fa72 	bl	8009566 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a086:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <vTaskNotifyGiveFromISR+0x120>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d908      	bls.n	800a0a2 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2201      	movs	r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a09c:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <vTaskNotifyGiveFromISR+0x124>)
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f383 8811 	msr	BASEPRI, r3
}
 800a0ac:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800a0ae:	bf00      	nop
 800a0b0:	3728      	adds	r7, #40	; 0x28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200006dc 	.word	0x200006dc
 800a0bc:	200006bc 	.word	0x200006bc
 800a0c0:	200005b8 	.word	0x200005b8
 800a0c4:	20000674 	.word	0x20000674
 800a0c8:	200005b4 	.word	0x200005b4
 800a0cc:	200006c8 	.word	0x200006c8

0800a0d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0da:	4b29      	ldr	r3, [pc, #164]	; (800a180 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0e0:	4b28      	ldr	r3, [pc, #160]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fa9a 	bl	8009620 <uxListRemove>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0f2:	4b24      	ldr	r3, [pc, #144]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fe:	43da      	mvns	r2, r3
 800a100:	4b21      	ldr	r3, [pc, #132]	; (800a188 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4013      	ands	r3, r2
 800a106:	4a20      	ldr	r2, [pc, #128]	; (800a188 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a108:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d10a      	bne.n	800a128 <prvAddCurrentTaskToDelayedList+0x58>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a118:	4b1a      	ldr	r3, [pc, #104]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3304      	adds	r3, #4
 800a11e:	4619      	mov	r1, r3
 800a120:	481a      	ldr	r0, [pc, #104]	; (800a18c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a122:	f7ff fa20 	bl	8009566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a126:	e026      	b.n	800a176 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4413      	add	r3, r2
 800a12e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a130:	4b14      	ldr	r3, [pc, #80]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d209      	bcs.n	800a154 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a140:	4b13      	ldr	r3, [pc, #76]	; (800a190 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3304      	adds	r3, #4
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f7ff fa2e 	bl	80095ae <vListInsert>
}
 800a152:	e010      	b.n	800a176 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f7ff fa24 	bl	80095ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a166:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d202      	bcs.n	800a176 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a170:	4a09      	ldr	r2, [pc, #36]	; (800a198 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	6013      	str	r3, [r2, #0]
}
 800a176:	bf00      	nop
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	200006b8 	.word	0x200006b8
 800a184:	200005b4 	.word	0x200005b4
 800a188:	200006bc 	.word	0x200006bc
 800a18c:	200006a0 	.word	0x200006a0
 800a190:	20000670 	.word	0x20000670
 800a194:	2000066c 	.word	0x2000066c
 800a198:	200006d4 	.word	0x200006d4

0800a19c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3b04      	subs	r3, #4
 800a1ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3b04      	subs	r3, #4
 800a1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f023 0201 	bic.w	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3b04      	subs	r3, #4
 800a1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1cc:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <pxPortInitialiseStack+0x64>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3b14      	subs	r3, #20
 800a1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3b04      	subs	r3, #4
 800a1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f06f 0202 	mvn.w	r2, #2
 800a1ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b20      	subs	r3, #32
 800a1f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	0800a205 	.word	0x0800a205

0800a204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a20e:	4b12      	ldr	r3, [pc, #72]	; (800a258 <prvTaskExitError+0x54>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d00a      	beq.n	800a22e <prvTaskExitError+0x2a>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	60fb      	str	r3, [r7, #12]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <prvTaskExitError+0x28>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	60bb      	str	r3, [r7, #8]
}
 800a240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a242:	bf00      	nop
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0fc      	beq.n	800a244 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20000010 	.word	0x20000010
 800a25c:	00000000 	.word	0x00000000

0800a260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a260:	4b07      	ldr	r3, [pc, #28]	; (800a280 <pxCurrentTCBConst2>)
 800a262:	6819      	ldr	r1, [r3, #0]
 800a264:	6808      	ldr	r0, [r1, #0]
 800a266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26a:	f380 8809 	msr	PSP, r0
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f04f 0000 	mov.w	r0, #0
 800a276:	f380 8811 	msr	BASEPRI, r0
 800a27a:	4770      	bx	lr
 800a27c:	f3af 8000 	nop.w

0800a280 <pxCurrentTCBConst2>:
 800a280:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop

0800a288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a288:	4808      	ldr	r0, [pc, #32]	; (800a2ac <prvPortStartFirstTask+0x24>)
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	6800      	ldr	r0, [r0, #0]
 800a28e:	f380 8808 	msr	MSP, r0
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8814 	msr	CONTROL, r0
 800a29a:	b662      	cpsie	i
 800a29c:	b661      	cpsie	f
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	df00      	svc	0
 800a2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2aa:	bf00      	nop
 800a2ac:	e000ed08 	.word	0xe000ed08

0800a2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2b6:	4b46      	ldr	r3, [pc, #280]	; (800a3d0 <xPortStartScheduler+0x120>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a46      	ldr	r2, [pc, #280]	; (800a3d4 <xPortStartScheduler+0x124>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10a      	bne.n	800a2d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2d6:	4b3e      	ldr	r3, [pc, #248]	; (800a3d0 <xPortStartScheduler+0x120>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a3f      	ldr	r2, [pc, #252]	; (800a3d8 <xPortStartScheduler+0x128>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10a      	bne.n	800a2f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60fb      	str	r3, [r7, #12]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2f6:	4b39      	ldr	r3, [pc, #228]	; (800a3dc <xPortStartScheduler+0x12c>)
 800a2f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	22ff      	movs	r2, #255	; 0xff
 800a306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	4b31      	ldr	r3, [pc, #196]	; (800a3e0 <xPortStartScheduler+0x130>)
 800a31c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a31e:	4b31      	ldr	r3, [pc, #196]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a320:	2207      	movs	r2, #7
 800a322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a324:	e009      	b.n	800a33a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a326:	4b2f      	ldr	r3, [pc, #188]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	4a2d      	ldr	r2, [pc, #180]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a32e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	b2db      	uxtb	r3, r3
 800a338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a342:	2b80      	cmp	r3, #128	; 0x80
 800a344:	d0ef      	beq.n	800a326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a346:	4b27      	ldr	r3, [pc, #156]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f1c3 0307 	rsb	r3, r3, #7
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d00a      	beq.n	800a368 <xPortStartScheduler+0xb8>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60bb      	str	r3, [r7, #8]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a368:	4b1e      	ldr	r3, [pc, #120]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	4a1d      	ldr	r2, [pc, #116]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a37a:	4a1a      	ldr	r2, [pc, #104]	; (800a3e4 <xPortStartScheduler+0x134>)
 800a37c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	b2da      	uxtb	r2, r3
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a386:	4b18      	ldr	r3, [pc, #96]	; (800a3e8 <xPortStartScheduler+0x138>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <xPortStartScheduler+0x138>)
 800a38c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <xPortStartScheduler+0x138>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <xPortStartScheduler+0x138>)
 800a398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a39c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a39e:	f000 f8dd 	bl	800a55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <xPortStartScheduler+0x13c>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3a8:	f000 f8fc 	bl	800a5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3ac:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <xPortStartScheduler+0x140>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a0f      	ldr	r2, [pc, #60]	; (800a3f0 <xPortStartScheduler+0x140>)
 800a3b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3b8:	f7ff ff66 	bl	800a288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3bc:	f7ff fc8a 	bl	8009cd4 <vTaskSwitchContext>
	prvTaskExitError();
 800a3c0:	f7ff ff20 	bl	800a204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	e000ed00 	.word	0xe000ed00
 800a3d4:	410fc271 	.word	0x410fc271
 800a3d8:	410fc270 	.word	0x410fc270
 800a3dc:	e000e400 	.word	0xe000e400
 800a3e0:	200006e0 	.word	0x200006e0
 800a3e4:	200006e4 	.word	0x200006e4
 800a3e8:	e000ed20 	.word	0xe000ed20
 800a3ec:	20000010 	.word	0x20000010
 800a3f0:	e000ef34 	.word	0xe000ef34

0800a3f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	607b      	str	r3, [r7, #4]
}
 800a40c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a40e:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <vPortEnterCritical+0x58>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	4a0d      	ldr	r2, [pc, #52]	; (800a44c <vPortEnterCritical+0x58>)
 800a416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a418:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <vPortEnterCritical+0x58>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d10f      	bne.n	800a440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a420:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <vPortEnterCritical+0x5c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <vPortEnterCritical+0x4c>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	603b      	str	r3, [r7, #0]
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <vPortEnterCritical+0x4a>
	}
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	20000010 	.word	0x20000010
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a45a:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <vPortExitCritical+0x50>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <vPortExitCritical+0x24>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	607b      	str	r3, [r7, #4]
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a478:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <vPortExitCritical+0x50>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	4a09      	ldr	r2, [pc, #36]	; (800a4a4 <vPortExitCritical+0x50>)
 800a480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a482:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <vPortExitCritical+0x50>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d105      	bne.n	800a496 <vPortExitCritical+0x42>
 800a48a:	2300      	movs	r3, #0
 800a48c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f383 8811 	msr	BASEPRI, r3
}
 800a494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000010 	.word	0x20000010
	...

0800a4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4b0:	f3ef 8009 	mrs	r0, PSP
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <pxCurrentTCBConst>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	f01e 0f10 	tst.w	lr, #16
 800a4c0:	bf08      	it	eq
 800a4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	6010      	str	r0, [r2, #0]
 800a4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4d4:	f380 8811 	msr	BASEPRI, r0
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f7ff fbf8 	bl	8009cd4 <vTaskSwitchContext>
 800a4e4:	f04f 0000 	mov.w	r0, #0
 800a4e8:	f380 8811 	msr	BASEPRI, r0
 800a4ec:	bc09      	pop	{r0, r3}
 800a4ee:	6819      	ldr	r1, [r3, #0]
 800a4f0:	6808      	ldr	r0, [r1, #0]
 800a4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	f01e 0f10 	tst.w	lr, #16
 800a4fa:	bf08      	it	eq
 800a4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a500:	f380 8809 	msr	PSP, r0
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst>:
 800a510:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
}
 800a530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a532:	f7ff fb17 	bl	8009b64 <xTaskIncrementTick>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a53c:	4b06      	ldr	r3, [pc, #24]	; (800a558 <SysTick_Handler+0x40>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	2300      	movs	r3, #0
 800a546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f383 8811 	msr	BASEPRI, r3
}
 800a54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a560:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <vPortSetupTimerInterrupt+0x34>)
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a566:	4b0b      	ldr	r3, [pc, #44]	; (800a594 <vPortSetupTimerInterrupt+0x38>)
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a56c:	4b0a      	ldr	r3, [pc, #40]	; (800a598 <vPortSetupTimerInterrupt+0x3c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a0a      	ldr	r2, [pc, #40]	; (800a59c <vPortSetupTimerInterrupt+0x40>)
 800a572:	fba2 2303 	umull	r2, r3, r2, r3
 800a576:	099b      	lsrs	r3, r3, #6
 800a578:	4a09      	ldr	r2, [pc, #36]	; (800a5a0 <vPortSetupTimerInterrupt+0x44>)
 800a57a:	3b01      	subs	r3, #1
 800a57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a57e:	4b04      	ldr	r3, [pc, #16]	; (800a590 <vPortSetupTimerInterrupt+0x34>)
 800a580:	2207      	movs	r2, #7
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	e000e010 	.word	0xe000e010
 800a594:	e000e018 	.word	0xe000e018
 800a598:	20000004 	.word	0x20000004
 800a59c:	10624dd3 	.word	0x10624dd3
 800a5a0:	e000e014 	.word	0xe000e014

0800a5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5b4 <vPortEnableVFP+0x10>
 800a5a8:	6801      	ldr	r1, [r0, #0]
 800a5aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5ae:	6001      	str	r1, [r0, #0]
 800a5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5b2:	bf00      	nop
 800a5b4:	e000ed88 	.word	0xe000ed88

0800a5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5be:	f3ef 8305 	mrs	r3, IPSR
 800a5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d914      	bls.n	800a5f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ca:	4a17      	ldr	r2, [pc, #92]	; (800a628 <vPortValidateInterruptPriority+0x70>)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5d4:	4b15      	ldr	r3, [pc, #84]	; (800a62c <vPortValidateInterruptPriority+0x74>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	7afa      	ldrb	r2, [r7, #11]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d20a      	bcs.n	800a5f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	607b      	str	r3, [r7, #4]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5f4:	4b0e      	ldr	r3, [pc, #56]	; (800a630 <vPortValidateInterruptPriority+0x78>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <vPortValidateInterruptPriority+0x7c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d90a      	bls.n	800a61a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	603b      	str	r3, [r7, #0]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <vPortValidateInterruptPriority+0x60>
	}
 800a61a:	bf00      	nop
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	e000e3f0 	.word	0xe000e3f0
 800a62c:	200006e0 	.word	0x200006e0
 800a630:	e000ed0c 	.word	0xe000ed0c
 800a634:	200006e4 	.word	0x200006e4

0800a638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a640:	2300      	movs	r3, #0
 800a642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a644:	f7ff f9e4 	bl	8009a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a648:	4b5b      	ldr	r3, [pc, #364]	; (800a7b8 <pvPortMalloc+0x180>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a650:	f000 f920 	bl	800a894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a654:	4b59      	ldr	r3, [pc, #356]	; (800a7bc <pvPortMalloc+0x184>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f040 8093 	bne.w	800a788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01d      	beq.n	800a6a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a668:	2208      	movs	r2, #8
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4413      	add	r3, r2
 800a66e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	2b00      	cmp	r3, #0
 800a678:	d014      	beq.n	800a6a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f023 0307 	bic.w	r3, r3, #7
 800a680:	3308      	adds	r3, #8
 800a682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	617b      	str	r3, [r7, #20]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d06e      	beq.n	800a788 <pvPortMalloc+0x150>
 800a6aa:	4b45      	ldr	r3, [pc, #276]	; (800a7c0 <pvPortMalloc+0x188>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d869      	bhi.n	800a788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6b4:	4b43      	ldr	r3, [pc, #268]	; (800a7c4 <pvPortMalloc+0x18c>)
 800a6b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6b8:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <pvPortMalloc+0x18c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6be:	e004      	b.n	800a6ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d903      	bls.n	800a6dc <pvPortMalloc+0xa4>
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f1      	bne.n	800a6c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6dc:	4b36      	ldr	r3, [pc, #216]	; (800a7b8 <pvPortMalloc+0x180>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d050      	beq.n	800a788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	4413      	add	r3, r2
 800a6ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	1ad2      	subs	r2, r2, r3
 800a700:	2308      	movs	r3, #8
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	429a      	cmp	r2, r3
 800a706:	d91f      	bls.n	800a748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <pvPortMalloc+0xf8>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	613b      	str	r3, [r7, #16]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	1ad2      	subs	r2, r2, r3
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a742:	69b8      	ldr	r0, [r7, #24]
 800a744:	f000 f908 	bl	800a958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a748:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <pvPortMalloc+0x188>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <pvPortMalloc+0x188>)
 800a754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a756:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <pvPortMalloc+0x188>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b1b      	ldr	r3, [pc, #108]	; (800a7c8 <pvPortMalloc+0x190>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d203      	bcs.n	800a76a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a762:	4b17      	ldr	r3, [pc, #92]	; (800a7c0 <pvPortMalloc+0x188>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a18      	ldr	r2, [pc, #96]	; (800a7c8 <pvPortMalloc+0x190>)
 800a768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <pvPortMalloc+0x184>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	431a      	orrs	r2, r3
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	2200      	movs	r2, #0
 800a77c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <pvPortMalloc+0x194>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3301      	adds	r3, #1
 800a784:	4a11      	ldr	r2, [pc, #68]	; (800a7cc <pvPortMalloc+0x194>)
 800a786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a788:	f7ff f950 	bl	8009a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <pvPortMalloc+0x174>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60fb      	str	r3, [r7, #12]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <pvPortMalloc+0x172>
	return pvReturn;
 800a7ac:	69fb      	ldr	r3, [r7, #28]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3728      	adds	r7, #40	; 0x28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20002e00 	.word	0x20002e00
 800a7bc:	20002e14 	.word	0x20002e14
 800a7c0:	20002e04 	.word	0x20002e04
 800a7c4:	20002df8 	.word	0x20002df8
 800a7c8:	20002e08 	.word	0x20002e08
 800a7cc:	20002e0c 	.word	0x20002e0c

0800a7d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d04d      	beq.n	800a87e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7e2:	2308      	movs	r3, #8
 800a7e4:	425b      	negs	r3, r3
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	4b24      	ldr	r3, [pc, #144]	; (800a888 <vPortFree+0xb8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10a      	bne.n	800a814 <vPortFree+0x44>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60fb      	str	r3, [r7, #12]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00a      	beq.n	800a832 <vPortFree+0x62>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	60bb      	str	r3, [r7, #8]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <vPortFree+0xb8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4013      	ands	r3, r2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d01e      	beq.n	800a87e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11a      	bne.n	800a87e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	4b0e      	ldr	r3, [pc, #56]	; (800a888 <vPortFree+0xb8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	43db      	mvns	r3, r3
 800a852:	401a      	ands	r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a858:	f7ff f8da 	bl	8009a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <vPortFree+0xbc>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4413      	add	r3, r2
 800a866:	4a09      	ldr	r2, [pc, #36]	; (800a88c <vPortFree+0xbc>)
 800a868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a86a:	6938      	ldr	r0, [r7, #16]
 800a86c:	f000 f874 	bl	800a958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <vPortFree+0xc0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	4a06      	ldr	r2, [pc, #24]	; (800a890 <vPortFree+0xc0>)
 800a878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a87a:	f7ff f8d7 	bl	8009a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a87e:	bf00      	nop
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20002e14 	.word	0x20002e14
 800a88c:	20002e04 	.word	0x20002e04
 800a890:	20002e10 	.word	0x20002e10

0800a894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a89a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8a0:	4b27      	ldr	r3, [pc, #156]	; (800a940 <prvHeapInit+0xac>)
 800a8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00c      	beq.n	800a8c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3307      	adds	r3, #7
 800a8b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0307 	bic.w	r3, r3, #7
 800a8ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	4a1f      	ldr	r2, [pc, #124]	; (800a940 <prvHeapInit+0xac>)
 800a8c4:	4413      	add	r3, r2
 800a8c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8cc:	4a1d      	ldr	r2, [pc, #116]	; (800a944 <prvHeapInit+0xb0>)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8d2:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <prvHeapInit+0xb0>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	1a9b      	subs	r3, r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0307 	bic.w	r3, r3, #7
 800a8ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4a15      	ldr	r2, [pc, #84]	; (800a948 <prvHeapInit+0xb4>)
 800a8f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8f6:	4b14      	ldr	r3, [pc, #80]	; (800a948 <prvHeapInit+0xb4>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8fe:	4b12      	ldr	r3, [pc, #72]	; (800a948 <prvHeapInit+0xb4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a914:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <prvHeapInit+0xb4>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <prvHeapInit+0xb8>)
 800a922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	4a09      	ldr	r2, [pc, #36]	; (800a950 <prvHeapInit+0xbc>)
 800a92a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a92c:	4b09      	ldr	r3, [pc, #36]	; (800a954 <prvHeapInit+0xc0>)
 800a92e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a932:	601a      	str	r2, [r3, #0]
}
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	200006e8 	.word	0x200006e8
 800a944:	20002df8 	.word	0x20002df8
 800a948:	20002e00 	.word	0x20002e00
 800a94c:	20002e08 	.word	0x20002e08
 800a950:	20002e04 	.word	0x20002e04
 800a954:	20002e14 	.word	0x20002e14

0800a958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a960:	4b28      	ldr	r3, [pc, #160]	; (800aa04 <prvInsertBlockIntoFreeList+0xac>)
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e002      	b.n	800a96c <prvInsertBlockIntoFreeList+0x14>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	429a      	cmp	r2, r3
 800a974:	d8f7      	bhi.n	800a966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	4413      	add	r3, r2
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	d108      	bne.n	800a99a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	441a      	add	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	441a      	add	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d118      	bne.n	800a9e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	4b15      	ldr	r3, [pc, #84]	; (800aa08 <prvInsertBlockIntoFreeList+0xb0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d00d      	beq.n	800a9d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	441a      	add	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	e008      	b.n	800a9e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <prvInsertBlockIntoFreeList+0xb0>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	e003      	b.n	800a9e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d002      	beq.n	800a9f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20002df8 	.word	0x20002df8
 800aa08:	20002e00 	.word	0x20002e00

0800aa0c <malloc>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <malloc+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f000 b823 	b.w	800aa5c <_malloc_r>
 800aa16:	bf00      	nop
 800aa18:	2000006c 	.word	0x2000006c

0800aa1c <sbrk_aligned>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4e0e      	ldr	r6, [pc, #56]	; (800aa58 <sbrk_aligned+0x3c>)
 800aa20:	460c      	mov	r4, r1
 800aa22:	6831      	ldr	r1, [r6, #0]
 800aa24:	4605      	mov	r5, r0
 800aa26:	b911      	cbnz	r1, 800aa2e <sbrk_aligned+0x12>
 800aa28:	f000 fa88 	bl	800af3c <_sbrk_r>
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fa83 	bl	800af3c <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d00a      	beq.n	800aa50 <sbrk_aligned+0x34>
 800aa3a:	1cc4      	adds	r4, r0, #3
 800aa3c:	f024 0403 	bic.w	r4, r4, #3
 800aa40:	42a0      	cmp	r0, r4
 800aa42:	d007      	beq.n	800aa54 <sbrk_aligned+0x38>
 800aa44:	1a21      	subs	r1, r4, r0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 fa78 	bl	800af3c <_sbrk_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d101      	bne.n	800aa54 <sbrk_aligned+0x38>
 800aa50:	f04f 34ff 	mov.w	r4, #4294967295
 800aa54:	4620      	mov	r0, r4
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	20002e1c 	.word	0x20002e1c

0800aa5c <_malloc_r>:
 800aa5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa60:	1ccd      	adds	r5, r1, #3
 800aa62:	f025 0503 	bic.w	r5, r5, #3
 800aa66:	3508      	adds	r5, #8
 800aa68:	2d0c      	cmp	r5, #12
 800aa6a:	bf38      	it	cc
 800aa6c:	250c      	movcc	r5, #12
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	4607      	mov	r7, r0
 800aa72:	db01      	blt.n	800aa78 <_malloc_r+0x1c>
 800aa74:	42a9      	cmp	r1, r5
 800aa76:	d905      	bls.n	800aa84 <_malloc_r+0x28>
 800aa78:	230c      	movs	r3, #12
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab58 <_malloc_r+0xfc>
 800aa88:	f000 f868 	bl	800ab5c <__malloc_lock>
 800aa8c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa90:	461c      	mov	r4, r3
 800aa92:	bb5c      	cbnz	r4, 800aaec <_malloc_r+0x90>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7ff ffc0 	bl	800aa1c <sbrk_aligned>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	d155      	bne.n	800ab4e <_malloc_r+0xf2>
 800aaa2:	f8d8 4000 	ldr.w	r4, [r8]
 800aaa6:	4626      	mov	r6, r4
 800aaa8:	2e00      	cmp	r6, #0
 800aaaa:	d145      	bne.n	800ab38 <_malloc_r+0xdc>
 800aaac:	2c00      	cmp	r4, #0
 800aaae:	d048      	beq.n	800ab42 <_malloc_r+0xe6>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	4631      	mov	r1, r6
 800aab4:	4638      	mov	r0, r7
 800aab6:	eb04 0903 	add.w	r9, r4, r3
 800aaba:	f000 fa3f 	bl	800af3c <_sbrk_r>
 800aabe:	4581      	cmp	r9, r0
 800aac0:	d13f      	bne.n	800ab42 <_malloc_r+0xe6>
 800aac2:	6821      	ldr	r1, [r4, #0]
 800aac4:	1a6d      	subs	r5, r5, r1
 800aac6:	4629      	mov	r1, r5
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff ffa7 	bl	800aa1c <sbrk_aligned>
 800aace:	3001      	adds	r0, #1
 800aad0:	d037      	beq.n	800ab42 <_malloc_r+0xe6>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	442b      	add	r3, r5
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	f8d8 3000 	ldr.w	r3, [r8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d038      	beq.n	800ab52 <_malloc_r+0xf6>
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	42a2      	cmp	r2, r4
 800aae4:	d12b      	bne.n	800ab3e <_malloc_r+0xe2>
 800aae6:	2200      	movs	r2, #0
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	e00f      	b.n	800ab0c <_malloc_r+0xb0>
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	1b52      	subs	r2, r2, r5
 800aaf0:	d41f      	bmi.n	800ab32 <_malloc_r+0xd6>
 800aaf2:	2a0b      	cmp	r2, #11
 800aaf4:	d917      	bls.n	800ab26 <_malloc_r+0xca>
 800aaf6:	1961      	adds	r1, r4, r5
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	bf18      	it	ne
 800aafe:	6059      	strne	r1, [r3, #4]
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	bf08      	it	eq
 800ab04:	f8c8 1000 	streq.w	r1, [r8]
 800ab08:	5162      	str	r2, [r4, r5]
 800ab0a:	604b      	str	r3, [r1, #4]
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f104 060b 	add.w	r6, r4, #11
 800ab12:	f000 f829 	bl	800ab68 <__malloc_unlock>
 800ab16:	f026 0607 	bic.w	r6, r6, #7
 800ab1a:	1d23      	adds	r3, r4, #4
 800ab1c:	1af2      	subs	r2, r6, r3
 800ab1e:	d0ae      	beq.n	800aa7e <_malloc_r+0x22>
 800ab20:	1b9b      	subs	r3, r3, r6
 800ab22:	50a3      	str	r3, [r4, r2]
 800ab24:	e7ab      	b.n	800aa7e <_malloc_r+0x22>
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	6862      	ldr	r2, [r4, #4]
 800ab2a:	d1dd      	bne.n	800aae8 <_malloc_r+0x8c>
 800ab2c:	f8c8 2000 	str.w	r2, [r8]
 800ab30:	e7ec      	b.n	800ab0c <_malloc_r+0xb0>
 800ab32:	4623      	mov	r3, r4
 800ab34:	6864      	ldr	r4, [r4, #4]
 800ab36:	e7ac      	b.n	800aa92 <_malloc_r+0x36>
 800ab38:	4634      	mov	r4, r6
 800ab3a:	6876      	ldr	r6, [r6, #4]
 800ab3c:	e7b4      	b.n	800aaa8 <_malloc_r+0x4c>
 800ab3e:	4613      	mov	r3, r2
 800ab40:	e7cc      	b.n	800aadc <_malloc_r+0x80>
 800ab42:	230c      	movs	r3, #12
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	4638      	mov	r0, r7
 800ab48:	f000 f80e 	bl	800ab68 <__malloc_unlock>
 800ab4c:	e797      	b.n	800aa7e <_malloc_r+0x22>
 800ab4e:	6025      	str	r5, [r4, #0]
 800ab50:	e7dc      	b.n	800ab0c <_malloc_r+0xb0>
 800ab52:	605b      	str	r3, [r3, #4]
 800ab54:	deff      	udf	#255	; 0xff
 800ab56:	bf00      	nop
 800ab58:	20002e18 	.word	0x20002e18

0800ab5c <__malloc_lock>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__malloc_lock+0x8>)
 800ab5e:	f7f7 bf4a 	b.w	80029f6 <__retarget_lock_acquire_recursive>
 800ab62:	bf00      	nop
 800ab64:	200005a4 	.word	0x200005a4

0800ab68 <__malloc_unlock>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__malloc_unlock+0x8>)
 800ab6a:	f7f7 bf58 	b.w	8002a1e <__retarget_lock_release_recursive>
 800ab6e:	bf00      	nop
 800ab70:	200005a4 	.word	0x200005a4

0800ab74 <rand>:
 800ab74:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <rand+0x5c>)
 800ab76:	b510      	push	{r4, lr}
 800ab78:	681c      	ldr	r4, [r3, #0]
 800ab7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ab7c:	b9b3      	cbnz	r3, 800abac <rand+0x38>
 800ab7e:	2018      	movs	r0, #24
 800ab80:	f7ff ff44 	bl	800aa0c <malloc>
 800ab84:	4602      	mov	r2, r0
 800ab86:	6320      	str	r0, [r4, #48]	; 0x30
 800ab88:	b920      	cbnz	r0, 800ab94 <rand+0x20>
 800ab8a:	4b12      	ldr	r3, [pc, #72]	; (800abd4 <rand+0x60>)
 800ab8c:	4812      	ldr	r0, [pc, #72]	; (800abd8 <rand+0x64>)
 800ab8e:	2152      	movs	r1, #82	; 0x52
 800ab90:	f000 fa2e 	bl	800aff0 <__assert_func>
 800ab94:	4911      	ldr	r1, [pc, #68]	; (800abdc <rand+0x68>)
 800ab96:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <rand+0x6c>)
 800ab98:	e9c0 1300 	strd	r1, r3, [r0]
 800ab9c:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <rand+0x70>)
 800ab9e:	6083      	str	r3, [r0, #8]
 800aba0:	230b      	movs	r3, #11
 800aba2:	8183      	strh	r3, [r0, #12]
 800aba4:	2100      	movs	r1, #0
 800aba6:	2001      	movs	r0, #1
 800aba8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800abac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800abae:	480e      	ldr	r0, [pc, #56]	; (800abe8 <rand+0x74>)
 800abb0:	690b      	ldr	r3, [r1, #16]
 800abb2:	694c      	ldr	r4, [r1, #20]
 800abb4:	4a0d      	ldr	r2, [pc, #52]	; (800abec <rand+0x78>)
 800abb6:	4358      	muls	r0, r3
 800abb8:	fb02 0004 	mla	r0, r2, r4, r0
 800abbc:	fba3 3202 	umull	r3, r2, r3, r2
 800abc0:	3301      	adds	r3, #1
 800abc2:	eb40 0002 	adc.w	r0, r0, r2
 800abc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800abca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800abce:	bd10      	pop	{r4, pc}
 800abd0:	2000006c 	.word	0x2000006c
 800abd4:	0800bf24 	.word	0x0800bf24
 800abd8:	0800bf3b 	.word	0x0800bf3b
 800abdc:	abcd330e 	.word	0xabcd330e
 800abe0:	e66d1234 	.word	0xe66d1234
 800abe4:	0005deec 	.word	0x0005deec
 800abe8:	5851f42d 	.word	0x5851f42d
 800abec:	4c957f2d 	.word	0x4c957f2d

0800abf0 <std>:
 800abf0:	2300      	movs	r3, #0
 800abf2:	b510      	push	{r4, lr}
 800abf4:	4604      	mov	r4, r0
 800abf6:	e9c0 3300 	strd	r3, r3, [r0]
 800abfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abfe:	6083      	str	r3, [r0, #8]
 800ac00:	8181      	strh	r1, [r0, #12]
 800ac02:	6643      	str	r3, [r0, #100]	; 0x64
 800ac04:	81c2      	strh	r2, [r0, #14]
 800ac06:	6183      	str	r3, [r0, #24]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	305c      	adds	r0, #92	; 0x5c
 800ac0e:	f000 f902 	bl	800ae16 <memset>
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <std+0x38>)
 800ac14:	6263      	str	r3, [r4, #36]	; 0x24
 800ac16:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <std+0x3c>)
 800ac18:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac1a:	4b05      	ldr	r3, [pc, #20]	; (800ac30 <std+0x40>)
 800ac1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <std+0x44>)
 800ac20:	6224      	str	r4, [r4, #32]
 800ac22:	6323      	str	r3, [r4, #48]	; 0x30
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop
 800ac28:	0800ad91 	.word	0x0800ad91
 800ac2c:	0800adb3 	.word	0x0800adb3
 800ac30:	0800adeb 	.word	0x0800adeb
 800ac34:	0800ae0f 	.word	0x0800ae0f

0800ac38 <stdio_exit_handler>:
 800ac38:	4a02      	ldr	r2, [pc, #8]	; (800ac44 <stdio_exit_handler+0xc>)
 800ac3a:	4903      	ldr	r1, [pc, #12]	; (800ac48 <stdio_exit_handler+0x10>)
 800ac3c:	4803      	ldr	r0, [pc, #12]	; (800ac4c <stdio_exit_handler+0x14>)
 800ac3e:	f000 b869 	b.w	800ad14 <_fwalk_sglue>
 800ac42:	bf00      	nop
 800ac44:	20000014 	.word	0x20000014
 800ac48:	0800b7a1 	.word	0x0800b7a1
 800ac4c:	20000020 	.word	0x20000020

0800ac50 <cleanup_stdio>:
 800ac50:	6841      	ldr	r1, [r0, #4]
 800ac52:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <cleanup_stdio+0x34>)
 800ac54:	4299      	cmp	r1, r3
 800ac56:	b510      	push	{r4, lr}
 800ac58:	4604      	mov	r4, r0
 800ac5a:	d001      	beq.n	800ac60 <cleanup_stdio+0x10>
 800ac5c:	f000 fda0 	bl	800b7a0 <_fflush_r>
 800ac60:	68a1      	ldr	r1, [r4, #8]
 800ac62:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <cleanup_stdio+0x38>)
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d002      	beq.n	800ac6e <cleanup_stdio+0x1e>
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fd99 	bl	800b7a0 <_fflush_r>
 800ac6e:	68e1      	ldr	r1, [r4, #12]
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <cleanup_stdio+0x3c>)
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d004      	beq.n	800ac80 <cleanup_stdio+0x30>
 800ac76:	4620      	mov	r0, r4
 800ac78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7c:	f000 bd90 	b.w	800b7a0 <_fflush_r>
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	20002e20 	.word	0x20002e20
 800ac88:	20002e88 	.word	0x20002e88
 800ac8c:	20002ef0 	.word	0x20002ef0

0800ac90 <global_stdio_init.part.0>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <global_stdio_init.part.0+0x30>)
 800ac94:	4c0b      	ldr	r4, [pc, #44]	; (800acc4 <global_stdio_init.part.0+0x34>)
 800ac96:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <global_stdio_init.part.0+0x38>)
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2104      	movs	r1, #4
 800aca0:	f7ff ffa6 	bl	800abf0 <std>
 800aca4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aca8:	2201      	movs	r2, #1
 800acaa:	2109      	movs	r1, #9
 800acac:	f7ff ffa0 	bl	800abf0 <std>
 800acb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800acb4:	2202      	movs	r2, #2
 800acb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acba:	2112      	movs	r1, #18
 800acbc:	f7ff bf98 	b.w	800abf0 <std>
 800acc0:	20002f58 	.word	0x20002f58
 800acc4:	20002e20 	.word	0x20002e20
 800acc8:	0800ac39 	.word	0x0800ac39

0800accc <__sfp_lock_acquire>:
 800accc:	4801      	ldr	r0, [pc, #4]	; (800acd4 <__sfp_lock_acquire+0x8>)
 800acce:	f7f7 be92 	b.w	80029f6 <__retarget_lock_acquire_recursive>
 800acd2:	bf00      	nop
 800acd4:	20000598 	.word	0x20000598

0800acd8 <__sfp_lock_release>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_release+0x8>)
 800acda:	f7f7 bea0 	b.w	8002a1e <__retarget_lock_release_recursive>
 800acde:	bf00      	nop
 800ace0:	20000598 	.word	0x20000598

0800ace4 <__sinit>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4604      	mov	r4, r0
 800ace8:	f7ff fff0 	bl	800accc <__sfp_lock_acquire>
 800acec:	6a23      	ldr	r3, [r4, #32]
 800acee:	b11b      	cbz	r3, 800acf8 <__sinit+0x14>
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f7ff bff0 	b.w	800acd8 <__sfp_lock_release>
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <__sinit+0x28>)
 800acfa:	6223      	str	r3, [r4, #32]
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <__sinit+0x2c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1f5      	bne.n	800acf0 <__sinit+0xc>
 800ad04:	f7ff ffc4 	bl	800ac90 <global_stdio_init.part.0>
 800ad08:	e7f2      	b.n	800acf0 <__sinit+0xc>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac51 	.word	0x0800ac51
 800ad10:	20002f58 	.word	0x20002f58

0800ad14 <_fwalk_sglue>:
 800ad14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad18:	4607      	mov	r7, r0
 800ad1a:	4688      	mov	r8, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	2600      	movs	r6, #0
 800ad20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad24:	f1b9 0901 	subs.w	r9, r9, #1
 800ad28:	d505      	bpl.n	800ad36 <_fwalk_sglue+0x22>
 800ad2a:	6824      	ldr	r4, [r4, #0]
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	d1f7      	bne.n	800ad20 <_fwalk_sglue+0xc>
 800ad30:	4630      	mov	r0, r6
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d907      	bls.n	800ad4c <_fwalk_sglue+0x38>
 800ad3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad40:	3301      	adds	r3, #1
 800ad42:	d003      	beq.n	800ad4c <_fwalk_sglue+0x38>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4638      	mov	r0, r7
 800ad48:	47c0      	blx	r8
 800ad4a:	4306      	orrs	r6, r0
 800ad4c:	3568      	adds	r5, #104	; 0x68
 800ad4e:	e7e9      	b.n	800ad24 <_fwalk_sglue+0x10>

0800ad50 <siprintf>:
 800ad50:	b40e      	push	{r1, r2, r3}
 800ad52:	b500      	push	{lr}
 800ad54:	b09c      	sub	sp, #112	; 0x70
 800ad56:	ab1d      	add	r3, sp, #116	; 0x74
 800ad58:	9002      	str	r0, [sp, #8]
 800ad5a:	9006      	str	r0, [sp, #24]
 800ad5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad60:	4809      	ldr	r0, [pc, #36]	; (800ad88 <siprintf+0x38>)
 800ad62:	9107      	str	r1, [sp, #28]
 800ad64:	9104      	str	r1, [sp, #16]
 800ad66:	4909      	ldr	r1, [pc, #36]	; (800ad8c <siprintf+0x3c>)
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	9105      	str	r1, [sp, #20]
 800ad6e:	6800      	ldr	r0, [r0, #0]
 800ad70:	9301      	str	r3, [sp, #4]
 800ad72:	a902      	add	r1, sp, #8
 800ad74:	f000 fa00 	bl	800b178 <_svfiprintf_r>
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	701a      	strb	r2, [r3, #0]
 800ad7e:	b01c      	add	sp, #112	; 0x70
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	2000006c 	.word	0x2000006c
 800ad8c:	ffff0208 	.word	0xffff0208

0800ad90 <__sread>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	460c      	mov	r4, r1
 800ad94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad98:	f000 f8be 	bl	800af18 <_read_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	bfab      	itete	ge
 800ada0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ada2:	89a3      	ldrhlt	r3, [r4, #12]
 800ada4:	181b      	addge	r3, r3, r0
 800ada6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adaa:	bfac      	ite	ge
 800adac:	6563      	strge	r3, [r4, #84]	; 0x54
 800adae:	81a3      	strhlt	r3, [r4, #12]
 800adb0:	bd10      	pop	{r4, pc}

0800adb2 <__swrite>:
 800adb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb6:	461f      	mov	r7, r3
 800adb8:	898b      	ldrh	r3, [r1, #12]
 800adba:	05db      	lsls	r3, r3, #23
 800adbc:	4605      	mov	r5, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	4616      	mov	r6, r2
 800adc2:	d505      	bpl.n	800add0 <__swrite+0x1e>
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	2302      	movs	r3, #2
 800adca:	2200      	movs	r2, #0
 800adcc:	f000 f892 	bl	800aef4 <_lseek_r>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	4632      	mov	r2, r6
 800adde:	463b      	mov	r3, r7
 800ade0:	4628      	mov	r0, r5
 800ade2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	f000 b8b9 	b.w	800af5c <_write_r>

0800adea <__sseek>:
 800adea:	b510      	push	{r4, lr}
 800adec:	460c      	mov	r4, r1
 800adee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf2:	f000 f87f 	bl	800aef4 <_lseek_r>
 800adf6:	1c43      	adds	r3, r0, #1
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	bf15      	itete	ne
 800adfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800adfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae06:	81a3      	strheq	r3, [r4, #12]
 800ae08:	bf18      	it	ne
 800ae0a:	81a3      	strhne	r3, [r4, #12]
 800ae0c:	bd10      	pop	{r4, pc}

0800ae0e <__sclose>:
 800ae0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae12:	f000 b809 	b.w	800ae28 <_close_r>

0800ae16 <memset>:
 800ae16:	4402      	add	r2, r0
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d100      	bne.n	800ae20 <memset+0xa>
 800ae1e:	4770      	bx	lr
 800ae20:	f803 1b01 	strb.w	r1, [r3], #1
 800ae24:	e7f9      	b.n	800ae1a <memset+0x4>
	...

0800ae28 <_close_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d06      	ldr	r5, [pc, #24]	; (800ae44 <_close_r+0x1c>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	f7f7 fcdf 	bl	80027f6 <_close>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_close_r+0x1a>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_close_r+0x1a>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20002f5c 	.word	0x20002f5c

0800ae48 <_reclaim_reent>:
 800ae48:	4b29      	ldr	r3, [pc, #164]	; (800aef0 <_reclaim_reent+0xa8>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4283      	cmp	r3, r0
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	4604      	mov	r4, r0
 800ae52:	d04b      	beq.n	800aeec <_reclaim_reent+0xa4>
 800ae54:	69c3      	ldr	r3, [r0, #28]
 800ae56:	b143      	cbz	r3, 800ae6a <_reclaim_reent+0x22>
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d144      	bne.n	800aee8 <_reclaim_reent+0xa0>
 800ae5e:	69e3      	ldr	r3, [r4, #28]
 800ae60:	6819      	ldr	r1, [r3, #0]
 800ae62:	b111      	cbz	r1, 800ae6a <_reclaim_reent+0x22>
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 f8e1 	bl	800b02c <_free_r>
 800ae6a:	6961      	ldr	r1, [r4, #20]
 800ae6c:	b111      	cbz	r1, 800ae74 <_reclaim_reent+0x2c>
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 f8dc 	bl	800b02c <_free_r>
 800ae74:	69e1      	ldr	r1, [r4, #28]
 800ae76:	b111      	cbz	r1, 800ae7e <_reclaim_reent+0x36>
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 f8d7 	bl	800b02c <_free_r>
 800ae7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae80:	b111      	cbz	r1, 800ae88 <_reclaim_reent+0x40>
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f8d2 	bl	800b02c <_free_r>
 800ae88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae8a:	b111      	cbz	r1, 800ae92 <_reclaim_reent+0x4a>
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f000 f8cd 	bl	800b02c <_free_r>
 800ae92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae94:	b111      	cbz	r1, 800ae9c <_reclaim_reent+0x54>
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 f8c8 	bl	800b02c <_free_r>
 800ae9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae9e:	b111      	cbz	r1, 800aea6 <_reclaim_reent+0x5e>
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 f8c3 	bl	800b02c <_free_r>
 800aea6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aea8:	b111      	cbz	r1, 800aeb0 <_reclaim_reent+0x68>
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 f8be 	bl	800b02c <_free_r>
 800aeb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aeb2:	b111      	cbz	r1, 800aeba <_reclaim_reent+0x72>
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 f8b9 	bl	800b02c <_free_r>
 800aeba:	6a23      	ldr	r3, [r4, #32]
 800aebc:	b1b3      	cbz	r3, 800aeec <_reclaim_reent+0xa4>
 800aebe:	4620      	mov	r0, r4
 800aec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aec4:	4718      	bx	r3
 800aec6:	5949      	ldr	r1, [r1, r5]
 800aec8:	b941      	cbnz	r1, 800aedc <_reclaim_reent+0x94>
 800aeca:	3504      	adds	r5, #4
 800aecc:	69e3      	ldr	r3, [r4, #28]
 800aece:	2d80      	cmp	r5, #128	; 0x80
 800aed0:	68d9      	ldr	r1, [r3, #12]
 800aed2:	d1f8      	bne.n	800aec6 <_reclaim_reent+0x7e>
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 f8a9 	bl	800b02c <_free_r>
 800aeda:	e7c0      	b.n	800ae5e <_reclaim_reent+0x16>
 800aedc:	680e      	ldr	r6, [r1, #0]
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 f8a4 	bl	800b02c <_free_r>
 800aee4:	4631      	mov	r1, r6
 800aee6:	e7ef      	b.n	800aec8 <_reclaim_reent+0x80>
 800aee8:	2500      	movs	r5, #0
 800aeea:	e7ef      	b.n	800aecc <_reclaim_reent+0x84>
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	bf00      	nop
 800aef0:	2000006c 	.word	0x2000006c

0800aef4 <_lseek_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_lseek_r+0x20>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7f7 fc9e 	bl	8002844 <_lseek>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_lseek_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_lseek_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20002f5c 	.word	0x20002f5c

0800af18 <_read_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_read_r+0x20>)
 800af1c:	4604      	mov	r4, r0
 800af1e:	4608      	mov	r0, r1
 800af20:	4611      	mov	r1, r2
 800af22:	2200      	movs	r2, #0
 800af24:	602a      	str	r2, [r5, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	f7f7 fc2c 	bl	8002784 <_read>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_read_r+0x1e>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_read_r+0x1e>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20002f5c 	.word	0x20002f5c

0800af3c <_sbrk_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_sbrk_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7f7 fc8a 	bl	8002860 <_sbrk>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_sbrk_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_sbrk_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20002f5c 	.word	0x20002f5c

0800af5c <_write_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d07      	ldr	r5, [pc, #28]	; (800af7c <_write_r+0x20>)
 800af60:	4604      	mov	r4, r0
 800af62:	4608      	mov	r0, r1
 800af64:	4611      	mov	r1, r2
 800af66:	2200      	movs	r2, #0
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f7f7 fc27 	bl	80027be <_write>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_write_r+0x1e>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_write_r+0x1e>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20002f5c 	.word	0x20002f5c

0800af80 <__errno>:
 800af80:	4b01      	ldr	r3, [pc, #4]	; (800af88 <__errno+0x8>)
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	2000006c 	.word	0x2000006c

0800af8c <__libc_init_array>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	4d0d      	ldr	r5, [pc, #52]	; (800afc4 <__libc_init_array+0x38>)
 800af90:	4c0d      	ldr	r4, [pc, #52]	; (800afc8 <__libc_init_array+0x3c>)
 800af92:	1b64      	subs	r4, r4, r5
 800af94:	10a4      	asrs	r4, r4, #2
 800af96:	2600      	movs	r6, #0
 800af98:	42a6      	cmp	r6, r4
 800af9a:	d109      	bne.n	800afb0 <__libc_init_array+0x24>
 800af9c:	4d0b      	ldr	r5, [pc, #44]	; (800afcc <__libc_init_array+0x40>)
 800af9e:	4c0c      	ldr	r4, [pc, #48]	; (800afd0 <__libc_init_array+0x44>)
 800afa0:	f000 ff32 	bl	800be08 <_init>
 800afa4:	1b64      	subs	r4, r4, r5
 800afa6:	10a4      	asrs	r4, r4, #2
 800afa8:	2600      	movs	r6, #0
 800afaa:	42a6      	cmp	r6, r4
 800afac:	d105      	bne.n	800afba <__libc_init_array+0x2e>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb4:	4798      	blx	r3
 800afb6:	3601      	adds	r6, #1
 800afb8:	e7ee      	b.n	800af98 <__libc_init_array+0xc>
 800afba:	f855 3b04 	ldr.w	r3, [r5], #4
 800afbe:	4798      	blx	r3
 800afc0:	3601      	adds	r6, #1
 800afc2:	e7f2      	b.n	800afaa <__libc_init_array+0x1e>
 800afc4:	0800c00c 	.word	0x0800c00c
 800afc8:	0800c00c 	.word	0x0800c00c
 800afcc:	0800c00c 	.word	0x0800c00c
 800afd0:	0800c010 	.word	0x0800c010

0800afd4 <memcpy>:
 800afd4:	440a      	add	r2, r1
 800afd6:	4291      	cmp	r1, r2
 800afd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800afdc:	d100      	bne.n	800afe0 <memcpy+0xc>
 800afde:	4770      	bx	lr
 800afe0:	b510      	push	{r4, lr}
 800afe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afea:	4291      	cmp	r1, r2
 800afec:	d1f9      	bne.n	800afe2 <memcpy+0xe>
 800afee:	bd10      	pop	{r4, pc}

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <__assert_func+0x2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b14c      	cbz	r4, 800b014 <__assert_func+0x24>
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <__assert_func+0x30>)
 800b002:	9100      	str	r1, [sp, #0]
 800b004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b008:	4906      	ldr	r1, [pc, #24]	; (800b024 <__assert_func+0x34>)
 800b00a:	462b      	mov	r3, r5
 800b00c:	f000 fbf0 	bl	800b7f0 <fiprintf>
 800b010:	f000 fc1a 	bl	800b848 <abort>
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <__assert_func+0x38>)
 800b016:	461c      	mov	r4, r3
 800b018:	e7f3      	b.n	800b002 <__assert_func+0x12>
 800b01a:	bf00      	nop
 800b01c:	2000006c 	.word	0x2000006c
 800b020:	0800bf93 	.word	0x0800bf93
 800b024:	0800bfa0 	.word	0x0800bfa0
 800b028:	0800bfce 	.word	0x0800bfce

0800b02c <_free_r>:
 800b02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b02e:	2900      	cmp	r1, #0
 800b030:	d044      	beq.n	800b0bc <_free_r+0x90>
 800b032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b036:	9001      	str	r0, [sp, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f1a1 0404 	sub.w	r4, r1, #4
 800b03e:	bfb8      	it	lt
 800b040:	18e4      	addlt	r4, r4, r3
 800b042:	f7ff fd8b 	bl	800ab5c <__malloc_lock>
 800b046:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <_free_r+0x94>)
 800b048:	9801      	ldr	r0, [sp, #4]
 800b04a:	6813      	ldr	r3, [r2, #0]
 800b04c:	b933      	cbnz	r3, 800b05c <_free_r+0x30>
 800b04e:	6063      	str	r3, [r4, #4]
 800b050:	6014      	str	r4, [r2, #0]
 800b052:	b003      	add	sp, #12
 800b054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b058:	f7ff bd86 	b.w	800ab68 <__malloc_unlock>
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	d908      	bls.n	800b072 <_free_r+0x46>
 800b060:	6825      	ldr	r5, [r4, #0]
 800b062:	1961      	adds	r1, r4, r5
 800b064:	428b      	cmp	r3, r1
 800b066:	bf01      	itttt	eq
 800b068:	6819      	ldreq	r1, [r3, #0]
 800b06a:	685b      	ldreq	r3, [r3, #4]
 800b06c:	1949      	addeq	r1, r1, r5
 800b06e:	6021      	streq	r1, [r4, #0]
 800b070:	e7ed      	b.n	800b04e <_free_r+0x22>
 800b072:	461a      	mov	r2, r3
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	b10b      	cbz	r3, 800b07c <_free_r+0x50>
 800b078:	42a3      	cmp	r3, r4
 800b07a:	d9fa      	bls.n	800b072 <_free_r+0x46>
 800b07c:	6811      	ldr	r1, [r2, #0]
 800b07e:	1855      	adds	r5, r2, r1
 800b080:	42a5      	cmp	r5, r4
 800b082:	d10b      	bne.n	800b09c <_free_r+0x70>
 800b084:	6824      	ldr	r4, [r4, #0]
 800b086:	4421      	add	r1, r4
 800b088:	1854      	adds	r4, r2, r1
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	6011      	str	r1, [r2, #0]
 800b08e:	d1e0      	bne.n	800b052 <_free_r+0x26>
 800b090:	681c      	ldr	r4, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	6053      	str	r3, [r2, #4]
 800b096:	440c      	add	r4, r1
 800b098:	6014      	str	r4, [r2, #0]
 800b09a:	e7da      	b.n	800b052 <_free_r+0x26>
 800b09c:	d902      	bls.n	800b0a4 <_free_r+0x78>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	e7d6      	b.n	800b052 <_free_r+0x26>
 800b0a4:	6825      	ldr	r5, [r4, #0]
 800b0a6:	1961      	adds	r1, r4, r5
 800b0a8:	428b      	cmp	r3, r1
 800b0aa:	bf04      	itt	eq
 800b0ac:	6819      	ldreq	r1, [r3, #0]
 800b0ae:	685b      	ldreq	r3, [r3, #4]
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	bf04      	itt	eq
 800b0b4:	1949      	addeq	r1, r1, r5
 800b0b6:	6021      	streq	r1, [r4, #0]
 800b0b8:	6054      	str	r4, [r2, #4]
 800b0ba:	e7ca      	b.n	800b052 <_free_r+0x26>
 800b0bc:	b003      	add	sp, #12
 800b0be:	bd30      	pop	{r4, r5, pc}
 800b0c0:	20002e18 	.word	0x20002e18

0800b0c4 <__ssputs_r>:
 800b0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c8:	688e      	ldr	r6, [r1, #8]
 800b0ca:	461f      	mov	r7, r3
 800b0cc:	42be      	cmp	r6, r7
 800b0ce:	680b      	ldr	r3, [r1, #0]
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	4690      	mov	r8, r2
 800b0d6:	d82c      	bhi.n	800b132 <__ssputs_r+0x6e>
 800b0d8:	898a      	ldrh	r2, [r1, #12]
 800b0da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0de:	d026      	beq.n	800b12e <__ssputs_r+0x6a>
 800b0e0:	6965      	ldr	r5, [r4, #20]
 800b0e2:	6909      	ldr	r1, [r1, #16]
 800b0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e8:	eba3 0901 	sub.w	r9, r3, r1
 800b0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f0:	1c7b      	adds	r3, r7, #1
 800b0f2:	444b      	add	r3, r9
 800b0f4:	106d      	asrs	r5, r5, #1
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	bf38      	it	cc
 800b0fa:	461d      	movcc	r5, r3
 800b0fc:	0553      	lsls	r3, r2, #21
 800b0fe:	d527      	bpl.n	800b150 <__ssputs_r+0x8c>
 800b100:	4629      	mov	r1, r5
 800b102:	f7ff fcab 	bl	800aa5c <_malloc_r>
 800b106:	4606      	mov	r6, r0
 800b108:	b360      	cbz	r0, 800b164 <__ssputs_r+0xa0>
 800b10a:	6921      	ldr	r1, [r4, #16]
 800b10c:	464a      	mov	r2, r9
 800b10e:	f7ff ff61 	bl	800afd4 <memcpy>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	6126      	str	r6, [r4, #16]
 800b120:	6165      	str	r5, [r4, #20]
 800b122:	444e      	add	r6, r9
 800b124:	eba5 0509 	sub.w	r5, r5, r9
 800b128:	6026      	str	r6, [r4, #0]
 800b12a:	60a5      	str	r5, [r4, #8]
 800b12c:	463e      	mov	r6, r7
 800b12e:	42be      	cmp	r6, r7
 800b130:	d900      	bls.n	800b134 <__ssputs_r+0x70>
 800b132:	463e      	mov	r6, r7
 800b134:	6820      	ldr	r0, [r4, #0]
 800b136:	4632      	mov	r2, r6
 800b138:	4641      	mov	r1, r8
 800b13a:	f000 fb6b 	bl	800b814 <memmove>
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	1b9b      	subs	r3, r3, r6
 800b142:	60a3      	str	r3, [r4, #8]
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	4433      	add	r3, r6
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	2000      	movs	r0, #0
 800b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b150:	462a      	mov	r2, r5
 800b152:	f000 fb80 	bl	800b856 <_realloc_r>
 800b156:	4606      	mov	r6, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	d1e0      	bne.n	800b11e <__ssputs_r+0x5a>
 800b15c:	6921      	ldr	r1, [r4, #16]
 800b15e:	4650      	mov	r0, sl
 800b160:	f7ff ff64 	bl	800b02c <_free_r>
 800b164:	230c      	movs	r3, #12
 800b166:	f8ca 3000 	str.w	r3, [sl]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	f04f 30ff 	mov.w	r0, #4294967295
 800b176:	e7e9      	b.n	800b14c <__ssputs_r+0x88>

0800b178 <_svfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4698      	mov	r8, r3
 800b17e:	898b      	ldrh	r3, [r1, #12]
 800b180:	061b      	lsls	r3, r3, #24
 800b182:	b09d      	sub	sp, #116	; 0x74
 800b184:	4607      	mov	r7, r0
 800b186:	460d      	mov	r5, r1
 800b188:	4614      	mov	r4, r2
 800b18a:	d50e      	bpl.n	800b1aa <_svfiprintf_r+0x32>
 800b18c:	690b      	ldr	r3, [r1, #16]
 800b18e:	b963      	cbnz	r3, 800b1aa <_svfiprintf_r+0x32>
 800b190:	2140      	movs	r1, #64	; 0x40
 800b192:	f7ff fc63 	bl	800aa5c <_malloc_r>
 800b196:	6028      	str	r0, [r5, #0]
 800b198:	6128      	str	r0, [r5, #16]
 800b19a:	b920      	cbnz	r0, 800b1a6 <_svfiprintf_r+0x2e>
 800b19c:	230c      	movs	r3, #12
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e0d0      	b.n	800b348 <_svfiprintf_r+0x1d0>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	616b      	str	r3, [r5, #20]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ae:	2320      	movs	r3, #32
 800b1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b8:	2330      	movs	r3, #48	; 0x30
 800b1ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b360 <_svfiprintf_r+0x1e8>
 800b1be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	469a      	mov	sl, r3
 800b1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ce:	b10a      	cbz	r2, 800b1d4 <_svfiprintf_r+0x5c>
 800b1d0:	2a25      	cmp	r2, #37	; 0x25
 800b1d2:	d1f9      	bne.n	800b1c8 <_svfiprintf_r+0x50>
 800b1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d8:	d00b      	beq.n	800b1f2 <_svfiprintf_r+0x7a>
 800b1da:	465b      	mov	r3, fp
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ff6f 	bl	800b0c4 <__ssputs_r>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f000 80a9 	beq.w	800b33e <_svfiprintf_r+0x1c6>
 800b1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ee:	445a      	add	r2, fp
 800b1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f000 80a1 	beq.w	800b33e <_svfiprintf_r+0x1c6>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b206:	f10a 0a01 	add.w	sl, sl, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	9307      	str	r3, [sp, #28]
 800b20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b212:	931a      	str	r3, [sp, #104]	; 0x68
 800b214:	4654      	mov	r4, sl
 800b216:	2205      	movs	r2, #5
 800b218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21c:	4850      	ldr	r0, [pc, #320]	; (800b360 <_svfiprintf_r+0x1e8>)
 800b21e:	f7f5 f807 	bl	8000230 <memchr>
 800b222:	9a04      	ldr	r2, [sp, #16]
 800b224:	b9d8      	cbnz	r0, 800b25e <_svfiprintf_r+0xe6>
 800b226:	06d0      	lsls	r0, r2, #27
 800b228:	bf44      	itt	mi
 800b22a:	2320      	movmi	r3, #32
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b230:	0711      	lsls	r1, r2, #28
 800b232:	bf44      	itt	mi
 800b234:	232b      	movmi	r3, #43	; 0x2b
 800b236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23a:	f89a 3000 	ldrb.w	r3, [sl]
 800b23e:	2b2a      	cmp	r3, #42	; 0x2a
 800b240:	d015      	beq.n	800b26e <_svfiprintf_r+0xf6>
 800b242:	9a07      	ldr	r2, [sp, #28]
 800b244:	4654      	mov	r4, sl
 800b246:	2000      	movs	r0, #0
 800b248:	f04f 0c0a 	mov.w	ip, #10
 800b24c:	4621      	mov	r1, r4
 800b24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b252:	3b30      	subs	r3, #48	; 0x30
 800b254:	2b09      	cmp	r3, #9
 800b256:	d94d      	bls.n	800b2f4 <_svfiprintf_r+0x17c>
 800b258:	b1b0      	cbz	r0, 800b288 <_svfiprintf_r+0x110>
 800b25a:	9207      	str	r2, [sp, #28]
 800b25c:	e014      	b.n	800b288 <_svfiprintf_r+0x110>
 800b25e:	eba0 0308 	sub.w	r3, r0, r8
 800b262:	fa09 f303 	lsl.w	r3, r9, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	46a2      	mov	sl, r4
 800b26c:	e7d2      	b.n	800b214 <_svfiprintf_r+0x9c>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9103      	str	r1, [sp, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	bfbb      	ittet	lt
 800b27a:	425b      	neglt	r3, r3
 800b27c:	f042 0202 	orrlt.w	r2, r2, #2
 800b280:	9307      	strge	r3, [sp, #28]
 800b282:	9307      	strlt	r3, [sp, #28]
 800b284:	bfb8      	it	lt
 800b286:	9204      	strlt	r2, [sp, #16]
 800b288:	7823      	ldrb	r3, [r4, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d10c      	bne.n	800b2a8 <_svfiprintf_r+0x130>
 800b28e:	7863      	ldrb	r3, [r4, #1]
 800b290:	2b2a      	cmp	r3, #42	; 0x2a
 800b292:	d134      	bne.n	800b2fe <_svfiprintf_r+0x186>
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	1d1a      	adds	r2, r3, #4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	9203      	str	r2, [sp, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bfb8      	it	lt
 800b2a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a4:	3402      	adds	r4, #2
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b370 <_svfiprintf_r+0x1f8>
 800b2ac:	7821      	ldrb	r1, [r4, #0]
 800b2ae:	2203      	movs	r2, #3
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f7f4 ffbd 	bl	8000230 <memchr>
 800b2b6:	b138      	cbz	r0, 800b2c8 <_svfiprintf_r+0x150>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	eba0 000a 	sub.w	r0, r0, sl
 800b2be:	2240      	movs	r2, #64	; 0x40
 800b2c0:	4082      	lsls	r2, r0
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	3401      	adds	r4, #1
 800b2c6:	9304      	str	r3, [sp, #16]
 800b2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2cc:	4825      	ldr	r0, [pc, #148]	; (800b364 <_svfiprintf_r+0x1ec>)
 800b2ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d2:	2206      	movs	r2, #6
 800b2d4:	f7f4 ffac 	bl	8000230 <memchr>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d038      	beq.n	800b34e <_svfiprintf_r+0x1d6>
 800b2dc:	4b22      	ldr	r3, [pc, #136]	; (800b368 <_svfiprintf_r+0x1f0>)
 800b2de:	bb1b      	cbnz	r3, 800b328 <_svfiprintf_r+0x1b0>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	3307      	adds	r3, #7
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ee:	4433      	add	r3, r6
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	e768      	b.n	800b1c6 <_svfiprintf_r+0x4e>
 800b2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	e7a6      	b.n	800b24c <_svfiprintf_r+0xd4>
 800b2fe:	2300      	movs	r3, #0
 800b300:	3401      	adds	r4, #1
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	4619      	mov	r1, r3
 800b306:	f04f 0c0a 	mov.w	ip, #10
 800b30a:	4620      	mov	r0, r4
 800b30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b310:	3a30      	subs	r2, #48	; 0x30
 800b312:	2a09      	cmp	r2, #9
 800b314:	d903      	bls.n	800b31e <_svfiprintf_r+0x1a6>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0c6      	beq.n	800b2a8 <_svfiprintf_r+0x130>
 800b31a:	9105      	str	r1, [sp, #20]
 800b31c:	e7c4      	b.n	800b2a8 <_svfiprintf_r+0x130>
 800b31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b322:	4604      	mov	r4, r0
 800b324:	2301      	movs	r3, #1
 800b326:	e7f0      	b.n	800b30a <_svfiprintf_r+0x192>
 800b328:	ab03      	add	r3, sp, #12
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	462a      	mov	r2, r5
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b330:	a904      	add	r1, sp, #16
 800b332:	4638      	mov	r0, r7
 800b334:	f3af 8000 	nop.w
 800b338:	1c42      	adds	r2, r0, #1
 800b33a:	4606      	mov	r6, r0
 800b33c:	d1d6      	bne.n	800b2ec <_svfiprintf_r+0x174>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	065b      	lsls	r3, r3, #25
 800b342:	f53f af2d 	bmi.w	800b1a0 <_svfiprintf_r+0x28>
 800b346:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b348:	b01d      	add	sp, #116	; 0x74
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	462a      	mov	r2, r5
 800b354:	4b05      	ldr	r3, [pc, #20]	; (800b36c <_svfiprintf_r+0x1f4>)
 800b356:	a904      	add	r1, sp, #16
 800b358:	4638      	mov	r0, r7
 800b35a:	f000 f879 	bl	800b450 <_printf_i>
 800b35e:	e7eb      	b.n	800b338 <_svfiprintf_r+0x1c0>
 800b360:	0800bfcf 	.word	0x0800bfcf
 800b364:	0800bfd9 	.word	0x0800bfd9
 800b368:	00000000 	.word	0x00000000
 800b36c:	0800b0c5 	.word	0x0800b0c5
 800b370:	0800bfd5 	.word	0x0800bfd5

0800b374 <_printf_common>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	4616      	mov	r6, r2
 800b37a:	4699      	mov	r9, r3
 800b37c:	688a      	ldr	r2, [r1, #8]
 800b37e:	690b      	ldr	r3, [r1, #16]
 800b380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b384:	4293      	cmp	r3, r2
 800b386:	bfb8      	it	lt
 800b388:	4613      	movlt	r3, r2
 800b38a:	6033      	str	r3, [r6, #0]
 800b38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b390:	4607      	mov	r7, r0
 800b392:	460c      	mov	r4, r1
 800b394:	b10a      	cbz	r2, 800b39a <_printf_common+0x26>
 800b396:	3301      	adds	r3, #1
 800b398:	6033      	str	r3, [r6, #0]
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	0699      	lsls	r1, r3, #26
 800b39e:	bf42      	ittt	mi
 800b3a0:	6833      	ldrmi	r3, [r6, #0]
 800b3a2:	3302      	addmi	r3, #2
 800b3a4:	6033      	strmi	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	f015 0506 	ands.w	r5, r5, #6
 800b3ac:	d106      	bne.n	800b3bc <_printf_common+0x48>
 800b3ae:	f104 0a19 	add.w	sl, r4, #25
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	6832      	ldr	r2, [r6, #0]
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dc26      	bgt.n	800b40a <_printf_common+0x96>
 800b3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3c0:	1e13      	subs	r3, r2, #0
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	bf18      	it	ne
 800b3c6:	2301      	movne	r3, #1
 800b3c8:	0692      	lsls	r2, r2, #26
 800b3ca:	d42b      	bmi.n	800b424 <_printf_common+0xb0>
 800b3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	47c0      	blx	r8
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d01e      	beq.n	800b418 <_printf_common+0xa4>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	6922      	ldr	r2, [r4, #16]
 800b3de:	f003 0306 	and.w	r3, r3, #6
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	bf02      	ittt	eq
 800b3e6:	68e5      	ldreq	r5, [r4, #12]
 800b3e8:	6833      	ldreq	r3, [r6, #0]
 800b3ea:	1aed      	subeq	r5, r5, r3
 800b3ec:	68a3      	ldr	r3, [r4, #8]
 800b3ee:	bf0c      	ite	eq
 800b3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f4:	2500      	movne	r5, #0
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	bfc4      	itt	gt
 800b3fa:	1a9b      	subgt	r3, r3, r2
 800b3fc:	18ed      	addgt	r5, r5, r3
 800b3fe:	2600      	movs	r6, #0
 800b400:	341a      	adds	r4, #26
 800b402:	42b5      	cmp	r5, r6
 800b404:	d11a      	bne.n	800b43c <_printf_common+0xc8>
 800b406:	2000      	movs	r0, #0
 800b408:	e008      	b.n	800b41c <_printf_common+0xa8>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4652      	mov	r2, sl
 800b40e:	4649      	mov	r1, r9
 800b410:	4638      	mov	r0, r7
 800b412:	47c0      	blx	r8
 800b414:	3001      	adds	r0, #1
 800b416:	d103      	bne.n	800b420 <_printf_common+0xac>
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b420:	3501      	adds	r5, #1
 800b422:	e7c6      	b.n	800b3b2 <_printf_common+0x3e>
 800b424:	18e1      	adds	r1, r4, r3
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	2030      	movs	r0, #48	; 0x30
 800b42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b42e:	4422      	add	r2, r4
 800b430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b438:	3302      	adds	r3, #2
 800b43a:	e7c7      	b.n	800b3cc <_printf_common+0x58>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4622      	mov	r2, r4
 800b440:	4649      	mov	r1, r9
 800b442:	4638      	mov	r0, r7
 800b444:	47c0      	blx	r8
 800b446:	3001      	adds	r0, #1
 800b448:	d0e6      	beq.n	800b418 <_printf_common+0xa4>
 800b44a:	3601      	adds	r6, #1
 800b44c:	e7d9      	b.n	800b402 <_printf_common+0x8e>
	...

0800b450 <_printf_i>:
 800b450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	7e0f      	ldrb	r7, [r1, #24]
 800b456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b458:	2f78      	cmp	r7, #120	; 0x78
 800b45a:	4691      	mov	r9, r2
 800b45c:	4680      	mov	r8, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	469a      	mov	sl, r3
 800b462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b466:	d807      	bhi.n	800b478 <_printf_i+0x28>
 800b468:	2f62      	cmp	r7, #98	; 0x62
 800b46a:	d80a      	bhi.n	800b482 <_printf_i+0x32>
 800b46c:	2f00      	cmp	r7, #0
 800b46e:	f000 80d4 	beq.w	800b61a <_printf_i+0x1ca>
 800b472:	2f58      	cmp	r7, #88	; 0x58
 800b474:	f000 80c0 	beq.w	800b5f8 <_printf_i+0x1a8>
 800b478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b480:	e03a      	b.n	800b4f8 <_printf_i+0xa8>
 800b482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b486:	2b15      	cmp	r3, #21
 800b488:	d8f6      	bhi.n	800b478 <_printf_i+0x28>
 800b48a:	a101      	add	r1, pc, #4	; (adr r1, 800b490 <_printf_i+0x40>)
 800b48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b490:	0800b4e9 	.word	0x0800b4e9
 800b494:	0800b4fd 	.word	0x0800b4fd
 800b498:	0800b479 	.word	0x0800b479
 800b49c:	0800b479 	.word	0x0800b479
 800b4a0:	0800b479 	.word	0x0800b479
 800b4a4:	0800b479 	.word	0x0800b479
 800b4a8:	0800b4fd 	.word	0x0800b4fd
 800b4ac:	0800b479 	.word	0x0800b479
 800b4b0:	0800b479 	.word	0x0800b479
 800b4b4:	0800b479 	.word	0x0800b479
 800b4b8:	0800b479 	.word	0x0800b479
 800b4bc:	0800b601 	.word	0x0800b601
 800b4c0:	0800b529 	.word	0x0800b529
 800b4c4:	0800b5bb 	.word	0x0800b5bb
 800b4c8:	0800b479 	.word	0x0800b479
 800b4cc:	0800b479 	.word	0x0800b479
 800b4d0:	0800b623 	.word	0x0800b623
 800b4d4:	0800b479 	.word	0x0800b479
 800b4d8:	0800b529 	.word	0x0800b529
 800b4dc:	0800b479 	.word	0x0800b479
 800b4e0:	0800b479 	.word	0x0800b479
 800b4e4:	0800b5c3 	.word	0x0800b5c3
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	1d1a      	adds	r2, r3, #4
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	602a      	str	r2, [r5, #0]
 800b4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e09f      	b.n	800b63c <_printf_i+0x1ec>
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	682b      	ldr	r3, [r5, #0]
 800b500:	0607      	lsls	r7, r0, #24
 800b502:	f103 0104 	add.w	r1, r3, #4
 800b506:	6029      	str	r1, [r5, #0]
 800b508:	d501      	bpl.n	800b50e <_printf_i+0xbe>
 800b50a:	681e      	ldr	r6, [r3, #0]
 800b50c:	e003      	b.n	800b516 <_printf_i+0xc6>
 800b50e:	0646      	lsls	r6, r0, #25
 800b510:	d5fb      	bpl.n	800b50a <_printf_i+0xba>
 800b512:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b516:	2e00      	cmp	r6, #0
 800b518:	da03      	bge.n	800b522 <_printf_i+0xd2>
 800b51a:	232d      	movs	r3, #45	; 0x2d
 800b51c:	4276      	negs	r6, r6
 800b51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b522:	485a      	ldr	r0, [pc, #360]	; (800b68c <_printf_i+0x23c>)
 800b524:	230a      	movs	r3, #10
 800b526:	e012      	b.n	800b54e <_printf_i+0xfe>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	6820      	ldr	r0, [r4, #0]
 800b52c:	1d19      	adds	r1, r3, #4
 800b52e:	6029      	str	r1, [r5, #0]
 800b530:	0605      	lsls	r5, r0, #24
 800b532:	d501      	bpl.n	800b538 <_printf_i+0xe8>
 800b534:	681e      	ldr	r6, [r3, #0]
 800b536:	e002      	b.n	800b53e <_printf_i+0xee>
 800b538:	0641      	lsls	r1, r0, #25
 800b53a:	d5fb      	bpl.n	800b534 <_printf_i+0xe4>
 800b53c:	881e      	ldrh	r6, [r3, #0]
 800b53e:	4853      	ldr	r0, [pc, #332]	; (800b68c <_printf_i+0x23c>)
 800b540:	2f6f      	cmp	r7, #111	; 0x6f
 800b542:	bf0c      	ite	eq
 800b544:	2308      	moveq	r3, #8
 800b546:	230a      	movne	r3, #10
 800b548:	2100      	movs	r1, #0
 800b54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b54e:	6865      	ldr	r5, [r4, #4]
 800b550:	60a5      	str	r5, [r4, #8]
 800b552:	2d00      	cmp	r5, #0
 800b554:	bfa2      	ittt	ge
 800b556:	6821      	ldrge	r1, [r4, #0]
 800b558:	f021 0104 	bicge.w	r1, r1, #4
 800b55c:	6021      	strge	r1, [r4, #0]
 800b55e:	b90e      	cbnz	r6, 800b564 <_printf_i+0x114>
 800b560:	2d00      	cmp	r5, #0
 800b562:	d04b      	beq.n	800b5fc <_printf_i+0x1ac>
 800b564:	4615      	mov	r5, r2
 800b566:	fbb6 f1f3 	udiv	r1, r6, r3
 800b56a:	fb03 6711 	mls	r7, r3, r1, r6
 800b56e:	5dc7      	ldrb	r7, [r0, r7]
 800b570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b574:	4637      	mov	r7, r6
 800b576:	42bb      	cmp	r3, r7
 800b578:	460e      	mov	r6, r1
 800b57a:	d9f4      	bls.n	800b566 <_printf_i+0x116>
 800b57c:	2b08      	cmp	r3, #8
 800b57e:	d10b      	bne.n	800b598 <_printf_i+0x148>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	07de      	lsls	r6, r3, #31
 800b584:	d508      	bpl.n	800b598 <_printf_i+0x148>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	6861      	ldr	r1, [r4, #4]
 800b58a:	4299      	cmp	r1, r3
 800b58c:	bfde      	ittt	le
 800b58e:	2330      	movle	r3, #48	; 0x30
 800b590:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b594:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b598:	1b52      	subs	r2, r2, r5
 800b59a:	6122      	str	r2, [r4, #16]
 800b59c:	f8cd a000 	str.w	sl, [sp]
 800b5a0:	464b      	mov	r3, r9
 800b5a2:	aa03      	add	r2, sp, #12
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f7ff fee4 	bl	800b374 <_printf_common>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d14a      	bne.n	800b646 <_printf_i+0x1f6>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	b004      	add	sp, #16
 800b5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ba:	6823      	ldr	r3, [r4, #0]
 800b5bc:	f043 0320 	orr.w	r3, r3, #32
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	4833      	ldr	r0, [pc, #204]	; (800b690 <_printf_i+0x240>)
 800b5c4:	2778      	movs	r7, #120	; 0x78
 800b5c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	6829      	ldr	r1, [r5, #0]
 800b5ce:	061f      	lsls	r7, r3, #24
 800b5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5d4:	d402      	bmi.n	800b5dc <_printf_i+0x18c>
 800b5d6:	065f      	lsls	r7, r3, #25
 800b5d8:	bf48      	it	mi
 800b5da:	b2b6      	uxthmi	r6, r6
 800b5dc:	07df      	lsls	r7, r3, #31
 800b5de:	bf48      	it	mi
 800b5e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b5e4:	6029      	str	r1, [r5, #0]
 800b5e6:	bf48      	it	mi
 800b5e8:	6023      	strmi	r3, [r4, #0]
 800b5ea:	b91e      	cbnz	r6, 800b5f4 <_printf_i+0x1a4>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	f023 0320 	bic.w	r3, r3, #32
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	e7a7      	b.n	800b548 <_printf_i+0xf8>
 800b5f8:	4824      	ldr	r0, [pc, #144]	; (800b68c <_printf_i+0x23c>)
 800b5fa:	e7e4      	b.n	800b5c6 <_printf_i+0x176>
 800b5fc:	4615      	mov	r5, r2
 800b5fe:	e7bd      	b.n	800b57c <_printf_i+0x12c>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	6826      	ldr	r6, [r4, #0]
 800b604:	6961      	ldr	r1, [r4, #20]
 800b606:	1d18      	adds	r0, r3, #4
 800b608:	6028      	str	r0, [r5, #0]
 800b60a:	0635      	lsls	r5, r6, #24
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	d501      	bpl.n	800b614 <_printf_i+0x1c4>
 800b610:	6019      	str	r1, [r3, #0]
 800b612:	e002      	b.n	800b61a <_printf_i+0x1ca>
 800b614:	0670      	lsls	r0, r6, #25
 800b616:	d5fb      	bpl.n	800b610 <_printf_i+0x1c0>
 800b618:	8019      	strh	r1, [r3, #0]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6123      	str	r3, [r4, #16]
 800b61e:	4615      	mov	r5, r2
 800b620:	e7bc      	b.n	800b59c <_printf_i+0x14c>
 800b622:	682b      	ldr	r3, [r5, #0]
 800b624:	1d1a      	adds	r2, r3, #4
 800b626:	602a      	str	r2, [r5, #0]
 800b628:	681d      	ldr	r5, [r3, #0]
 800b62a:	6862      	ldr	r2, [r4, #4]
 800b62c:	2100      	movs	r1, #0
 800b62e:	4628      	mov	r0, r5
 800b630:	f7f4 fdfe 	bl	8000230 <memchr>
 800b634:	b108      	cbz	r0, 800b63a <_printf_i+0x1ea>
 800b636:	1b40      	subs	r0, r0, r5
 800b638:	6060      	str	r0, [r4, #4]
 800b63a:	6863      	ldr	r3, [r4, #4]
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	2300      	movs	r3, #0
 800b640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b644:	e7aa      	b.n	800b59c <_printf_i+0x14c>
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	462a      	mov	r2, r5
 800b64a:	4649      	mov	r1, r9
 800b64c:	4640      	mov	r0, r8
 800b64e:	47d0      	blx	sl
 800b650:	3001      	adds	r0, #1
 800b652:	d0ad      	beq.n	800b5b0 <_printf_i+0x160>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	079b      	lsls	r3, r3, #30
 800b658:	d413      	bmi.n	800b682 <_printf_i+0x232>
 800b65a:	68e0      	ldr	r0, [r4, #12]
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	4298      	cmp	r0, r3
 800b660:	bfb8      	it	lt
 800b662:	4618      	movlt	r0, r3
 800b664:	e7a6      	b.n	800b5b4 <_printf_i+0x164>
 800b666:	2301      	movs	r3, #1
 800b668:	4632      	mov	r2, r6
 800b66a:	4649      	mov	r1, r9
 800b66c:	4640      	mov	r0, r8
 800b66e:	47d0      	blx	sl
 800b670:	3001      	adds	r0, #1
 800b672:	d09d      	beq.n	800b5b0 <_printf_i+0x160>
 800b674:	3501      	adds	r5, #1
 800b676:	68e3      	ldr	r3, [r4, #12]
 800b678:	9903      	ldr	r1, [sp, #12]
 800b67a:	1a5b      	subs	r3, r3, r1
 800b67c:	42ab      	cmp	r3, r5
 800b67e:	dcf2      	bgt.n	800b666 <_printf_i+0x216>
 800b680:	e7eb      	b.n	800b65a <_printf_i+0x20a>
 800b682:	2500      	movs	r5, #0
 800b684:	f104 0619 	add.w	r6, r4, #25
 800b688:	e7f5      	b.n	800b676 <_printf_i+0x226>
 800b68a:	bf00      	nop
 800b68c:	0800bfe0 	.word	0x0800bfe0
 800b690:	0800bff1 	.word	0x0800bff1

0800b694 <__sflush_r>:
 800b694:	898a      	ldrh	r2, [r1, #12]
 800b696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69a:	4605      	mov	r5, r0
 800b69c:	0710      	lsls	r0, r2, #28
 800b69e:	460c      	mov	r4, r1
 800b6a0:	d458      	bmi.n	800b754 <__sflush_r+0xc0>
 800b6a2:	684b      	ldr	r3, [r1, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	dc05      	bgt.n	800b6b4 <__sflush_r+0x20>
 800b6a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	dc02      	bgt.n	800b6b4 <__sflush_r+0x20>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	d0f9      	beq.n	800b6ae <__sflush_r+0x1a>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6c0:	682f      	ldr	r7, [r5, #0]
 800b6c2:	6a21      	ldr	r1, [r4, #32]
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	d032      	beq.n	800b72e <__sflush_r+0x9a>
 800b6c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	075a      	lsls	r2, r3, #29
 800b6ce:	d505      	bpl.n	800b6dc <__sflush_r+0x48>
 800b6d0:	6863      	ldr	r3, [r4, #4]
 800b6d2:	1ac0      	subs	r0, r0, r3
 800b6d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6d6:	b10b      	cbz	r3, 800b6dc <__sflush_r+0x48>
 800b6d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6da:	1ac0      	subs	r0, r0, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4602      	mov	r2, r0
 800b6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6e2:	6a21      	ldr	r1, [r4, #32]
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b0      	blx	r6
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	d106      	bne.n	800b6fc <__sflush_r+0x68>
 800b6ee:	6829      	ldr	r1, [r5, #0]
 800b6f0:	291d      	cmp	r1, #29
 800b6f2:	d82b      	bhi.n	800b74c <__sflush_r+0xb8>
 800b6f4:	4a29      	ldr	r2, [pc, #164]	; (800b79c <__sflush_r+0x108>)
 800b6f6:	410a      	asrs	r2, r1
 800b6f8:	07d6      	lsls	r6, r2, #31
 800b6fa:	d427      	bmi.n	800b74c <__sflush_r+0xb8>
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	6062      	str	r2, [r4, #4]
 800b700:	04d9      	lsls	r1, r3, #19
 800b702:	6922      	ldr	r2, [r4, #16]
 800b704:	6022      	str	r2, [r4, #0]
 800b706:	d504      	bpl.n	800b712 <__sflush_r+0x7e>
 800b708:	1c42      	adds	r2, r0, #1
 800b70a:	d101      	bne.n	800b710 <__sflush_r+0x7c>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b903      	cbnz	r3, 800b712 <__sflush_r+0x7e>
 800b710:	6560      	str	r0, [r4, #84]	; 0x54
 800b712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b714:	602f      	str	r7, [r5, #0]
 800b716:	2900      	cmp	r1, #0
 800b718:	d0c9      	beq.n	800b6ae <__sflush_r+0x1a>
 800b71a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b71e:	4299      	cmp	r1, r3
 800b720:	d002      	beq.n	800b728 <__sflush_r+0x94>
 800b722:	4628      	mov	r0, r5
 800b724:	f7ff fc82 	bl	800b02c <_free_r>
 800b728:	2000      	movs	r0, #0
 800b72a:	6360      	str	r0, [r4, #52]	; 0x34
 800b72c:	e7c0      	b.n	800b6b0 <__sflush_r+0x1c>
 800b72e:	2301      	movs	r3, #1
 800b730:	4628      	mov	r0, r5
 800b732:	47b0      	blx	r6
 800b734:	1c41      	adds	r1, r0, #1
 800b736:	d1c8      	bne.n	800b6ca <__sflush_r+0x36>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0c5      	beq.n	800b6ca <__sflush_r+0x36>
 800b73e:	2b1d      	cmp	r3, #29
 800b740:	d001      	beq.n	800b746 <__sflush_r+0xb2>
 800b742:	2b16      	cmp	r3, #22
 800b744:	d101      	bne.n	800b74a <__sflush_r+0xb6>
 800b746:	602f      	str	r7, [r5, #0]
 800b748:	e7b1      	b.n	800b6ae <__sflush_r+0x1a>
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	e7ad      	b.n	800b6b0 <__sflush_r+0x1c>
 800b754:	690f      	ldr	r7, [r1, #16]
 800b756:	2f00      	cmp	r7, #0
 800b758:	d0a9      	beq.n	800b6ae <__sflush_r+0x1a>
 800b75a:	0793      	lsls	r3, r2, #30
 800b75c:	680e      	ldr	r6, [r1, #0]
 800b75e:	bf08      	it	eq
 800b760:	694b      	ldreq	r3, [r1, #20]
 800b762:	600f      	str	r7, [r1, #0]
 800b764:	bf18      	it	ne
 800b766:	2300      	movne	r3, #0
 800b768:	eba6 0807 	sub.w	r8, r6, r7
 800b76c:	608b      	str	r3, [r1, #8]
 800b76e:	f1b8 0f00 	cmp.w	r8, #0
 800b772:	dd9c      	ble.n	800b6ae <__sflush_r+0x1a>
 800b774:	6a21      	ldr	r1, [r4, #32]
 800b776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b778:	4643      	mov	r3, r8
 800b77a:	463a      	mov	r2, r7
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b0      	blx	r6
 800b780:	2800      	cmp	r0, #0
 800b782:	dc06      	bgt.n	800b792 <__sflush_r+0xfe>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	e78e      	b.n	800b6b0 <__sflush_r+0x1c>
 800b792:	4407      	add	r7, r0
 800b794:	eba8 0800 	sub.w	r8, r8, r0
 800b798:	e7e9      	b.n	800b76e <__sflush_r+0xda>
 800b79a:	bf00      	nop
 800b79c:	dfbffffe 	.word	0xdfbffffe

0800b7a0 <_fflush_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	690b      	ldr	r3, [r1, #16]
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	b913      	cbnz	r3, 800b7b0 <_fflush_r+0x10>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	b118      	cbz	r0, 800b7ba <_fflush_r+0x1a>
 800b7b2:	6a03      	ldr	r3, [r0, #32]
 800b7b4:	b90b      	cbnz	r3, 800b7ba <_fflush_r+0x1a>
 800b7b6:	f7ff fa95 	bl	800ace4 <__sinit>
 800b7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0f3      	beq.n	800b7aa <_fflush_r+0xa>
 800b7c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7c4:	07d0      	lsls	r0, r2, #31
 800b7c6:	d404      	bmi.n	800b7d2 <_fflush_r+0x32>
 800b7c8:	0599      	lsls	r1, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_fflush_r+0x32>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ce:	f7f7 f912 	bl	80029f6 <__retarget_lock_acquire_recursive>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	f7ff ff5d 	bl	800b694 <__sflush_r>
 800b7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7dc:	07da      	lsls	r2, r3, #31
 800b7de:	4605      	mov	r5, r0
 800b7e0:	d4e4      	bmi.n	800b7ac <_fflush_r+0xc>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	059b      	lsls	r3, r3, #22
 800b7e6:	d4e1      	bmi.n	800b7ac <_fflush_r+0xc>
 800b7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ea:	f7f7 f918 	bl	8002a1e <__retarget_lock_release_recursive>
 800b7ee:	e7dd      	b.n	800b7ac <_fflush_r+0xc>

0800b7f0 <fiprintf>:
 800b7f0:	b40e      	push	{r1, r2, r3}
 800b7f2:	b503      	push	{r0, r1, lr}
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	4805      	ldr	r0, [pc, #20]	; (800b810 <fiprintf+0x20>)
 800b7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fe:	6800      	ldr	r0, [r0, #0]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	f000 f881 	bl	800b908 <_vfiprintf_r>
 800b806:	b002      	add	sp, #8
 800b808:	f85d eb04 	ldr.w	lr, [sp], #4
 800b80c:	b003      	add	sp, #12
 800b80e:	4770      	bx	lr
 800b810:	2000006c 	.word	0x2000006c

0800b814 <memmove>:
 800b814:	4288      	cmp	r0, r1
 800b816:	b510      	push	{r4, lr}
 800b818:	eb01 0402 	add.w	r4, r1, r2
 800b81c:	d902      	bls.n	800b824 <memmove+0x10>
 800b81e:	4284      	cmp	r4, r0
 800b820:	4623      	mov	r3, r4
 800b822:	d807      	bhi.n	800b834 <memmove+0x20>
 800b824:	1e43      	subs	r3, r0, #1
 800b826:	42a1      	cmp	r1, r4
 800b828:	d008      	beq.n	800b83c <memmove+0x28>
 800b82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b832:	e7f8      	b.n	800b826 <memmove+0x12>
 800b834:	4402      	add	r2, r0
 800b836:	4601      	mov	r1, r0
 800b838:	428a      	cmp	r2, r1
 800b83a:	d100      	bne.n	800b83e <memmove+0x2a>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b846:	e7f7      	b.n	800b838 <memmove+0x24>

0800b848 <abort>:
 800b848:	b508      	push	{r3, lr}
 800b84a:	2006      	movs	r0, #6
 800b84c:	f000 fa34 	bl	800bcb8 <raise>
 800b850:	2001      	movs	r0, #1
 800b852:	f7f6 ff8d 	bl	8002770 <_exit>

0800b856 <_realloc_r>:
 800b856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85a:	4680      	mov	r8, r0
 800b85c:	4614      	mov	r4, r2
 800b85e:	460e      	mov	r6, r1
 800b860:	b921      	cbnz	r1, 800b86c <_realloc_r+0x16>
 800b862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b866:	4611      	mov	r1, r2
 800b868:	f7ff b8f8 	b.w	800aa5c <_malloc_r>
 800b86c:	b92a      	cbnz	r2, 800b87a <_realloc_r+0x24>
 800b86e:	f7ff fbdd 	bl	800b02c <_free_r>
 800b872:	4625      	mov	r5, r4
 800b874:	4628      	mov	r0, r5
 800b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87a:	f000 fa39 	bl	800bcf0 <_malloc_usable_size_r>
 800b87e:	4284      	cmp	r4, r0
 800b880:	4607      	mov	r7, r0
 800b882:	d802      	bhi.n	800b88a <_realloc_r+0x34>
 800b884:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b888:	d812      	bhi.n	800b8b0 <_realloc_r+0x5a>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4640      	mov	r0, r8
 800b88e:	f7ff f8e5 	bl	800aa5c <_malloc_r>
 800b892:	4605      	mov	r5, r0
 800b894:	2800      	cmp	r0, #0
 800b896:	d0ed      	beq.n	800b874 <_realloc_r+0x1e>
 800b898:	42bc      	cmp	r4, r7
 800b89a:	4622      	mov	r2, r4
 800b89c:	4631      	mov	r1, r6
 800b89e:	bf28      	it	cs
 800b8a0:	463a      	movcs	r2, r7
 800b8a2:	f7ff fb97 	bl	800afd4 <memcpy>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	f7ff fbbf 	bl	800b02c <_free_r>
 800b8ae:	e7e1      	b.n	800b874 <_realloc_r+0x1e>
 800b8b0:	4635      	mov	r5, r6
 800b8b2:	e7df      	b.n	800b874 <_realloc_r+0x1e>

0800b8b4 <__sfputc_r>:
 800b8b4:	6893      	ldr	r3, [r2, #8]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	b410      	push	{r4}
 800b8bc:	6093      	str	r3, [r2, #8]
 800b8be:	da08      	bge.n	800b8d2 <__sfputc_r+0x1e>
 800b8c0:	6994      	ldr	r4, [r2, #24]
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	db01      	blt.n	800b8ca <__sfputc_r+0x16>
 800b8c6:	290a      	cmp	r1, #10
 800b8c8:	d103      	bne.n	800b8d2 <__sfputc_r+0x1e>
 800b8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ce:	f000 b935 	b.w	800bb3c <__swbuf_r>
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	1c58      	adds	r0, r3, #1
 800b8d6:	6010      	str	r0, [r2, #0]
 800b8d8:	7019      	strb	r1, [r3, #0]
 800b8da:	4608      	mov	r0, r1
 800b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <__sfputs_r>:
 800b8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	18d5      	adds	r5, r2, r3
 800b8ec:	42ac      	cmp	r4, r5
 800b8ee:	d101      	bne.n	800b8f4 <__sfputs_r+0x12>
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e007      	b.n	800b904 <__sfputs_r+0x22>
 800b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f8:	463a      	mov	r2, r7
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff ffda 	bl	800b8b4 <__sfputc_r>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d1f3      	bne.n	800b8ec <__sfputs_r+0xa>
 800b904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b908 <_vfiprintf_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	460d      	mov	r5, r1
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	4614      	mov	r4, r2
 800b912:	4698      	mov	r8, r3
 800b914:	4606      	mov	r6, r0
 800b916:	b118      	cbz	r0, 800b920 <_vfiprintf_r+0x18>
 800b918:	6a03      	ldr	r3, [r0, #32]
 800b91a:	b90b      	cbnz	r3, 800b920 <_vfiprintf_r+0x18>
 800b91c:	f7ff f9e2 	bl	800ace4 <__sinit>
 800b920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b922:	07d9      	lsls	r1, r3, #31
 800b924:	d405      	bmi.n	800b932 <_vfiprintf_r+0x2a>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	059a      	lsls	r2, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_vfiprintf_r+0x2a>
 800b92c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b92e:	f7f7 f862 	bl	80029f6 <__retarget_lock_acquire_recursive>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	071b      	lsls	r3, r3, #28
 800b936:	d501      	bpl.n	800b93c <_vfiprintf_r+0x34>
 800b938:	692b      	ldr	r3, [r5, #16]
 800b93a:	b99b      	cbnz	r3, 800b964 <_vfiprintf_r+0x5c>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4630      	mov	r0, r6
 800b940:	f000 f93a 	bl	800bbb8 <__swsetup_r>
 800b944:	b170      	cbz	r0, 800b964 <_vfiprintf_r+0x5c>
 800b946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b948:	07dc      	lsls	r4, r3, #31
 800b94a:	d504      	bpl.n	800b956 <_vfiprintf_r+0x4e>
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295
 800b950:	b01d      	add	sp, #116	; 0x74
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	0598      	lsls	r0, r3, #22
 800b95a:	d4f7      	bmi.n	800b94c <_vfiprintf_r+0x44>
 800b95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95e:	f7f7 f85e 	bl	8002a1e <__retarget_lock_release_recursive>
 800b962:	e7f3      	b.n	800b94c <_vfiprintf_r+0x44>
 800b964:	2300      	movs	r3, #0
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	2320      	movs	r3, #32
 800b96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b972:	2330      	movs	r3, #48	; 0x30
 800b974:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb28 <_vfiprintf_r+0x220>
 800b978:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b97c:	f04f 0901 	mov.w	r9, #1
 800b980:	4623      	mov	r3, r4
 800b982:	469a      	mov	sl, r3
 800b984:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b988:	b10a      	cbz	r2, 800b98e <_vfiprintf_r+0x86>
 800b98a:	2a25      	cmp	r2, #37	; 0x25
 800b98c:	d1f9      	bne.n	800b982 <_vfiprintf_r+0x7a>
 800b98e:	ebba 0b04 	subs.w	fp, sl, r4
 800b992:	d00b      	beq.n	800b9ac <_vfiprintf_r+0xa4>
 800b994:	465b      	mov	r3, fp
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ffa1 	bl	800b8e2 <__sfputs_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f000 80a9 	beq.w	800baf8 <_vfiprintf_r+0x1f0>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a8:	445a      	add	r2, fp
 800b9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 80a1 	beq.w	800baf8 <_vfiprintf_r+0x1f0>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4854      	ldr	r0, [pc, #336]	; (800bb28 <_vfiprintf_r+0x220>)
 800b9d8:	f7f4 fc2a 	bl	8000230 <memchr>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	b9d8      	cbnz	r0, 800ba18 <_vfiprintf_r+0x110>
 800b9e0:	06d1      	lsls	r1, r2, #27
 800b9e2:	bf44      	itt	mi
 800b9e4:	2320      	movmi	r3, #32
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ea:	0713      	lsls	r3, r2, #28
 800b9ec:	bf44      	itt	mi
 800b9ee:	232b      	movmi	r3, #43	; 0x2b
 800b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fa:	d015      	beq.n	800ba28 <_vfiprintf_r+0x120>
 800b9fc:	9a07      	ldr	r2, [sp, #28]
 800b9fe:	4654      	mov	r4, sl
 800ba00:	2000      	movs	r0, #0
 800ba02:	f04f 0c0a 	mov.w	ip, #10
 800ba06:	4621      	mov	r1, r4
 800ba08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d94d      	bls.n	800baae <_vfiprintf_r+0x1a6>
 800ba12:	b1b0      	cbz	r0, 800ba42 <_vfiprintf_r+0x13a>
 800ba14:	9207      	str	r2, [sp, #28]
 800ba16:	e014      	b.n	800ba42 <_vfiprintf_r+0x13a>
 800ba18:	eba0 0308 	sub.w	r3, r0, r8
 800ba1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba20:	4313      	orrs	r3, r2
 800ba22:	9304      	str	r3, [sp, #16]
 800ba24:	46a2      	mov	sl, r4
 800ba26:	e7d2      	b.n	800b9ce <_vfiprintf_r+0xc6>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d19      	adds	r1, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbb      	ittet	lt
 800ba34:	425b      	neglt	r3, r3
 800ba36:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3a:	9307      	strge	r3, [sp, #28]
 800ba3c:	9307      	strlt	r3, [sp, #28]
 800ba3e:	bfb8      	it	lt
 800ba40:	9204      	strlt	r2, [sp, #16]
 800ba42:	7823      	ldrb	r3, [r4, #0]
 800ba44:	2b2e      	cmp	r3, #46	; 0x2e
 800ba46:	d10c      	bne.n	800ba62 <_vfiprintf_r+0x15a>
 800ba48:	7863      	ldrb	r3, [r4, #1]
 800ba4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4c:	d134      	bne.n	800bab8 <_vfiprintf_r+0x1b0>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	1d1a      	adds	r2, r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	9203      	str	r2, [sp, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfb8      	it	lt
 800ba5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5e:	3402      	adds	r4, #2
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb38 <_vfiprintf_r+0x230>
 800ba66:	7821      	ldrb	r1, [r4, #0]
 800ba68:	2203      	movs	r2, #3
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	f7f4 fbe0 	bl	8000230 <memchr>
 800ba70:	b138      	cbz	r0, 800ba82 <_vfiprintf_r+0x17a>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	eba0 000a 	sub.w	r0, r0, sl
 800ba78:	2240      	movs	r2, #64	; 0x40
 800ba7a:	4082      	lsls	r2, r0
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	3401      	adds	r4, #1
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	4829      	ldr	r0, [pc, #164]	; (800bb2c <_vfiprintf_r+0x224>)
 800ba88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba8c:	2206      	movs	r2, #6
 800ba8e:	f7f4 fbcf 	bl	8000230 <memchr>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d03f      	beq.n	800bb16 <_vfiprintf_r+0x20e>
 800ba96:	4b26      	ldr	r3, [pc, #152]	; (800bb30 <_vfiprintf_r+0x228>)
 800ba98:	bb1b      	cbnz	r3, 800bae2 <_vfiprintf_r+0x1da>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	3308      	adds	r3, #8
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	443b      	add	r3, r7
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	e768      	b.n	800b980 <_vfiprintf_r+0x78>
 800baae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab2:	460c      	mov	r4, r1
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7a6      	b.n	800ba06 <_vfiprintf_r+0xfe>
 800bab8:	2300      	movs	r3, #0
 800baba:	3401      	adds	r4, #1
 800babc:	9305      	str	r3, [sp, #20]
 800babe:	4619      	mov	r1, r3
 800bac0:	f04f 0c0a 	mov.w	ip, #10
 800bac4:	4620      	mov	r0, r4
 800bac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baca:	3a30      	subs	r2, #48	; 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d903      	bls.n	800bad8 <_vfiprintf_r+0x1d0>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c6      	beq.n	800ba62 <_vfiprintf_r+0x15a>
 800bad4:	9105      	str	r1, [sp, #20]
 800bad6:	e7c4      	b.n	800ba62 <_vfiprintf_r+0x15a>
 800bad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800badc:	4604      	mov	r4, r0
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f0      	b.n	800bac4 <_vfiprintf_r+0x1bc>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	462a      	mov	r2, r5
 800bae8:	4b12      	ldr	r3, [pc, #72]	; (800bb34 <_vfiprintf_r+0x22c>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	4630      	mov	r0, r6
 800baee:	f3af 8000 	nop.w
 800baf2:	4607      	mov	r7, r0
 800baf4:	1c78      	adds	r0, r7, #1
 800baf6:	d1d6      	bne.n	800baa6 <_vfiprintf_r+0x19e>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x202>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x202>
 800bb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb06:	f7f6 ff8a 	bl	8002a1e <__retarget_lock_release_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	065b      	lsls	r3, r3, #25
 800bb0e:	f53f af1d 	bmi.w	800b94c <_vfiprintf_r+0x44>
 800bb12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb14:	e71c      	b.n	800b950 <_vfiprintf_r+0x48>
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	462a      	mov	r2, r5
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <_vfiprintf_r+0x22c>)
 800bb1e:	a904      	add	r1, sp, #16
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7ff fc95 	bl	800b450 <_printf_i>
 800bb26:	e7e4      	b.n	800baf2 <_vfiprintf_r+0x1ea>
 800bb28:	0800bfcf 	.word	0x0800bfcf
 800bb2c:	0800bfd9 	.word	0x0800bfd9
 800bb30:	00000000 	.word	0x00000000
 800bb34:	0800b8e3 	.word	0x0800b8e3
 800bb38:	0800bfd5 	.word	0x0800bfd5

0800bb3c <__swbuf_r>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	460e      	mov	r6, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	4605      	mov	r5, r0
 800bb44:	b118      	cbz	r0, 800bb4e <__swbuf_r+0x12>
 800bb46:	6a03      	ldr	r3, [r0, #32]
 800bb48:	b90b      	cbnz	r3, 800bb4e <__swbuf_r+0x12>
 800bb4a:	f7ff f8cb 	bl	800ace4 <__sinit>
 800bb4e:	69a3      	ldr	r3, [r4, #24]
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	071a      	lsls	r2, r3, #28
 800bb56:	d525      	bpl.n	800bba4 <__swbuf_r+0x68>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	b31b      	cbz	r3, 800bba4 <__swbuf_r+0x68>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	6922      	ldr	r2, [r4, #16]
 800bb60:	1a98      	subs	r0, r3, r2
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	b2f6      	uxtb	r6, r6
 800bb66:	4283      	cmp	r3, r0
 800bb68:	4637      	mov	r7, r6
 800bb6a:	dc04      	bgt.n	800bb76 <__swbuf_r+0x3a>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7ff fe16 	bl	800b7a0 <_fflush_r>
 800bb74:	b9e0      	cbnz	r0, 800bbb0 <__swbuf_r+0x74>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	6022      	str	r2, [r4, #0]
 800bb82:	701e      	strb	r6, [r3, #0]
 800bb84:	6962      	ldr	r2, [r4, #20]
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d004      	beq.n	800bb96 <__swbuf_r+0x5a>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d506      	bpl.n	800bba0 <__swbuf_r+0x64>
 800bb92:	2e0a      	cmp	r6, #10
 800bb94:	d104      	bne.n	800bba0 <__swbuf_r+0x64>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7ff fe01 	bl	800b7a0 <_fflush_r>
 800bb9e:	b938      	cbnz	r0, 800bbb0 <__swbuf_r+0x74>
 800bba0:	4638      	mov	r0, r7
 800bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba4:	4621      	mov	r1, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 f806 	bl	800bbb8 <__swsetup_r>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d0d5      	beq.n	800bb5c <__swbuf_r+0x20>
 800bbb0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbb4:	e7f4      	b.n	800bba0 <__swbuf_r+0x64>
	...

0800bbb8 <__swsetup_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <__swsetup_r+0xac>)
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	6818      	ldr	r0, [r3, #0]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	b118      	cbz	r0, 800bbcc <__swsetup_r+0x14>
 800bbc4:	6a03      	ldr	r3, [r0, #32]
 800bbc6:	b90b      	cbnz	r3, 800bbcc <__swsetup_r+0x14>
 800bbc8:	f7ff f88c 	bl	800ace4 <__sinit>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd2:	0718      	lsls	r0, r3, #28
 800bbd4:	d422      	bmi.n	800bc1c <__swsetup_r+0x64>
 800bbd6:	06d9      	lsls	r1, r3, #27
 800bbd8:	d407      	bmi.n	800bbea <__swsetup_r+0x32>
 800bbda:	2309      	movs	r3, #9
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbe2:	81a3      	strh	r3, [r4, #12]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e034      	b.n	800bc54 <__swsetup_r+0x9c>
 800bbea:	0758      	lsls	r0, r3, #29
 800bbec:	d512      	bpl.n	800bc14 <__swsetup_r+0x5c>
 800bbee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf0:	b141      	cbz	r1, 800bc04 <__swsetup_r+0x4c>
 800bbf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf6:	4299      	cmp	r1, r3
 800bbf8:	d002      	beq.n	800bc00 <__swsetup_r+0x48>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	f7ff fa16 	bl	800b02c <_free_r>
 800bc00:	2300      	movs	r3, #0
 800bc02:	6363      	str	r3, [r4, #52]	; 0x34
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	6063      	str	r3, [r4, #4]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f043 0308 	orr.w	r3, r3, #8
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	6923      	ldr	r3, [r4, #16]
 800bc1e:	b94b      	cbnz	r3, 800bc34 <__swsetup_r+0x7c>
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc2a:	d003      	beq.n	800bc34 <__swsetup_r+0x7c>
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f88c 	bl	800bd4c <__smakebuf_r>
 800bc34:	89a0      	ldrh	r0, [r4, #12]
 800bc36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc3a:	f010 0301 	ands.w	r3, r0, #1
 800bc3e:	d00a      	beq.n	800bc56 <__swsetup_r+0x9e>
 800bc40:	2300      	movs	r3, #0
 800bc42:	60a3      	str	r3, [r4, #8]
 800bc44:	6963      	ldr	r3, [r4, #20]
 800bc46:	425b      	negs	r3, r3
 800bc48:	61a3      	str	r3, [r4, #24]
 800bc4a:	6923      	ldr	r3, [r4, #16]
 800bc4c:	b943      	cbnz	r3, 800bc60 <__swsetup_r+0xa8>
 800bc4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc52:	d1c4      	bne.n	800bbde <__swsetup_r+0x26>
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	0781      	lsls	r1, r0, #30
 800bc58:	bf58      	it	pl
 800bc5a:	6963      	ldrpl	r3, [r4, #20]
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	e7f4      	b.n	800bc4a <__swsetup_r+0x92>
 800bc60:	2000      	movs	r0, #0
 800bc62:	e7f7      	b.n	800bc54 <__swsetup_r+0x9c>
 800bc64:	2000006c 	.word	0x2000006c

0800bc68 <_raise_r>:
 800bc68:	291f      	cmp	r1, #31
 800bc6a:	b538      	push	{r3, r4, r5, lr}
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	460d      	mov	r5, r1
 800bc70:	d904      	bls.n	800bc7c <_raise_r+0x14>
 800bc72:	2316      	movs	r3, #22
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc7e:	b112      	cbz	r2, 800bc86 <_raise_r+0x1e>
 800bc80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc84:	b94b      	cbnz	r3, 800bc9a <_raise_r+0x32>
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 f830 	bl	800bcec <_getpid_r>
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4601      	mov	r1, r0
 800bc90:	4620      	mov	r0, r4
 800bc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc96:	f000 b817 	b.w	800bcc8 <_kill_r>
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d00a      	beq.n	800bcb4 <_raise_r+0x4c>
 800bc9e:	1c59      	adds	r1, r3, #1
 800bca0:	d103      	bne.n	800bcaa <_raise_r+0x42>
 800bca2:	2316      	movs	r3, #22
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7e7      	b.n	800bc7a <_raise_r+0x12>
 800bcaa:	2400      	movs	r4, #0
 800bcac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	4798      	blx	r3
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e7e0      	b.n	800bc7a <_raise_r+0x12>

0800bcb8 <raise>:
 800bcb8:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <raise+0xc>)
 800bcba:	4601      	mov	r1, r0
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f7ff bfd3 	b.w	800bc68 <_raise_r>
 800bcc2:	bf00      	nop
 800bcc4:	2000006c 	.word	0x2000006c

0800bcc8 <_kill_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d07      	ldr	r5, [pc, #28]	; (800bce8 <_kill_r+0x20>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	f7f6 fd3b 	bl	8002750 <_kill>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d102      	bne.n	800bce4 <_kill_r+0x1c>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b103      	cbz	r3, 800bce4 <_kill_r+0x1c>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	bf00      	nop
 800bce8:	20002f5c 	.word	0x20002f5c

0800bcec <_getpid_r>:
 800bcec:	f7f6 bd28 	b.w	8002740 <_getpid>

0800bcf0 <_malloc_usable_size_r>:
 800bcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf4:	1f18      	subs	r0, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfbc      	itt	lt
 800bcfa:	580b      	ldrlt	r3, [r1, r0]
 800bcfc:	18c0      	addlt	r0, r0, r3
 800bcfe:	4770      	bx	lr

0800bd00 <__swhatbuf_r>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	460c      	mov	r4, r1
 800bd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd08:	2900      	cmp	r1, #0
 800bd0a:	b096      	sub	sp, #88	; 0x58
 800bd0c:	4615      	mov	r5, r2
 800bd0e:	461e      	mov	r6, r3
 800bd10:	da0d      	bge.n	800bd2e <__swhatbuf_r+0x2e>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd18:	f04f 0100 	mov.w	r1, #0
 800bd1c:	bf0c      	ite	eq
 800bd1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd22:	2340      	movne	r3, #64	; 0x40
 800bd24:	2000      	movs	r0, #0
 800bd26:	6031      	str	r1, [r6, #0]
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	b016      	add	sp, #88	; 0x58
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
 800bd2e:	466a      	mov	r2, sp
 800bd30:	f000 f848 	bl	800bdc4 <_fstat_r>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	dbec      	blt.n	800bd12 <__swhatbuf_r+0x12>
 800bd38:	9901      	ldr	r1, [sp, #4]
 800bd3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd42:	4259      	negs	r1, r3
 800bd44:	4159      	adcs	r1, r3
 800bd46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd4a:	e7eb      	b.n	800bd24 <__swhatbuf_r+0x24>

0800bd4c <__smakebuf_r>:
 800bd4c:	898b      	ldrh	r3, [r1, #12]
 800bd4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd50:	079d      	lsls	r5, r3, #30
 800bd52:	4606      	mov	r6, r0
 800bd54:	460c      	mov	r4, r1
 800bd56:	d507      	bpl.n	800bd68 <__smakebuf_r+0x1c>
 800bd58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	2301      	movs	r3, #1
 800bd62:	6163      	str	r3, [r4, #20]
 800bd64:	b002      	add	sp, #8
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	ab01      	add	r3, sp, #4
 800bd6a:	466a      	mov	r2, sp
 800bd6c:	f7ff ffc8 	bl	800bd00 <__swhatbuf_r>
 800bd70:	9900      	ldr	r1, [sp, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7fe fe71 	bl	800aa5c <_malloc_r>
 800bd7a:	b948      	cbnz	r0, 800bd90 <__smakebuf_r+0x44>
 800bd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd80:	059a      	lsls	r2, r3, #22
 800bd82:	d4ef      	bmi.n	800bd64 <__smakebuf_r+0x18>
 800bd84:	f023 0303 	bic.w	r3, r3, #3
 800bd88:	f043 0302 	orr.w	r3, r3, #2
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	e7e3      	b.n	800bd58 <__smakebuf_r+0xc>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	9b00      	ldr	r3, [sp, #0]
 800bd9c:	6163      	str	r3, [r4, #20]
 800bd9e:	9b01      	ldr	r3, [sp, #4]
 800bda0:	6120      	str	r0, [r4, #16]
 800bda2:	b15b      	cbz	r3, 800bdbc <__smakebuf_r+0x70>
 800bda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 f81d 	bl	800bde8 <_isatty_r>
 800bdae:	b128      	cbz	r0, 800bdbc <__smakebuf_r+0x70>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	431d      	orrs	r5, r3
 800bdc0:	81a5      	strh	r5, [r4, #12]
 800bdc2:	e7cf      	b.n	800bd64 <__smakebuf_r+0x18>

0800bdc4 <_fstat_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d07      	ldr	r5, [pc, #28]	; (800bde4 <_fstat_r+0x20>)
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	4611      	mov	r1, r2
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f7f6 fd1c 	bl	800280e <_fstat>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d102      	bne.n	800bde0 <_fstat_r+0x1c>
 800bdda:	682b      	ldr	r3, [r5, #0]
 800bddc:	b103      	cbz	r3, 800bde0 <_fstat_r+0x1c>
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	bf00      	nop
 800bde4:	20002f5c 	.word	0x20002f5c

0800bde8 <_isatty_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d06      	ldr	r5, [pc, #24]	; (800be04 <_isatty_r+0x1c>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	f7f6 fd1b 	bl	800282e <_isatty>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_isatty_r+0x1a>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_isatty_r+0x1a>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	20002f5c 	.word	0x20002f5c

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
